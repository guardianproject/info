<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Howto on Guardian Project</title>
    <link>https://guardianproject.github.io/info/categories/howto/</link>
    <description>Recent content in Howto on Guardian Project</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 18 Dec 2017 05:43:34 -0400</lastBuildDate>
    
        <atom:link href="https://guardianproject.github.io/info/categories/howto/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building a Signing Server</title>
      <link>https://guardianproject.github.io/info/2017/12/18/building-a-signing-server/</link>
      <pubDate>Mon, 18 Dec 2017 05:43:34 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2017/12/18/building-a-signing-server/</guid>
      <description>

&lt;p&gt;The Android APK signing model sets the expectation that the signing key will be the same for the entire lifetime of the app. That can be seen in the recommended lifetype of an Android signing key: &lt;a href=&#34;https://developer.android.com/studio/publish/app-signing.html#considerations&#34;&gt;20+ years&lt;/a&gt;. On top of that, it is difficult to &lt;a href=&#34;https://guardianproject.info/2015/12/29/how-to-migrate-your-android-apps-signing-key/&#34;&gt;migrate an app to a new key&lt;/a&gt;. Since the signing key is an essential part to preventing APKs from impersonating another, Android signing keys must be kept safe for the entire life of the app.&lt;/p&gt;

&lt;p&gt;The F-Droid repo signing keys follow a very similar model: the signing key is the essential way to safely identify an F-Droid repo. So the same considerations apply to F-Droid repo signing keys as to APK signing keys. This also provides some really useful benefits. Since the integrity of the repo index file and the APKs are guaranteed by the repo signature, the files can be delivered via whatever method is most convenient, and their integrity will be automatically verified by the F-Droid client app, the &lt;em&gt;f-droid.org&lt;/em&gt; deploy process, and Repomaker.&lt;/p&gt;

&lt;p&gt;This means the security burden is shifted from the online, public webserver to a private signing machine. Just keeping that machine out of the public eye goes a long way towards improving security. There are a number of additional measures that can be taken to further improve the security of the signing process. Here are some approaches, starting with the easiest and least security, and going on to more secure setups that require more work to setup and run. Signing is not an resource intensive process, so any machine will work, even a 10 year old, basic laptop. We recommend using a minimal &lt;a href=&#34;https://www.debian.org&#34;&gt;Debian&lt;/a&gt; install, and rebuilding the machine from scratch.&lt;/p&gt;

&lt;h3 id=&#34;automated-signing-server-with-with-hsm&#34;&gt;Automated Signing Server with with HSM&lt;/h3&gt;

&lt;p&gt;For a fully automated signing setup, the machine running the signing needs to be online and running. Ideally this machine would have no remote access, at the very least remote access should be very carefully controlled and monitored. A laptop makes it easy to work with even when remote access is disabled, since it provides a built-in keyboard and monitor. If remote access is required, then any basic PC will work fine. Using a Hardware Security Module (HSM) to store the keys prevents them from being stolen if the server is broken into. An attacker could only run the signing process on that server.&lt;/p&gt;

&lt;p&gt;Ideally, this machine would only be accessible via Tor. That hides the physical location of the server, and hides the traffic from network. This makes it much harder attackers to find the actual machine to attack.&lt;/p&gt;

&lt;p&gt;For the HSM, we recommend using &lt;a href=&#34;https://www.nitrokey.com/&#34;&gt;Nitrokey&lt;/a&gt; hardware, since they are free software/hardware, and provide a wide range of options. Use a separate machine to put the signing keys on HSM. A good HSM will keep an audit trail of how many signatures have been made, so that information could be used to create an automatic auditing process to raise alarms if too many signatures have been made. That could mean that this server was breached and used to sign unauthorized packages.&lt;/p&gt;

&lt;p&gt;Other possibility it to use a setup like &lt;a href=&#34;https://pagure.io/sigul&#34;&gt;Fedora&lt;/a&gt;‘s &lt;a href=&#34;http://www.devops-blog.net/koji/gpg-signing-rpms-with-sigul-signing-server-koji-integration&#34;&gt;Sigul&lt;/a&gt; that involves three machines.&lt;/p&gt;

&lt;h3 id=&#34;basic-laptop-dedicated-to-signing&#34;&gt;Basic laptop dedicated to signing&lt;/h3&gt;

&lt;p&gt;Start with a laptop that can be wiped clean and rebuilt from scratch. What is most important is that only the essential software is installed on it, and nothing else. Do not include any browser at all, for example, since that is the most common vector of attack. No remote access setup (e.g. SSH or VNC) should be installed or configured. To sign apps and repos, someone would take out this laptop, connect it to the network, and run the signing process. The signed results can then be published via the network connection. When the signing is complete, the machine can be turned off and disconnected and kept in a safe place.&lt;/p&gt;

&lt;p&gt;This could be made quite automatic with some custom scripts. The person running the process would only need to take out the machine, connect it, turn it on, wait until the process completes, then put it all away again.&lt;/p&gt;

&lt;h3 id=&#34;fully-offline-signing-laptop-with-usb-thumb-drives&#34;&gt;Fully offline signing laptop with USB thumb drives&lt;/h3&gt;

&lt;p&gt;_&lt;strong&gt;update&lt;/strong&gt;: apt-offline has a &lt;a href=&#34;https://bugs.debian.org/871656&#34;&gt;security bug&lt;/a&gt; so it was removed from Debian/buster. It is no longer recommended! Instead, use the Debian &amp;ldquo;&lt;a href=&#34;https://www.debian.org/doc/manuals/apt-offline&#34;&gt;apt offline&lt;/a&gt;&amp;rdquo; setup._&lt;/p&gt;

&lt;p&gt;This process is based on the same basic, stripped down laptop as the previous example. But this time, the networking should be entirely disabled before the install process. For example, it is easy in many laptops to physically remove the WiFi card. Therefore, it makes sense to use a laptop that does not include an ethernet jack, which are usually not possible to remove. Otherwise, blacklisting all kernel modules related to neworking can suffice. Since this machine is fully offline, the extra work of using an HSM is not as important, but it can’t hurt to include it.&lt;/p&gt;

&lt;p&gt;Download the full &amp;ldquo;CD&amp;rdquo; or &amp;ldquo;DVD&amp;rdquo; image of Debian to run the install. Be sure to &lt;a href=&#34;https://www.debian.org/CD/verify&#34;&gt;verify&lt;/a&gt; the GPG signatures and the SHA-256 hashes. One essential utility is &lt;em&gt;apt-offline&lt;/em&gt;, which automates the process of downloading Debian packages, verifying their signatures, and copying them over to an offline machine.&lt;/p&gt;

&lt;p&gt;To be extra careful, all of the software used should be verified. Chromebooks are nice, cheap laptops that run Linux natively. They also use Coreboot for the BIOS.&lt;/p&gt;

&lt;p&gt;&lt;li id=&#34;buy-a-computer-off-the-shelf-with-cash-avoid-having-it-shipped-especially-across-borders&#34;&gt;
  Buy a computer off the shelf with cash, avoid having it shipped, especially across borders
&lt;/li&gt;
&lt;li id=&#34;buy-a-debian-supported-chromebook-with-removeable-wifi-hardware-and-needs-no-binary-blobs&#34;&gt;
  Buy a Debian-supported &lt;a href=&#34;https://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices/acer-c720-chromebook&#34;&gt;Chromebook&lt;/a&gt; with removeable WiFi hardware, and needs no binary blobs
&lt;/li&gt;
&lt;li id=&#34;install-a-reproducibly-built-coreboot-binary&#34;&gt;
  Install a reproducibly built coreboot binary
&lt;/li&gt;
&lt;li id=&#34;install-from-a-reproducibly-built-debian-image-wiping-out-chrome-os-entirely&#34;&gt;
  Install from a reproducibly built Debian image, wiping out Chrome OS entirely
&lt;/li&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-physical-environment&#34;&gt;The Physical Environment&lt;/h2&gt;

&lt;p&gt;The last thing to consider is the physical location where signatures happen, and where essential equipment is stored. The signing environment must be physically secure. Otherwise, there is no way to prevent laptops or HSMs from being lost or used to sign inappropriate content. For the offline machines, keeping them in a locked room is a good start. For an online machine, forcing all network traffic and remote access over Tor hides the physical location of the machine from network observers.&lt;/p&gt;

&lt;p&gt;For high risk signing keys, using multiple layers of defense is important:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Restricted physical access to HSMs or smart cards&lt;/li&gt;
&lt;li&gt;Security cameras&lt;/li&gt;
&lt;li&gt;Onsite security guards&lt;/li&gt;
&lt;li&gt;Visitor logging&lt;/li&gt;
&lt;li&gt;A tools-resistant server safe for online code-signing servers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The signing server should be physically separate from the rest of the infrastructure. And the logs, machine, and network should be periodically audited.&lt;/p&gt;

&lt;h2 id=&#34;difficult-decisions&#34;&gt;Difficult decisions&lt;/h2&gt;

&lt;p&gt;Ideally all of these practices would be put into place, but each of these security measures comes at a cost of difficulty, expense, and complexity. They can also delay the process of getting regular updates out. So there are risks of implementing too strict security policies, much like the risks of not implementing enough.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tracking usage without tracking people</title>
      <link>https://guardianproject.github.io/info/2017/06/08/tracking-usage-without-tracking-people/</link>
      <pubDate>Thu, 08 Jun 2017 10:58:53 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2017/06/08/tracking-usage-without-tracking-people/</guid>
      <description>&lt;p&gt;One thing that has become very clear over the past years is that there is a lot of value in data about people. Of course, the most well known examples these days are advertising and spy agencies, but tracking data is useful for many more things. For example, when trying to build software that is intuitive and easy to use, having real data about how people are using the software can make a massive difference when developers and designers are working on improving their software. Even in the case of advertisers, they mostly do not care exactly who you are, they want to know what you are interested in so that they can more effectively promote things to you.&lt;/p&gt;

&lt;p&gt;From the beginning Guardian Project has focused on privacy, and worked to practice what we preach in our own software. For example, we have entirely disabled Apache web logs on our website for the past couple of years, so that we would not even have access to that rich data. We felt that we could not even store that data without fear of violating people’s privacy, let alone working with it.&lt;/p&gt;

&lt;p&gt;Things have changed in the past few years, and there are now a number of well tested techniques for tracking how people are using software without actually tracking who they are. It is now possible to keep some usage data while feeling safe that no one who might get that data could use it to identify individuals. One good example of this is the &lt;a href=&#34;https://metrics.torproject.org/&#34; target=&#34;_blank&#34;&gt;Tor Project’s tracking data&lt;/a&gt;. They provide a wide variety of tracking data to follow how Tor is being used, and how well the Tor network is operating.&lt;/p&gt;

&lt;p&gt;So we believe that it is now possible to responsibly track usage without violating anyone’s privacy. One piece of work along these lines is the new &lt;a href=&#34;https://github.com/cleaninsights/cleaninsights-android-sdk&#34; target=&#34;_blank&#34;&gt;Clean Insights Android SDK&lt;/a&gt;. Nathan is leading the development of that effort. And this blog post announces another new development that we are starting: tracking usage data from F-Droid app repositories.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2017/06/bycountry.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/bycountry-300x133.png&#34; alt=&#34;tracking by country&#34; width=&#34;300&#34; height=&#34;133&#34; class=&#34;aligncenter size-medium wp-image-13632&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2017/06/bycountry-300x133.png 300w, https://guardianproject.info/wp-content/uploads/2017/06/bycountry.png 747w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To start with, the Apache web logs for this site will be configured to store, but only information that is not fine-grained enough to identify people:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;only the date is stored, not the time or time zone&lt;/li&gt;
&lt;li&gt;Referer, IP Addresses, User Agent are never stored&lt;/li&gt;
&lt;li&gt;country is stored by looking up the IP Address in the &lt;em&gt;geoip&lt;/em&gt; database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Normally, a log entries look like:&lt;/p&gt;

&lt;pre&gt;189.4.73.81 testy.at.or.at - [08/Jun/2017:13:55:46 +0200] &#34;GET /fdroid/repo/index-v1.jar HTTP/1.1&#34; 200 147950 &#34;-&#34; &#34;F-Droid&#34;
119.29.81.134 199.119.112.126 - [08/Jun/2017:14:46:48 -0400] &#34;GET /fdroid/repo/index-v1.jar HTTP/1.1&#34; 200 147950 &#34;http://testy.at.or.at/fdroid/repo/index-v1.jar&#34; &#34;Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 6.1)&#34;
&lt;/pre&gt;

&lt;p&gt;This stripped version looks like:&lt;/p&gt;

&lt;pre&gt;0.0.0.0 - - [08/Jun/2017:00:00:00 +0000] &#34;GET /fdroid/repo/index-v1.jar HTTP/1.1&#34; 200 147950 &#34;-&#34; &#34;-&#34; AT
0.0.0.0 - - [08/Jun/2017:00:00:00 +0000] &#34;GET /fdroid/repo/index-v1.jar HTTP/1.1&#34; 200 147950 &#34;-&#34; &#34;-&#34; ZH
&lt;/pre&gt;

&lt;p&gt;Since the raw data is processed by the webserver, the extra information will be discarded and never written to disk. Only the sanitized usage tracking information is ever stored. This is based on Tor Project’s &lt;a href=&#34;https://gitweb.torproject.org/webstats.git/tree/src/sanitize.py&#34; target=&#34;_blank&#34;&gt;web tracking&lt;/a&gt;. It is possible to do this with &lt;em&gt;Apache&lt;/em&gt;, &lt;em&gt;lighttpd&lt;/em&gt;, &lt;em&gt;nginx&lt;/em&gt;, and probably other webservers. For &lt;em&gt;Apache&lt;/em&gt;, &lt;a href=&#34;https://github.com/maxmind/geoip-api-mod_geoip2/blob/master/INSTALL.md#configuration&#34;&gt;&lt;i&gt;mod_geoip&lt;/i&gt;&lt;/a&gt; needs to be installed, then only a single line is needed to configure this private logging mode:&lt;/p&gt;

&lt;pre&gt;LogFormat &#34;0.0.0.0 - %u %{[%d/%b/%Y:00:00:00 %z]}t \&#34;%r\&#34; %&gt;s %b \&#34;%{Referer}i\&#34; \&#34;-\&#34; %{GEOIP_COUNTRY_CODE}e&#34; privacy+geo
CustomLog ${APACHE_LOG_DIR}/access.log privacy+geo
&lt;/pre&gt;

&lt;p&gt;Now, we hope that we can work towards providing value from tracking data, without violating anyone’s privacy. Indeed, we are still prioritizing privacy over any value derived from tracking data. So anyone else who also wants to go follow this route needs to be fully aware that any tracking must be very carefully done, since it can easily result in inadvertent leaks. Do not take this as a stamp of approval on any tracking activity!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>“If This, Then Panic!” Sample Code for Triggering Emergency Alerts</title>
      <link>https://guardianproject.github.io/info/2016/10/17/if-this-then-panic-sample-code-for-triggering-emergency-alerts/</link>
      <pubDate>Mon, 17 Oct 2016 09:55:22 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2016/10/17/if-this-then-panic-sample-code-for-triggering-emergency-alerts/</guid>
      <description>&lt;p&gt;Earlier this year, we announced the &lt;a href=&#34;https://guardianproject.info/2016/01/12/panickit-making-your-whole-phone-respond-to-a-panic-button/&#34;&gt;PanicKit Library for Android&lt;/a&gt; and &lt;a href=&#34;https://dev.guardianproject.info/news/257&#34;&gt;Ripple&lt;/a&gt;, our basic app for alerts any compatible app that you are in an emergency situation. Rather than build a solitary, enclosed “panic button” app that only can provide a specific set of functionality, we decided, as we often do, to build a framework, and encourage others to participate. Since then, we’ve had &lt;a href=&#34;https://dev.guardianproject.info/projects/panic/news&#34;&gt;over 10 different apps implement PanicKit r&lt;/a&gt;esponder functionality, including Signal, OpenKeyChain, Umbrella app, StoryMaker and Zom.&lt;/p&gt;

&lt;p&gt;It is great to have so many apps implement helpful features for users to react during an emergency situation. This might include sending an emergency message, putting sensitive data behind a password, hiding the app icon, or even wiping data. All of this can be triggered by a simple tap and swipe on the Ripple’s app user interface.&lt;/p&gt;

&lt;p&gt;However, we would like to promote PanicKit trigger functionality that goes beyond something a user has to actively do, or at least obviously do. In many emergency scenarios, the user might be unable to actively trigger a panic, because they are unconscious, detained or have had their device taken away. In some cases, the activation may need to be subtle, such typing an incorrect phone number. In others, rapidly pressing a button or shaking the phone, may be safer and easier than unlocking your device and using an app.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone size-thumbnail&#34; src=&#34;https://media.giphy.com/media/K673Q5D4KGWAg/giphy.gif&#34; alt=&#34;&#34; width=&#34;738&#34; height=&#34;415&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;a truly panic-inducing situation&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;PanicKit works by connecting trigger apps with receiver apps. Triggers are what create the alert that there is an emergency or panic situation. Responders receive the alert, and take an appropriate, user configured or default action.&lt;/p&gt;

&lt;p&gt;The new &lt;a href=&#34;https://github.com/n8fr8/PanicKitSamples&#34;&gt;PanicKitSamples project&lt;/a&gt; demonstrates new possible triggers that could be implemented in an app like Ripple, or any app that wishes to do so. In the &lt;a href=&#34;https://github.com/n8fr8/PanicKitSamples/tree/master/app/src/main/java/info/guardianproject/fakepanicbutton/triggers&#34;&gt;“info.guardianproject.fakepanicbutton.triggers”&lt;/a&gt; package, you will find the following classes:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/n8fr8/PanicKitSamples/blob/master/app/src/main/java/info/guardianproject/fakepanicbutton/triggers/BaseTrigger.java#L40&#34;&gt;BaseTrigger&lt;/a&gt;: a base class that handles launching of the “panic intent” from a set of stored preferences to trigger the responders&lt;/p&gt;

&lt;pre&gt;public static void launchPanicIntent (Context context)
{
    final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context.getApplicationContext());

    String email = prefs.getString(&#34;email&#34;,null);
    String phone = prefs.getString(&#34;phone&#34;,null);
    String subject = prefs.getString(&#34;subject&#34;,&#34;panic message&#34;);
    String message = prefs.getString(&#34;message&#34;,&#34;i triggered a panic!&#34;);

    launchIntent(context, email, phone, subject, message);
}

public static void launchIntent (Context context, String emailAddress, String phoneNumber, String subject, String message)
{
    final PackageManager pm = context.getPackageManager();
    final Set&lt;String&gt; receiverPackageNames = PanicTrigger.getResponderActivities(context);

    Intent intent = new Intent(Panic.ACTION_TRIGGER);&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/n8fr8/PanicKitSamples/blob/master/app/src/main/java/info/guardianproject/fakepanicbutton/triggers/GeoTrigger.java&#34;&gt;GeoTrigger&lt;/a&gt;: Using the awesome “LOST” open-source geofencing library, this trigger sends a panic if the device moves outside of a pre-defined area (in this sample, it is Times Square NYC)&lt;/p&gt;

&lt;pre&gt;private void setupGeoFence ()
{

    //setup geofence for Times Square area
    String requestId = &#34;geof1-timesSquare&#34;;
    double latitude = 40.758896;
    double longitude = -73.985130;
    float radius = 0.0001f;

    Geofence geofence = new Geofence.Builder()
            .setRequestId(requestId)
            .setCircularRegion(latitude, longitude, radius)
            .setExpirationDuration(Geofence.NEVER_EXPIRE)
            .build();

    GeofencingRequest request = new GeofencingRequest.Builder()
            .addGeofence(geofence)
            .build();&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/n8fr8/PanicKitSamples/blob/master/app/src/main/java/info/guardianproject/fakepanicbutton/triggers/MediaButtonTrigger.java&#34;&gt;MediaButtonTrigger&lt;/a&gt;: This trigger will notice multiple rapid pushes of a headset mic button or a bluetooth mic call button, and send a trigger.&lt;/p&gt;

&lt;pre&gt;public class MediaButtonTrigger extends BaseTrigger {

    private static int mTriggerCount = 0;
    private final static int TRIGGER_THRESHOLD = 3;

    private static long mLastTriggerTime = -1;

    public MediaButtonTrigger(Activity context)
    {
        super (context);
    }

    @Override
    public void activateTrigger() {

        //if a headset button or a bluetooth &#34;call&#34; button is pressed, trigger this

        IntentFilter filter = new IntentFilter(Intent.ACTION_MEDIA_BUTTON);
        MediaButtonIntentReceiver r = new MediaButtonIntentReceiver();
        getContext().registerReceiver(r, filter);


    }

    public class MediaButtonIntentReceiver extends BroadcastReceiver {

        public MediaButtonIntentReceiver() {
            super();
        }

        @Override
        public void onReceive(Context context, Intent intent) {

            KeyEvent event = (KeyEvent)intent.getParcelableExtra(Intent.EXTRA_KEY_EVENT);
            if (event == null) {
                return;
            }

            int action = event.getAction();
            if (action == KeyEvent.ACTION_DOWN) {

                //check for 3 rapidly pressed key events

                long triggerTime = new Date().getTime();

                //if the trigger is the first one, or happened with a second of the last one, then count it
                if (mLastTriggerTime == -1 || ((triggerTime - mLastTriggerTime)&lt;1000))
                    mTriggerCount++;

                mLastTriggerTime = triggerTime;

                if (mTriggerCount &gt; TRIGGER_THRESHOLD) {
                    launchPanicIntent(context);
                    mTriggerCount = 0;
                }


            }
            abortBroadcast();
        }
    }
}&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/n8fr8/PanicKitSamples/blob/master/app/src/main/java/info/guardianproject/fakepanicbutton/triggers/PhoneNumberTrigger.java&#34;&gt;PhoneNumberTrigger&lt;/a&gt; (OutgoingCallReceiver): This trigger monitors phone calls, looking for a pre-defined fake “panic number”.&lt;/p&gt;

&lt;pre&gt;public class OutgoingCallReceiver extends BroadcastReceiver {
    @Override
    public void onReceive(Context context, Intent intent) {

        String phoneNumber = intent.getStringExtra(Intent.EXTRA_PHONE_NUMBER);

        if (phoneNumber != null
                &amp;&amp; phoneNumber.equals(PhoneNumberTrigger.PHONE_NUMBER_TRIGGER)) {
            PhoneNumberTrigger.launchPanicIntent(context);
        }

    }
}&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/n8fr8/PanicKitSamples/blob/master/app/src/main/java/info/guardianproject/fakepanicbutton/triggers/SuperShakeTrigger.java&#34;&gt;SuperShakeTrigger&lt;/a&gt;: This trigger looks for the phone being rapidly shaken. It could be expanded to wait for a series of shakes within a certain time window to avoid false positives.&lt;/p&gt;

&lt;pre&gt;//setup shake detection using ShakeDetector library
SensorManager sensorManager = (SensorManager) getContext().getSystemService(Context.SENSOR_SERVICE);

ShakeDetector sd = new ShakeDetector(new ShakeDetector.Listener()
{
    public void hearShake() {

        //you shook me!
        launchPanicIntent(getContext());

    }
});

sd.start(sensorManager);&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/n8fr8/PanicKitSamples/blob/master/app/src/main/java/info/guardianproject/fakepanicbutton/triggers/WifiTrigger.java&#34;&gt;WifiTrigger&lt;/a&gt;: This triggers waits for the user to connect to a specific wifi network (in this sample “Starbucks”). It could also be set to trigger if the devices leaves the wifi network.&lt;/p&gt;

&lt;pre&gt;NetworkInfo netInfo = intent.getParcelableExtra (WifiManager.EXTRA_NETWORK_INFO);
if (ConnectivityManager.TYPE_WIFI == netInfo.getType ()
        &amp;&amp; netInfo.isConnected()) {

    WifiManager wifiManager = (WifiManager) context.getSystemService(Context.WIFI_SERVICE);
    WifiInfo info = wifiManager.getConnectionInfo();
    String ssid = info.getSSID();

    //Check if I am connected to the &#34;trigger&#34; SSID, and if so send an alert!

    if (!TextUtils.isEmpty(ssid)
        &amp;&amp; ssid.equals(WIFI_SSID_TRIGGER))
    {
        launchPanicIntent(getContext());
    }
}&lt;/pre&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;All of these samples are configured to work with the FakePanicButton sample app, which allows you to choose a contact to alert, and set a panic message. That said, these are meant to point in a direction of functionality, and have not been fully debugged or tested on all devices and OS versions.&lt;/p&gt;

&lt;p&gt;If you have more ideas on other panic triggers that could be implemented, please share them here. We are also happy to take pull requests or fixes to our sample project, in order to improve on the ideas we have. Finally, we will announce more Panic responder and trigger apps, as they are available in the coming months. We looking forward to the continued growth of our PanicKit ecosystem, though of course, we hope even more for a world where there are less reasons to panic.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HOWTO: get all your Debian packages via Tor Onion Services</title>
      <link>https://guardianproject.github.io/info/2016/07/31/howto-get-all-your-debian-packages-via-tor-onion-services/</link>
      <pubDate>Sun, 31 Jul 2016 17:28:57 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2016/07/31/howto-get-all-your-debian-packages-via-tor-onion-services/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2014/10/leakage.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2014/10/leakage-300x199.png&#34; alt=&#34;leakage&#34; width=&#34;300&#34; height=&#34;199&#34; class=&#34;alignright size-medium wp-image-12699&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2014/10/leakage-300x199.png 300w, https://guardianproject.info/wp-content/uploads/2014/10/leakage-100x66.png 100w, https://guardianproject.info/wp-content/uploads/2014/10/leakage-150x99.png 150w, https://guardianproject.info/wp-content/uploads/2014/10/leakage-200x132.png 200w, https://guardianproject.info/wp-content/uploads/2014/10/leakage.png 410w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;Following up on &lt;a href=&#34;https://guardianproject.info/2014/10/16/reducing-metadata-leakage-from-software-updates/&#34; target=&#34;_blank&#34;&gt;some privacy leaks that we looked into a while back&lt;/a&gt;, there are now official Debian &lt;a href=&#34;https://onion.debian.org&#34; target=&#34;_blank&#34;&gt;Tor Onion Services&lt;/a&gt; for getting software packages and security updates, thanks to the Debian Sys Admin team. This is important for high risk use cases like TAILS covers, but also it is useful to make it more difficult to do some kinds of targeted attacks against high-security servers. The default Debian and Ubuntu package servers use plain HTTP with unencrypted connections. That means anyone with access to the network streams could both monitor and fingerprint traffic. When an request for a security update is spotted, an attacker knows that machine is vulnerable to an exploit, and could reliably exploit it before the security update is applied.&lt;/p&gt;

&lt;p&gt;Using &lt;a href=&#34;https://labs.riseup.net/code/issues/8143&#34; target=&#34;_blank&#34;&gt;HTTPS to get security updates&lt;/a&gt; improves this situation a lot, but by measuring the size of data transfers, it is still possible to &lt;a href=&#34;http://www0.cs.ucl.ac.uk/staff/G.Danezis/papers/TLSanon.pdf&#34; target=&#34;_blank&#34;&gt;track which files are being downloaded&lt;/a&gt;. A Tor Onion Service provides end-to-end encryption like the HTTPS connection. It also mixes up the traffic with lots of other traffic, so its not easy to see what traffic goes together. That makes it a lot harder for a network observer to tell when a security update is being downloaded. Additionally, using a Tor Onion Service forces the traffic over Tor, so that the Debian mirror server cannot see which server is requesting the updates. That helps prevent targeted attacks.&lt;/p&gt;

&lt;p&gt;There are other benefits as well, besides just for the person running the high security server in this example, especially if all of the traffic is coming over Tor. When updates are delivered over Tor, then that means the Debian mirror operators have less to worry about because they are handling less metadata that might have privacy concerns. It means that when law enforcement requests logs from the mirror operators, the mirror operators can more easily hand over anything they have since the mirror operator knows that there is not private information in the logs. Reducing the legal risks and privacy concerns makes it easier to run mirrors, and that helps internet services work better.&lt;/p&gt;

&lt;p&gt;One disadvantage of this approach as it now stands is that your server will get updates from the same mirror every time. There is only a single Tor Onion Service for the main archive. An alternate approach using the combination of Tor and &lt;a href=&#34;http://httpredir.debian.org/&#34;&gt;http://httpredir.debian.org/&lt;/a&gt; as the package source means that your server will get updates from a different mirror each time Tor changes its exit node (I believe that’s every 10 minutes or so).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can you set up your Debian machine to get updates over Tor?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2016/07/tor-logo-2011_11.jpg&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2016/07/tor-logo-2011_11-300x173.jpg&#34; alt=&#34;debian and tor&#34; width=&#34;300&#34; height=&#34;173&#34; class=&#34;alignright size-medium wp-image-13395&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2016/07/tor-logo-2011_11-300x173.jpg 300w, https://guardianproject.info/wp-content/uploads/2016/07/tor-logo-2011_11-768x444.jpg 768w, https://guardianproject.info/wp-content/uploads/2016/07/tor-logo-2011_11.jpg 800w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;Right now, the best way to set up a Debian machine to force traffic over Tor is to use &lt;a href=&#34;https://trac.torproject.org/projects/tor/wiki/doc/TransparentProxy&#34; target=&#34;_blank&#34;&gt;transparent proxying&lt;/a&gt; via &lt;em&gt;iptables&lt;/em&gt; rules. If you have that setup, then you can add the onion addresses as Debian apt sources as if they are any other HTTP Debian mirror. Another option is to install &lt;em&gt;apt-transport-tor&lt;/em&gt; like TAILS does, then you can use &lt;a href=&#34;http://people.skolelinux.org/pere/blog/Always_download_Debian_packages_using_Tor___the_simple_recipe.html&#34; target=&#34;_blank&#34;&gt;special syntax to add the Tor Onion Services&lt;/a&gt;. And another way is to install an HTTP proxy like &lt;em&gt;privoxy&lt;/em&gt; and enable apt HTTP proxy support as &lt;a href=&#34;https://guardianproject.info/2014/10/16/reducing-metadata-leakage-from-software-updates/&#34; target=&#34;_blank&#34;&gt;I described before&lt;/a&gt;. The &lt;em&gt;apt-transport-tor&lt;/em&gt; and &lt;em&gt;privoxy&lt;/em&gt; approaches both have the downside of having to trust an added piece of software, whereas the transparent proxy technique uses what is already present in the Linux kernel. I’ve been using the &lt;em&gt;privoxy&lt;/em&gt; method since that is what I got working in 2014 and it has been working reliably on multiple servers since then. Also, I need &lt;em&gt;privoxy&lt;/em&gt; installed for another application anyway.&lt;/p&gt;

&lt;p&gt;Here’s how to set up the apt sources to get packages and updates via Tor Onion Services without delaying security updates. First, remove &lt;em&gt;/etc/apt/sources.list&lt;/em&gt; and &lt;em&gt;/etc/apt/sources.list.d/*.list&lt;/em&gt; to start with a clean slate. Next add &lt;em&gt;/etc/apt/sources.list.d/00.vwakviie2ienjx6t.onion.list&lt;/em&gt; to get the main Debian repositories:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deb http://vwakviie2ienjx6t.onion/debian/ jessie main
deb-src http://vwakviie2ienjx6t.onion/debian/ jessie main

# aka volatile
deb http://vwakviie2ienjx6t.onion/debian/ jessie-updates main
deb-src http://vwakviie2ienjx6t.onion/debian/ jessie-updates main

deb http://vwakviie2ienjx6t.onion/debian jessie-backports main
deb-src http://vwakviie2ienjx6t.onion/debian/ jessie-backports main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next add the new Tor Onion Service for the security update repository at &lt;em&gt;/etc/apt/sources.list.d/00.sgvtcaew4bxjd7ln.onion.list&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deb http://sgvtcaew4bxjd7ln.onion/ jessie/updates main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then last, include the normal HTTP security.debian.org archive to ensure that your server gets the latest security updates, even if the &lt;a href=&#34;https://onion.debian.org/&#34; target=&#34;_blank&#34;&gt;Onion Service mirror&lt;/a&gt; is behind or there is some other issue related to Tor. This goes in &lt;em&gt;/etc/apt/sources.list.d/99.security.debian.org.list&lt;/em&gt; to ensure that it is always the last repository that is tried, and apt loads files from /etc/apt/source.list.d/ in alphabetical order, so it’ll always try to get the security updates from the Onion Service before falling back to the HTTP source as a last resort.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deb http://security.debian.org/ jessie/updates main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also run an unofficial mirror of the security updates on &lt;a href=&#34;http://dju2peblv7upfz3q.onion/debian&#34;&gt;http://dju2peblv7upfz3q.onion/debian&lt;/a&gt; if you want to add another backup, i.e. &lt;em&gt;/etc/apt/sources.list.d/00.dju2peblv7upfz3q.onion.list&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deb http://dju2peblv7upfz3q.onion/debian-security/ jessie/updates main
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Copperhead, Guardian Project and F-Droid Partner to Build Open, Verifiably Secure Mobile Ecosystem</title>
      <link>https://guardianproject.github.io/info/2016/03/28/copperhead-guardian-project-and-f-droid-partner-to-build-open-verifiably-secure-mobile-ecosystem/</link>
      <pubDate>Mon, 28 Mar 2016 13:42:36 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2016/03/28/copperhead-guardian-project-and-f-droid-partner-to-build-open-verifiably-secure-mobile-ecosystem/</guid>
      <description>&lt;p&gt;Three open-source projects haved joined together to announce a new partnership to create an open, verifiably secure mobile ecosystem of software, services and hardware. Led by the work of the Toronto-based &lt;a href=&#34;https://copperhead.co/android/&#34;&gt;CopperheadOS&lt;/a&gt; team on securing the core Android OS, &lt;a href=&#34;https://guardianproject.info&#34;&gt;Guardian Project&lt;/a&gt; and &lt;a href=&#34;https://f-droid.org&#34;&gt;F-Droid&lt;/a&gt; have joined in to partner on envisioning and developing a full mobile ecosystem. The goal is to create a solution that can be verifiably trusted from the operating system,  through the network and network services, all the way up to the app stores and apps themselves. Through a future planned crowdfunded and commercial offering, the partnership will provide affordable off-the-shelf solutions, including device hardware and self-hosted app and update distribution servers, for any individual and organizations looking for complete mobile stacks they can trust.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update 30 March 2016: Copperhead has announced their &lt;a href=&#34;https://copperhead.co/blog/2016/03/29/crowdfunding-partnership-announced&#34;&gt;crowdfunding plans here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://copperhead.co/android/&#34;&gt;CopperheadOS&lt;/a&gt; is a hardened open-source Android based on AOSP, that is available for download and installation on many Nexus devices. The Guardian Project develops popular free and open-source privacy-enhancing apps like Orbot (Tor for Android), ChatSecure, and ObscuraCam, and software libraries like NetCipher, SQLCipher and PanicKit, for developers who want to enable similar features in their own apps. F-Droid is an installable catalogue of free and open source Android software, that is built into CopperheadOS, as the default app store. It enables decentralized and verifiably secure app distribution by any individual or organization.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://copperhead.co/android/&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone wp-image-13280 size-large&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2016/03/copperheados-1024x520.jpg&#34; alt=&#34;copperheados&#34; width=&#34;780&#34; height=&#34;396&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2016/03/copperheados-1024x520.jpg 1024w, https://guardianproject.info/wp-content/uploads/2016/03/copperheados-300x152.jpg 300w, https://guardianproject.info/wp-content/uploads/2016/03/copperheados-768x390.jpg 768w, https://guardianproject.info/wp-content/uploads/2016/03/copperheados.jpg 1311w&#34; sizes=&#34;(max-width: 780px) 100vw, 780px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2016/03/IMG_0466.jpg&#34;&gt;&lt;img class=&#34;alignleft wp-image-13310 size-medium&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2016/03/IMG_0466-224x300.jpg&#34; alt=&#34;IMG_0466&#34; width=&#34;224&#34; height=&#34;300&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2016/03/IMG_0466-224x300.jpg 224w, https://guardianproject.info/wp-content/uploads/2016/03/IMG_0466-768x1028.jpg 768w, https://guardianproject.info/wp-content/uploads/2016/03/IMG_0466-765x1024.jpg 765w, https://guardianproject.info/wp-content/uploads/2016/03/IMG_0466.jpg 1446w&#34; sizes=&#34;(max-width: 224px) 100vw, 224px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;“I have been a happy CopperheadOS user since the first moment I installed it”, says Nathan Freitas, Founder and Director of Guardian Project, ” even with running it on a two-generation old, very inexpensive Nexus 5 device. I know I will always have the latest security updates immediately, and that everything on my device is under my control.”&lt;/p&gt;

&lt;p&gt;“My Copperhead Nexus is the go-to device in my bag, ” says Freitas, “when I am handling sensitive information, find myself on a network I don’t trust, or am otherwise wary about my communication being tracked, intercepted or tampered with.”&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Hans-Christoph Steiner who leads the Guardian Project’s developer platform says “Copperhead with F-Droid and Orbot provides all of the benefits of a smartphone, without the security and privacy downsides introduced by the major vendors, carriers and closed app stores. By building in F-Droid, Copperhead guarantees its users have direct access to the best free and open software, built directly from source-code in a trusthworthy, verifiable way”. Mr. Steiner presented on his work with F-Droid and building &lt;a href=&#34;https://fosdem.org/2016/schedule/event/fdroidappstore/&#34; target=&#34;_blank&#34;&gt;“private, unblockable app stores”&lt;/a&gt; at &lt;a href=&#34;https://fosdem.org/2016/schedule/event/fdroidappstore/&#34; target=&#34;_blank&#34;&gt;FOSDEM 2016&lt;/a&gt; in January.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://fosdem.org/2016/schedule/event/fdroidappstore/&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone wp-image-13306 size-large&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2016/03/handsatfosdem-1024x572.jpg&#34; alt=&#34;handsatfosdem&#34; width=&#34;945&#34; height=&#34;528&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2016/03/handsatfosdem-1024x572.jpg 1024w, https://guardianproject.info/wp-content/uploads/2016/03/handsatfosdem-300x168.jpg 300w, https://guardianproject.info/wp-content/uploads/2016/03/handsatfosdem-768x429.jpg 768w, https://guardianproject.info/wp-content/uploads/2016/03/handsatfosdem-360x200.jpg 360w, https://guardianproject.info/wp-content/uploads/2016/03/handsatfosdem.jpg 1274w&#34; sizes=&#34;(max-width: 945px) 100vw, 945px&#34; /&gt;&lt;/a&gt;&lt;br /&gt;
_Learn more about &lt;a href=&#34;https://fosdem.org/2016/schedule/event/fdroidappstore/&#34;&gt;F-Droid&lt;/a&gt; from this &lt;a href=&#34;https://fosdem.org/2016/schedule/event/fdroidappstore/&#34;&gt;FOSDEM 2016 talk&lt;/a&gt; (watch the &lt;a href=&#34;http://video.fosdem.org/2016/h1309/f-droid-building-the-private-unblockable-app-store.mp4&#34; target=&#34;_blank&#34;&gt;video here&lt;/a&gt;)_&lt;/p&gt;

&lt;p&gt;Collectively, this partnership creates a global team of information security researchers, forensic analysts, software developers, designers and engaged users, looking to move the state of the art forward for open, verifiably secure and privacy-enhancing mobile technology. The groups hope to expand the effort to include other mobile OS teams, application developers and even hardware developers interested in having the same kind of impact on the privacy and security of mobile computing.&lt;/p&gt;

&lt;p&gt;James Donaldson of Copperhead says “It’s important for Android users to have a privacy minded viable alternative to closed-source solutions when contemplating mobile security. Teaming up with great partners like F-Droid and Guardian Project allows us to offer our users both security and a great experience with all of the core features they need.”&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info&#34;&gt;Guardian Project&lt;/a&gt; is an open-source effort based in New York, with a global community of contributors and partners. &lt;a href=&#34;https://copperhead.co&#34;&gt;Copperhead&lt;/a&gt; is an information security firm located in Toronto, Canada, specializing in protecting data and devices from unauthorized access. &lt;a href=&#34;https://f-droid.org&#34;&gt;F-Droid&lt;/a&gt; is a non-profit volunteer project, and is operated by F-Droid Limited, a non-profit organisation registered in England (no. 8420676).&lt;/p&gt;

&lt;p&gt;Contact:&lt;/p&gt;

&lt;p&gt;Nathan Freitas / +1 718 569 7272&lt;br /&gt;
&lt;a href=&#34;&amp;amp;#x6d;&amp;amp;#x61;ilt&amp;amp;#x6f;&amp;amp;#x3a;&amp;amp;#x6e;ath&amp;amp;#x61;&amp;amp;#x6e;&amp;amp;#x40;gua&amp;amp;#x72;&amp;amp;#x64;&amp;amp;#x69;anp&amp;amp;#x72;&amp;amp;#x6f;&amp;amp;#x6a;ect&amp;amp;#x2e;&amp;amp;#x69;&amp;amp;#x6e;fo&#34;&gt;nathan@&amp;#x67;&amp;#x75;&amp;#x61;&amp;#x72;&amp;#x64;&amp;#x69;&amp;#x61;nproject&amp;#x2e;&amp;#x69;&amp;#x6e;&amp;#x66;&amp;#x6f;&lt;/a&gt; (XMPP-OTR, OpenPGP: &lt;a href=&#34;https://pgp.mit.edu/pks/lookup?search=0xA801183E69B37AA9&amp;op=index&#34; target=&#34;_blank&#34;&gt;0x69B37AA9&lt;/a&gt;  / &lt;a href=&#34;https://keybase.io/n8fr8&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://keybase.io/n8fr8&#34;&gt;https://keybase.io/n8fr8&lt;/a&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;James Donaldson / Copperhead&lt;br /&gt;
&lt;a href=&#34;mailto:media@&amp;amp;#x63;&amp;amp;#x6f;&amp;amp;#x70;&amp;amp;#x70;&amp;amp;#x65;&amp;amp;#x72;&amp;amp;#x68;&amp;amp;#x65;&amp;amp;#x61;&amp;amp;#x64;&amp;amp;#x2e;&amp;amp;#x63;o&#34;&gt;m&amp;#x65;di&amp;#x61;@&amp;#x63;&amp;#x6f;p&amp;#x70;er&amp;#x68;ea&amp;#x64;.&amp;#x63;o&lt;/a&gt; (OpenPGP: &lt;a href=&#34;https://pgp.mit.edu/pks/lookup?search=0xDC1DEA5E&amp;amp;op=index&#34;&gt;0xDC1DEA5E&lt;/a&gt;&lt;a href=&#34;https://pgp.mit.edu/pks/lookup?op=get&amp;amp;search=0x2621AB13DC1DEA5E&#34;&gt; &lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Migrate Your Android App’s Signing Key</title>
      <link>https://guardianproject.github.io/info/2015/12/29/how-to-migrate-your-android-apps-signing-key/</link>
      <pubDate>Tue, 29 Dec 2015 12:03:54 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2015/12/29/how-to-migrate-your-android-apps-signing-key/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;It is time to update to a stronger signing key for your Android app! The old default RSA 1024-bit key is weak and officially deprecated.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;what&#34;&gt;What?&lt;/h2&gt;

&lt;p&gt;The Android OS requires that every application installed be signed by a digital key. The purpose behind this signature is to identify the author of the application, allow this author and this author alone to make updates to the app, as well as provide a mechanism to establish inter-application trust. The Android security model defines an app by two things: the package name (aka &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#getPackageName%28%29&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;packageName&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://sites.google.com/a/android.com/tools/tech-docs/new-build-system/applicationid-vs-packagename&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ApplicationID&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://developer.android.com/guide/topics/manifest/manifest-element.html#package&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;package&lt;/code&gt;&lt;/a&gt;) and the signing key. If either of those are different, then Android considers it a different app. When the package name and signing key of one APK match an installed app, then the APK is considered an update and Android will replace the installed app with the APK. If the APK is signed by a different key, then Android will prevent installing and updating.&lt;/p&gt;

&lt;p&gt;First thing is to see what the current signing key is. Check any app’s signing key using our free utility app &lt;a href=&#34;https://play.google.com/store/apps/details?id=info.guardianproject.checkey&#34; target=&#34;_blank&#34;&gt;Checkey&lt;/a&gt;:&lt;/p&gt;

&lt;div id=&#34;attachment_13170&#34; style=&#34;width: 790px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2015/12/checkey-1.png&#34; rel=&#34;attachment wp-att-13170&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-13170&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2015/12/checkey-1-1024x576.png&#34; alt=&#34;Lookout needs to generate a new key!&#34; width=&#34;780&#34; height=&#34;439&#34; class=&#34;size-large wp-image-13170&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2015/12/checkey-1-1024x576.png 1024w, https://guardianproject.info/wp-content/uploads/2015/12/checkey-1-300x169.png 300w, https://guardianproject.info/wp-content/uploads/2015/12/checkey-1-768x432.png 768w, https://guardianproject.info/wp-content/uploads/2015/12/checkey-1-350x197.png 350w, https://guardianproject.info/wp-content/uploads/2015/12/checkey-1-860x484.png 860w, https://guardianproject.info/wp-content/uploads/2015/12/checkey-1.png 1280w&#34; sizes=&#34;(max-width: 780px) 100vw, 780px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-13170&#34; class=&#34;wp-caption-text&#34;&gt;
    Lookout needs to generate a new key!
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;The official Android docs have tons of useful information about what the signing keys are good for, how to generate them, and how to use them. Unfortunately, it doesn’t provide any instructions for migrating, and for many years, 1024-bit RSA was the default. But first, why would you want or need to migrate?&lt;/p&gt;

&lt;h2 id=&#34;why&#34;&gt;Why?&lt;/h2&gt;

&lt;p&gt;Depending on when you created your signing key, you might have a particularly weak key. The primary danger of a weak key is that an adversary could break your key in order to generate fake APK signatures. Then those malicious APKs can be installed as updates to your app. There are other nefarious purposes depending on how you use the signing key in your apps. Or if you are unfortunate enough to have suffered a loss of your private key material, then it is definitely time for a new signing key.&lt;/p&gt;

&lt;p&gt;According to our friends at the &lt;a href=&#34;https://androidobservatory.org/stats&#34; title=&#34;Android Observatory&#34;&gt;Android Observatory&lt;/a&gt;, over 64% of Android apps in their data store use 1024-bit signing keys (RSA or DSA).&lt;/p&gt;

&lt;div id=&#34;visualization&#34; style=&#34;width: 600px; height: 400px;&#34;&gt;
&lt;/div&gt;

&lt;p&gt;There are several good reasons to migrate off of 1024-bit RSA keys, even though there is no &lt;em&gt;public&lt;/em&gt; proof of a 1024 prime factorization required to generate any 1024-bit key at will. The evidence has been mounting for a decade.&lt;/p&gt;

&lt;p&gt;NIST’s &lt;a href=&#34;http://csrc.nist.gov/publications/nistpubs/800-57/sp800-57_part1_rev3_general.pdf&#34;&gt;official guidelines&lt;/a&gt; (PDF, page 64 and 67) deprecated 1024-bit RSA keys at the end of 2013. This deprecation by NIST isn’t an indication that 1024-bit RSA is compromised, instead it is a preemptive move to stay ahead of attacks. Confidence in NIST might be shaken in light of &lt;a href=&#34;http://blog.cryptographyengineering.com/2013/09/on-nsa.html&#34;&gt;recent revelations&lt;/a&gt;, but in this case increasing the RSA key size is unlikely to trigger any secret NSA backdoors. If anything, the deprecation year could have been extended slightly to allow the NSA a window where they had the capacity to factor 1024-bit keys and everyone was still using them. So, it’s time to move on.&lt;/p&gt;

&lt;p&gt;For an example, a decade ago the cost of building special purpose hardware capable of breaking a single 1024-bit RSA key in one year was estimated at $10 million (&lt;a href=&#34;http://tau.ac.il/~tromer/papers/cbtwirl.pdf&#34;&gt;Adi Shamir, Eran Tromer, On the cost of factoring RSA-1024&lt;/a&gt;, 2003). Presumably the techniques have improved by orders of magnatude, and the hardware value depreciated. It is conceivable the cost has fallen enough to be affordable not only by nation-state actors, but by large criminal enterprises too.&lt;/p&gt;

&lt;p&gt;For a comprehensive talk on the state of the art (as of December 2012) when it comes to breaking 1024-bit RSA, check out the 29C3 talk &lt;a href=&#34;http://events.ccc.de/congress/2012/Fahrplan/events/5275.en.html&#34; title=&#34;FactHacks: RSA factorization in the real world&#34;&gt;FactHacks: RSA factorization in the real world&lt;/a&gt; with the cryptographers Daniel J. Bernstein, Nadia Heninger, and Tanja Lange (&lt;a href=&#34;http://events.ccc.de/congress/2012/wiki/Documentation#Recordings&#34; title=&#34;29C3 Recordings&#34;&gt;watch recording&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;how&#34;&gt;How?&lt;/h2&gt;

&lt;p&gt;Migrating to a strong key for an Android app is, unfortunately, not so simple. If you are publishing a &lt;em&gt;new&lt;/em&gt; app to the app store, then simply generate a new strong signing key and you’re done. Congratulations! However, there exists no easy way to update your signing key for an existing application, because an installed application can only take updates from an APK signed with &lt;em&gt;the same&lt;/em&gt; key.&lt;/p&gt;

&lt;p&gt;Here we outline a basic method with which you can use to fake an update to your signing key. This is not as user friendly as we would like. Some of the hard facts of performing this process is that for most app stores including Google Play, you will lose ratings and reviews since the app will show up with a new package name, and the app store will treat it like an entirely new app. Also, the user will have to manually uninstall the original app once they finish the procedure. Here is a rough outline of the process:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;generate the new signing key, &lt;em&gt;RSA 4096&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Update the first app, &lt;em&gt;App1&lt;/em&gt;, with a mechanism for exporting private data, using &lt;a href=&#34;https://github.com/guardianproject/TrustedIntents&#34; target=&#34;_blank&#34;&gt;TrustedIntents&lt;/a&gt; with a signature pin of the new key, &lt;em&gt;RSA 4096&lt;/em&gt;, which &lt;a href=&#34;https://guardianproject.info/2014/07/30/introducing-trustedintents-for-android/&#34; target=&#34;_blank&#34;&gt;Checkey will generate for you&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create a new version of the app with a different package name, &lt;em&gt;App2&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;sign &lt;em&gt;App2&lt;/em&gt; with new key, &lt;em&gt;RSA 4096&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Add method to &lt;em&gt;App2&lt;/em&gt; for receiving user data from &lt;em&gt;App1&lt;/em&gt;, including a signature pin of the old signing key, &lt;em&gt;RSA 1024&lt;/em&gt;, for use with TrustedIntents&lt;/li&gt;
&lt;li&gt;Publish &lt;em&gt;App2&lt;/em&gt; to the app stores&lt;/li&gt;
&lt;li&gt;From &lt;em&gt;App1&lt;/em&gt;, prompt user to install &lt;em&gt;App2&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;runs and imports data from &lt;em&gt;App1&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;App2&lt;/em&gt; prompts user to uninstall &lt;em&gt;App1&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For &lt;a href=&#34;https://f-droid.org&#34; target=&#34;_blank&#34;&gt;F-Droid&lt;/a&gt;, there will be some easier tools for handling this. The F-Droid system is already used to multiple signing keys per app since F-Droid uses its own signing key for many of the apps it releases, and that F-Droid signing key is different from the signing key that the original developer used in their Google Play uploads. F-Droid will likely be able to support APKs with the same package name but with multiple signing keys.&lt;/p&gt;

&lt;h3 id=&#34;a-note-on-compatibility&#34;&gt;A Note on Compatibility&lt;/h3&gt;

&lt;p&gt;There is security vs compatibility trade off a few might be interested in. Pre-4.3, Android did not support any signature algorithms except SHA1. With Android &amp;gt;= 4.3, SHA256 support was fixed, and SHA384, SHA512, and ECDSA were added (&lt;a href=&#34;https://code.google.com/p/android/issues/detail?id=38321&#34;&gt;source&lt;/a&gt;). There are still android 2.3.3 (&lt;code&gt;android-10&lt;/code&gt;) devices being sold, so anyone interested in backwards compatibility will have to heed this.&lt;/p&gt;

&lt;p&gt;Also, the larger the keysize and hashsize used, the longer it takes to install and update the application. So extremely large values might be unsuitable for slower hardware. The following probably doesn’t buy you a tremendous amount of additional security but cranks the paranoia to 11. It does so at the cost of compatibility and performance.&lt;br /&gt;
&lt;code&gt;&amp;lt;br /&amp;gt;
Gen with:&amp;lt;br /&amp;gt;
  keytool -genkey -v -keystore test.keystore -alias testkey -keyalg RSA -keysize 4096 -sigalg SHA512withRSA -dname &amp;quot;cn=Test,ou=Test,c=CA&amp;quot; -validity 10000&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Sign with:&amp;lt;br /&amp;gt;
  jarsigner -verbose -sigalg SHA512withRSA -digestalg SHA512 -keystore test.keystore test.apk testkey&amp;lt;br /&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We have some scripts that we use to generate keys in our &lt;a href=&#34;https://github.com/guardianproject/smartcard-apk-signing&#34; target=&#34;_blank&#34;&gt;smartcard-apk-signing&lt;/a&gt; repo. It is also possible to generate an Android signing key using openssl or other libraries. It is often wise to use different software than standard for doing things like generating keys. Since the Java &lt;code&gt;keytool&lt;/code&gt; approach that is the standard, recommended method for Android, that makes it a target for adversaries that are interested in breaking keys. If a key was generated using &lt;code&gt;openssl&lt;/code&gt; or GNU TLS instead, for example, then that key would not be affected if &lt;code&gt;keytool&lt;/code&gt; had &lt;a href=&#34;https://freedom-to-tinker.com/blog/kroll/software-transparency-debian-openssl-bug/&#34; target=&#34;_blank&#34;&gt;a bug like Debian’s&lt;/a&gt; &lt;a href=&#34;https://security-tracker.debian.org/tracker/CVE-2008-0166&#34; target=&#34;_blank&#34;&gt;CVE-2008-0166&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hiding Apps in Plain Sight</title>
      <link>https://guardianproject.github.io/info/2015/05/07/hiding-apps-in-plain-sight/</link>
      <pubDate>Thu, 07 May 2015 09:25:10 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2015/05/07/hiding-apps-in-plain-sight/</guid>
      <description>&lt;p&gt;Beyond just thinking about encryption of data over the wire, or at rest on your mobile device, we also consider physical access to your mobile device, as one of the possible things we need to defend against. Some of our apps, such as Courier, our secure news reader, include a Panic feature, enabling a user to quickly delete data or remove the app, if they fear their device will be taken from them, whether by a friend, family member, criminal or an authority figure. Most recently, with our work on CameraV, our &lt;a href=&#34;https://guardianproject.github.io/informacam-guide/en/InformacamGuide.html&#34;&gt;secure evidence camera app&lt;/a&gt;, we have implemented a few more features that help hide the app and its data, in order to block an unintended person from seeing the photos and videos captured by it.&lt;/p&gt;

&lt;p&gt;First, it should be said that the app utilizes &lt;a href=&#34;https://guardianproject.info/code/iocipher&#34;&gt;IOCipher&lt;/a&gt;, &lt;a href=&#34;https://github.com/guardianproject/cacheword&#34;&gt;CacheWord&lt;/a&gt; and the &lt;a href=&#34;https://github.com/n8fr8/CameraCipher&#34;&gt;CameraCipher Library&lt;/a&gt; to store all media files it captures in an encrypted format, managed with a well-implemented service that handles key generation and life-cycle properly. This means that no photos and videos show in the device’s built-in gallery or photos app, and no pixels are ever written in plain-text to any storage space, internal or external. This helps a great deal in hiding that they exist, since often physical inspection of a device often starts with looking through any of the default apps, like messaging, gallery, contacts apps, and so on. &lt;a href=&#34;https://guardianproject.info/apps/chatsecure/&#34;&gt;ChatSecure&lt;/a&gt; also does this, be keeping your contacts, messages and media out of the shared, unencrypted default location.&lt;/p&gt;

&lt;p&gt;As of this week, we have had three new features to CameraV that all fall under what could be called “Stealth Mode” (though this has also been called “Boss Mode” since the days of MS-DOS when games included a quick button to change to something that looked like a spreadsheet for when your boss walked by). We took our inspiration from a few other apps, like Amnesty International’s &lt;a href=&#34;https://panicbutton.io/&#34;&gt;Panic Button&lt;/a&gt; which hides itself as a calculator, ChainFire’s &lt;a href=&#34;https://play.google.com/store/apps/details?id=eu.chainfire.supersu&amp;amp;hl=en&#34;&gt;SuperSU&lt;/a&gt;, which allows users to &lt;a href=&#34;http://www.chainfire.eu/articles/133/_TUT_Supporting_multiple_icons_in_your_app/&#34;&gt;switch the app icon&lt;/a&gt; between a few options, &lt;a href=&#34;https://guardianproject.info/apps/courier/&#34;&gt;Courier&lt;/a&gt;, which blocks users and other apps from taking screenshots of the news it is display, and &lt;a href=&#34;https://guardianproject.info/apps/orbot&#34;&gt;Orbot&lt;/a&gt;, which actively removes itself from the “Recent Apps” listing provided by Android. All of these features combined dramatically reduce the visual footprint that an app leaves on the device, reducing the chance that someone will discover it, even if they are looking for it.&lt;/p&gt;

&lt;div id=&#34;attachment_12938&#34; style=&#34;width: 179px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2015/05/Screenshot_2015-05-06-14-24-36.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12938&#34; class=&#34;wp-image-12938 size-medium&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2015/05/Screenshot_2015-05-06-14-24-36-169x300.png&#34; alt=&#34;CameraV settings for stealth mode&#34; width=&#34;169&#34; height=&#34;300&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2015/05/Screenshot_2015-05-06-14-24-36-169x300.png 169w, https://guardianproject.info/wp-content/uploads/2015/05/Screenshot_2015-05-06-14-24-36-576x1024.png 576w, https://guardianproject.info/wp-content/uploads/2015/05/Screenshot_2015-05-06-14-24-36.png 720w&#34; sizes=&#34;(max-width: 169px) 100vw, 169px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-12938&#34; class=&#34;wp-caption-text&#34;&gt;
    CameraV settings for stealth mode
  &lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;attachment_12939&#34; style=&#34;width: 179px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2015/05/Screenshot_2015-05-06-14-25-44.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12939&#34; class=&#34;wp-image-12939 size-medium&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2015/05/Screenshot_2015-05-06-14-25-44-169x300.png&#34; alt=&#34;CameraV marinading as CV Settings&#34; width=&#34;169&#34; height=&#34;300&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2015/05/Screenshot_2015-05-06-14-25-44-169x300.png 169w, https://guardianproject.info/wp-content/uploads/2015/05/Screenshot_2015-05-06-14-25-44-576x1024.png 576w, https://guardianproject.info/wp-content/uploads/2015/05/Screenshot_2015-05-06-14-25-44.png 720w&#34; sizes=&#34;(max-width: 169px) 100vw, 169px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-12939&#34; class=&#34;wp-caption-text&#34;&gt;
    CameraV masquerading as “CV Settings”
  &lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;attachment_12940&#34; style=&#34;width: 179px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2015/05/Screenshot_2015-05-06-11-02-46.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12940&#34; class=&#34;wp-image-12940 size-medium&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2015/05/Screenshot_2015-05-06-11-02-46-169x300.png&#34; alt=&#34;CameraV blocking screenshots in recent apps&#34; width=&#34;169&#34; height=&#34;300&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2015/05/Screenshot_2015-05-06-11-02-46-169x300.png 169w, https://guardianproject.info/wp-content/uploads/2015/05/Screenshot_2015-05-06-11-02-46-576x1024.png 576w, https://guardianproject.info/wp-content/uploads/2015/05/Screenshot_2015-05-06-11-02-46.png 720w&#34; sizes=&#34;(max-width: 169px) 100vw, 169px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-12940&#34; class=&#34;wp-caption-text&#34;&gt;
    CameraV blocking screenshots in recent apps
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br style=&#34;clear:both;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;CameraV (you can get &lt;a href=&#34;https://rink.hockeyapp.net/apps/dafbc649fcf585d7867866d5375b6495&#34;&gt;beta access here&lt;/a&gt; and find the &lt;a href=&#34;https://github.com/guardianproject/InformaApp&#34;&gt;source here&lt;/a&gt;), incorporates all of these as options for the user to activate. You can switch the default icon and app name to a more generic settings icon and “CV Settings” app name. We plan to enhance that feature to allow the user to define the icon and name, making the app able to act like a chameleon and blend in more completely. The app can be set to now allow screenshots to be taken of it, which also causes a black screen to show up in the recent apps list, stopping a casual inspection from identifying it as a photos-type app. It can also be set to not show up in the recent apps list at all, which is a more complete solution to that problem. The last piece, again taken from the aforementioned PanicButton app, is to, when the stealth icon is activated, to change the default home screen of the app to something innocuous like a calculator, so that even when the app is opened, it does not reveal its true nature. It is even possible to completely hide the app in the launcher, until a system event like a phone call to a specific number or a certain wifi network is connected, to make the app reveal itself again.&lt;/p&gt;

&lt;p&gt;You can learn how to dynamically switch your app’s icon on the &lt;a href=&#34;http://www.chainfire.eu/articles/133/_TUT_Supporting_multiple_icons_in_your_app/&#34;&gt;Chainfire blog&lt;/a&gt; and see the code in action on the &lt;a href=&#34;https://github.com/guardianproject/InformaApp/commit/98d8c545c1901d03d9d238204bb45d502a623e59#diff-7ab4bf3d594a968a90e0250af33fcb9bR399&#34;&gt;CameraV repo here&lt;/a&gt;. To block screenshots of your app, you can set the &lt;a href=&#34;https://github.com/guardianproject/InformaApp/commit/4c153ebd8d0a6e99660a9391e99c7dd6658a0efc#diff-f9e0f2937f7b2e3f755c53e7ec2e3909R64&#34;&gt;FLAG_SECURE feature in any Activity&lt;/a&gt;. To complete &lt;a href=&#34;https://github.com/guardianproject/InformaApp/blob/master/app/AndroidManifest.xml#L87&#34;&gt;stop your app from showing up in the recent app list&lt;/a&gt;, just set &lt;a href=&#34;https://github.com/guardianproject/InformaApp/blob/master/app/AndroidManifest.xml#L87&#34;&gt;‘&lt;span class=&#34;pl-e&#34;&gt;android&lt;/span&gt;&lt;span class=&#34;pl-e&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;pl-e&#34;&gt;excludeFromRecents&lt;/span&gt;=&lt;/a&gt;&lt;span class=&#34;pl-s&#34;&gt;&lt;a href=&#34;https://github.com/guardianproject/InformaApp/blob/master/app/AndroidManifest.xml#L87&#34;&gt;&lt;span class=&#34;pl-pds&#34;&gt;“&lt;/span&gt;true&lt;/a&gt;&lt;span class=&#34;pl-pds&#34;&gt;&lt;a href=&#34;https://github.com/guardianproject/InformaApp/blob/master/app/AndroidManifest.xml#L87&#34;&gt;“‘&lt;/a&gt; in the Activity entry in the manifest. &lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;These are just some of the initial ideas and techniques we have gathered and implemented. We plan to provide this set of capabilities in all of the apps we offer, and hope to spread them as standard features that any app that contains sensitive data or is meant for use by people in high-risk situations, should offer. I would love to hear your thoughts on other techniques that could be used, see code snippets you might have to achieve those, or discuss how and when this whole concept may or may not be effective.&lt;/p&gt;

&lt;p&gt;For now, stay safe out there, and that goes for your data and apps, too!&lt;/p&gt;

&lt;p&gt;_&lt;a href=&#34;https://commons.wikimedia.org/wiki/File:Tanzania_0607_cropped_Nevit.jpg#/media/File:Tanzania_0607_cropped_Nevit.jpg&#34;&gt;“Tanzania 0607 cropped Nevit”&lt;/a&gt; by Nevit Dilmen (talk) – Own work. Licensed under CC BY-SA 3.0 via Wikimedia Commons_&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting keys into your keyring with Gnu Privacy Guard for Android</title>
      <link>https://guardianproject.github.io/info/2013/12/06/getting-keys-into-your-keyring-with-gnu-privacy-guard-for-android/</link>
      <pubDate>Fri, 06 Dec 2013 15:11:53 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2013/12/06/getting-keys-into-your-keyring-with-gnu-privacy-guard-for-android/</guid>
      <description>&lt;p&gt;Now that you can have a full &lt;a href=&#34;https://www.gnupg.org&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;GnuPG&lt;/em&gt;&lt;/a&gt; on your Android device with &lt;a href=&#34;https://play.google.com/store/apps/details?id=info.guardianproject.gpg&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Gnu Privacy Guard&lt;/em&gt;&lt;/a&gt; for Android, the next step is getting keys you need onto your device and included in &lt;em&gt;Gnu Privacy Guard&lt;/em&gt;. We have tried to make it as easy as possible without compromising privacy, and have implemented a few approaches, while working on others. There are a few ways to get this done right now.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Gnu Privacy Guard&lt;/em&gt; registered itself with Android as a handler of all the standard &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc3156.txt&#34; title=&#34;RFC3156: MIME Security with OpenPGP&#34; target=&#34;_blank&#34;&gt;OpenPGP MIME types&lt;/a&gt; (&lt;code&gt;application/pgp-keys&lt;/code&gt;, &lt;code&gt;application/pgp-encrypted&lt;/code&gt;, &lt;code&gt;application/pgp-signature&lt;/code&gt;), as well as all of the OpenPGP and GnuPG file extensions (&lt;code&gt;.pkr&lt;/code&gt; &lt;code&gt;.skr&lt;/code&gt; &lt;code&gt;.key&lt;/code&gt; &lt;code&gt;.sig&lt;/code&gt; &lt;code&gt;.asc&lt;/code&gt; &lt;code&gt;.gpg&lt;/code&gt; &lt;code&gt;.bin&lt;/code&gt;). This means that users just have to share a file to &lt;em&gt;Gnu Privacy Guard&lt;/em&gt; using any of the standard Android methods, these files can be launched from an email attachment, opened from the SD card using a file browser, clicked in the Downloads view, etc.&lt;/p&gt;

&lt;p&gt;So if you want to quickly send your whole public keyring from your laptop to your mobile device, you can just grab the database file directly from &lt;em&gt;GnuPG&lt;/em&gt; and copy it to your SD card. Here is how:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;plug your device into your laptop via USB so you can copy files to the SD card&lt;/li&gt;
&lt;li&gt;find your &lt;em&gt;GnuPG&lt;/em&gt; home folder (on GNU/Linux and Mac OS X, it will be in &lt;code&gt;~/.gnupg/pubring.gpg&lt;/code&gt;, on Windows it is &lt;code&gt;%APPDATA%\gnupg&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;In your &lt;em&gt;GnuPG&lt;/em&gt; home folder, copy &lt;strong&gt;pubring.gpg&lt;/strong&gt; to your device’s SD card&lt;/li&gt;
&lt;li&gt;unmount and unplug your device&lt;/li&gt;
&lt;li&gt;on your device, open your favorite file manager app (&lt;a href=&#34;https://play.google.com/store/apps/details?id=org.openintents.filemanager&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;OI File Manager&lt;/em&gt;&lt;/a&gt;, &lt;em&gt;Astro&lt;/em&gt;, etc)&lt;/li&gt;
&lt;li&gt;go to the SD card&lt;/li&gt;
&lt;li&gt;long-click on &lt;strong&gt;pubring.gpg&lt;/strong&gt; and share it to &lt;em&gt;Gnu Privacy Guard&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;click OK on the Import Keys dialog&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After that, &lt;em&gt;Gnu Privacy Guard&lt;/em&gt; will do the rest. Give is some time to sync to the Contacts database, then you’ll see all of your keys from your desktop are now in your People app and are listed in &lt;em&gt;Gnu Privacy Guard&lt;/em&gt; itself. You can now encrypt files to any of those keys, or verify files signed by any of those keys. Here are a couple screenshots to illustrate key points in the process, using &lt;em&gt;OI File Manager&lt;/em&gt;:&lt;/p&gt;

&lt;p align=&#34;center&#34;&gt;
  &lt;div id=&#34;attachment_12155&#34; style=&#34;width: 209px&#34; class=&#34;wp-caption alignleft&#34;&gt;
    &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-0.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12155&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-0-199x300.png&#34; alt=&#34;send your public keyring file&#34; width=&#34;199&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-12155&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-0-199x300.png 199w, https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-0.png 319w&#34; sizes=&#34;(max-width: 199px) 100vw, 199px&#34; /&gt;&lt;/a&gt;
    
    &lt;p id=&#34;caption-attachment-12155&#34; class=&#34;wp-caption-text&#34;&gt;
      1. send your public keyring file
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/p&gt;

&lt;div id=&#34;attachment_12156&#34; style=&#34;width: 209px&#34; class=&#34;wp-caption alignright&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-1.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12156&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-1-199x300.png&#34; alt=&#34;choose Gnu Privacy Guard to send the file to&#34; width=&#34;199&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-12156&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-1-199x300.png 199w, https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-1.png 319w&#34; sizes=&#34;(max-width: 199px) 100vw, 199px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-12156&#34; class=&#34;wp-caption-text&#34;&gt;
    2. choose &lt;em&gt;Gnu Privacy Guard&lt;/em&gt; to send the file to
  &lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;attachment_12157&#34; style=&#34;width: 209px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-2.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12157&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-2-199x300.png&#34; alt=&#34;click OK to import the key file&#34; width=&#34;199&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-12157&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-2-199x300.png 199w, https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-2.png 319w&#34; sizes=&#34;(max-width: 199px) 100vw, 199px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-12157&#34; class=&#34;wp-caption-text&#34;&gt;
    3. click OK to import the key file
  &lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;attachment_12158&#34; style=&#34;width: 209px&#34; class=&#34;wp-caption alignright&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-3.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12158&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-3-199x300.png&#34; alt=&#34;now you can see the imported keys in Gnu Privacy Guard&#34; width=&#34;199&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-12158&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-3-199x300.png 199w, https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-3.png 319w&#34; sizes=&#34;(max-width: 199px) 100vw, 199px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-12158&#34; class=&#34;wp-caption-text&#34;&gt;
    4. now you can see the imported keys in &lt;em&gt;Gnu Privacy Guard&lt;/em&gt;
  &lt;/p&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;There are many ways to get the keyring files like &lt;strong&gt;pubring.gpg&lt;/strong&gt; to your device: you can also share the keyring files via email, chat, or even services like &lt;em&gt;Dropbox&lt;/em&gt; or &lt;em&gt;Google Drive&lt;/em&gt;. Then once the files are on your device, you can import them using the same procedure as above. But keep in mind that you are sending your whole collection of secure contacts to that service, which will have full access to read it. If you have any worries about leaking your keyring to anyone, then a good method is to copy it directly to the SD card.&lt;/p&gt;

&lt;div id=&#34;attachment_12192&#34; style=&#34;width: 209px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-search-keyserver.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12192&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-search-keyserver-199x300.png&#34; alt=&#34;search the keyserver for the author&#39;s key (I lost the key from 1998, so don&#39;t use that one...)&#34; width=&#34;199&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-12192&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-search-keyserver-199x300.png 199w, https://guardianproject.info/wp-content/uploads/2013/12/GPGA-search-keyserver.png 319w&#34; sizes=&#34;(max-width: 199px) 100vw, 199px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-12192&#34; class=&#34;wp-caption-text&#34;&gt;
    search the keyserver for the author’s key (the key from 1998 is lost, don’t use that one…)
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;You can also search and download keys via the public pool of OpenPGP keyservers. If you already know someone’s keyid or fingerprint, you can search using that. Otherwise, you can search based on name or email address. But be careful! Downloading a key from a keyserver does not give you a key you can trust. Anyone can upload a key to the keyservers, and they can make that key have any name or email address. Downloading from the keyservers is a convenient way to download a key, but you must verify the key’s fingerprint with the person you are trying to find.&lt;/p&gt;

&lt;p&gt;&lt;div id=&#34;attachment_12184&#34; style=&#34;width: 160px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/12/0x9F0FE587374BBE81-qr.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12184&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/12/0x9F0FE587374BBE81-qr-150x150.png&#34; alt=&#34;scan this QR Code to get the author&#39;s OpenPGP key&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;size-thumbnail wp-image-12184&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/12/0x9F0FE587374BBE81-qr-150x150.png 150w, https://guardianproject.info/wp-content/uploads/2013/12/0x9F0FE587374BBE81-qr-300x300.png 300w, https://guardianproject.info/wp-content/uploads/2013/12/0x9F0FE587374BBE81-qr.png 330w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;p id=&#34;caption-attachment-12184&#34; class=&#34;wp-caption-text&#34;&gt;
    scan this QR Code to get the author’s OpenPGP key
  &lt;/p&gt;
&lt;/div&gt;In conjunction with the&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://web.monkeysphere.info/&#34; target=&#34;_blank&#34;&gt;Monkeysphere&lt;/a&gt; project, we developed a standard URI scheme for sending OpenPGP key fingerprints. For example, you can find my key ID here: &lt;a href=&#34;openpgp4fpr:9F0FE587374BBE81&#34;&gt;&lt;code&gt;openpgp4fpr:9F0FE587374BBE81&lt;/code&gt;&lt;/a&gt;. This provides a clickable way to get an OpenPGP key. On an Android device with &lt;em&gt;Gnu Privacy Guard&lt;/em&gt; installed, you can click on this link to download my key from the keyservers. This URI scheme also works well in QR Codes. Scan this QR Code on your device with an app like &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.google.zxing.client.android&#34; title=&#34;Barcode Scanner in the Google Play Store&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Barcode Scanner&lt;/em&gt;&lt;/a&gt;, and click &lt;strong&gt;Open Browser&lt;/strong&gt;, and Gnu Privacy Guard will download my key to your device.&lt;/p&gt;

&lt;p&gt;There are other ideas out there that we also want to support. For example, &lt;a href=&#34;http://sufficientlysecure.org/index.php/openpgp-keychain/&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;OpenPGP Keychain&lt;/em&gt;&lt;/a&gt; includes a way to transmit the whole public key via &lt;a href=&#34;https://en.wikipedia.org/wiki/Near_field_communication&#34; title=&#34;Near Field Communication&#34; target=&#34;_blank&#34;&gt;NFC&lt;/a&gt;. This allows people can swap keys directly from phone to phone without having internet access at all. But NFC is quite slow to transmit data so the devices need to be held together for a while until the whole key is received. NFC could be used to rapidly transmit an &lt;code&gt;openpgp4fpr:&lt;/code&gt; URI, and then the whole public key would be fetched from a keyserver, but that then requires internet access and also leaks a bit of metadata to the internet. A better technique would be to transmit the entire public key over Bluetooth, using NFC to setup the Bluetooth session. We’re also looking at ways to do this via WiFi and &lt;a href=&#34;https://en.wikipedia.org/wiki/Bonjour_(software)&#34; target=&#34;_blank&#34;&gt;Bonjour (mDNS)&lt;/a&gt; local service advertisements.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A tag-team git workflow that incorporates auditing</title>
      <link>https://guardianproject.github.io/info/2013/11/21/a-tag-team-git-workflow-that-incorporates-auditing/</link>
      <pubDate>Thu, 21 Nov 2013 14:03:22 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2013/11/21/a-tag-team-git-workflow-that-incorporates-auditing/</guid>
      <description>&lt;p&gt;Git is as wonderful as it is terrible, it is immensly flexible but also far from intuitive. So to make our lives easier, we try to use git as it was originally intended, as a toolkit for building workflows.&lt;/p&gt;

&lt;p&gt;&lt;div id=&#34;attachment_11990&#34; style=&#34;width: 310px&#34; class=&#34;wp-caption alignright&#34;&gt;
  &lt;a href=&#34;http://git-scm.com/book/en/Distributed-Git-Distributed-Workflows#Integration-Manager-Workflow&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-11990&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/11/integration_manager_workflow-300x121.png&#34; alt=&#34;Integration-Manager Workflow&#34; width=&#34;300&#34; height=&#34;121&#34; class=&#34;size-medium wp-image-11990&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/11/integration_manager_workflow-300x121.png 300w, https://guardianproject.info/wp-content/uploads/2013/11/integration_manager_workflow.png 500w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;p id=&#34;caption-attachment-11990&#34; class=&#34;wp-caption-text&#34;&gt;
    Integration-Manager Workflow
  &lt;/p&gt;
&lt;/div&gt;We use a simple version of the “&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://git-scm.com/book/en/Distributed-Git-Distributed-Workflows&#34; target=&#34;_blank&#34;&gt;Integration-Manager Workflow&lt;/a&gt;“. One key difference is that we often have multiple contributors acting as the integration manager. This means that there is always someone else besides the original author reviewing each commit. For example: I make a commit and push it to my public developer’s repo. I ask Abel to review my commit, and if he agrees with it, he then pushes it to the official public “_upstream_” repo (aka “blessed repository”). And since git will tell us if a remote repo is different than our local repo, this process makes it harder for an attacker to slip a commit into our remote repo without us noticing.&lt;/p&gt;

&lt;p&gt;The key to this workflow is that all contributors must fork from the same git repo, and mark that one as the one &lt;em&gt;upstream&lt;/em&gt; repo. We often end up &lt;a href=&#34;http://git-scm.com/book/en/Git-Branching-Rebasing&#34; target=&#34;_blank&#34;&gt;rebasing&lt;/a&gt; things to make sure each commit is based on the most up-to-date code. It also makes for a clean, readable history. That means each contributor’s public repo will be rebased from time to time, so you cannot rely on those repos as something to base your own work off of.&lt;/p&gt;

&lt;p&gt;At the very least, a contributor’s local repo should be set up to talk to two remote repos: the contributor’s own public repo and the &lt;em&gt;upstream&lt;/em&gt; repo. I’ll use github as an example of how to get started in this workflow. Say you want to contribute to &lt;a href=&#34;https://github.com/guardianproject/keysync&#34;&gt;https://github.com/guardianproject/keysync&lt;/a&gt;, start by making a fork via the github.com&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2013/11/fork.png&#34; alt=&#34;fork&#34; width=&#34;65&#34; height=&#34;19&#34; /&gt; button. Once that is setup, its time to clone it and configure the rest. I’m &lt;strong&gt;eighthave&lt;/strong&gt; on github, so this example will use my public repo. I work with Abel Luck on KeySync, so we’ll add his repo as another contributor repo.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/eighthave/keysync
cd keysync
git remote add upstream https://github.com/guardianproject/keysync
git fetch upstream
git remote add abeluck https://github.com/abeluck/keysync
git fetch abeluck
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I can see all of the remotes in my local git repo, and work with them as branches:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ git remote  -v
abeluck https://github.com/abeluck/keysync (fetch)
abeluck https://github.com/abeluck/keysync (push)
origin  https://github.com/eighthave/keysync (fetch)
origin  https://github.com/eighthave/keysync (push)
upstream        https://github.com/guardianproject/keysync (fetch)
upstream        https://github.com/guardianproject/keysync (push)
$ git branch -va
* master                  1536fcf parse version number from setuptools
  remotes/abeluck/master  1536fcf parse version number from setuptools
  remotes/origin/HEAD     -&amp;gt; origin/master
  remotes/origin/master   1536fcf parse version number from setuptools
  remotes/upstream/master 1536fcf parse version number from setuptools
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I do some work, and commit it to my local repo, and want to push them for Abel to review. In the meantime Abel has pushed some commits for me to review into his remote repo &lt;code&gt;abeluck&lt;/code&gt;. So I need to fetch his new commits, then rebase my new local commits on top of of his new commits. When its all ready, I push it to my remote repo &lt;code&gt;origin&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout master
git fetch abeluck
(review the commits...)
git rebase abeluck/master
git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I’ve reviewed Abel’s new commits and incorporated them into my public repo. Abel is ready to review my new commits, which are rebased on top of his. If he agrees with them, he’ll push them to the official “blessed” repo &lt;code&gt;upstream&lt;/code&gt;. Then his local repo will be in sync with the latest &lt;em&gt;upstream&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout master
git fetch eighthave
git merge eighthave/master
(review the commits...)
git push upstream master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Review The Commits&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can also review the commits before rebasing or merging them into the local master. This is done by switching to the remote branch, which is kind of like a local branch, but not entirely. It works for checking out and viewing just fine though:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout eighthave/master
(review the commits...)
git checkout master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Undoing A Bad Rebase&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Git doesn’t provide any undo, and it also will let you delete things, not a good situation for learning this stuff. Luckily it does give you the tools for making something like an undo function. I use a tag for this, and I always use the same name for that tag: &lt;code&gt;pre-rebase&lt;/code&gt;. Before starting anything that involves rebasing, I first do:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout master
git tag pre-rebase
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then after the rebase is successfully deleted, I remove that tag:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git tag -d pre-rebase
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Switching Your Master When Things Have Diverged&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It is often the case that in the process of merging and rebasing, the developers’ repos will be in separate branches of the original tree. Once the “integration manager” person has pulled in all the commits, rebased and merged everything, and pushed the approved commits to the upstream repo, the other developers will likely need to reset their repos to resync with the upstream:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git fetch upstream
git checkout upstream/master
git branch -D master
git branch master
git checkout master
git push -f origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So &lt;code&gt;git branch -D master&lt;/code&gt; does indeed mean force-delete your master branch. That is required before setting your master branch to a new branch. If you want, you can keep that old branch around by doing &lt;code&gt;git branch myfeaturedevbranch&lt;/code&gt; before doing &lt;code&gt;git branch -D master&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Keeping All The History&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One addition to this process is for each contributor to mark their own tree with a labeled branch before rebasing, and then pushing those branches to the contributor’s public repo. This will then provide a complete history of the process, if that is desired. For example: I push some commits to my public repo, then Abel rebases my commits onto some of his work and pushes to the &lt;em&gt;upstream&lt;/em&gt;. In this case, the history in my public repo will be different than what is in the &lt;em&gt;upstream&lt;/em&gt; repo as well as Abel’s public repo.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Your own private dropbox with free software</title>
      <link>https://guardianproject.github.io/info/2013/11/12/your-own-private-dropbox-with-free-software/</link>
      <pubDate>Tue, 12 Nov 2013 12:50:23 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2013/11/12/your-own-private-dropbox-with-free-software/</guid>
      <description>&lt;p&gt;There are lots of file storage and sharing software packages out there that make it easy for a group of people to share files. Dropbox is perhaps the most well known of the group, it provides an easy way for a group of people to share files. The downside of Dropbox is that it is not a private service, just like any cloud-based service. Dropbox has total access to your files that you store there. That means its likely that the NSA and its collaborators do too.&lt;/p&gt;

&lt;p&gt;Dropbox also knows where the computers are that are accessing their service because they can see the IP address of the incoming connections. To help with this, it is possible to use use Dropbox over Tor, thankfully they have provided proxy settings.&lt;/p&gt;

&lt;p&gt;For our shared files, we use &lt;a href=&#34;http://sparkleshare.org/&#34; target=&#34;_blank&#34;&gt;SparkleShare&lt;/a&gt;. It provides an experience very similar to Dropbox: you have a SparkleShare folder that is synced up with the service, and in turn any other users who are also linked up to it. Once its setup, it is as easy to use as Dropbox, but setting it up takes a bit more work than Dropbox. It builds upon two software packages well known for security and reliability: &lt;code&gt;git&lt;/code&gt; and &lt;code&gt;ssh&lt;/code&gt;, and works with Tor Hidden Services. It runs on Windows, Mac OS X, and GNU/Linux, and there is an &lt;a href=&#34;https://github.com/NewProggie/SparkleShare-Android&#34; target=&#34;_blank&#34;&gt;Android client&lt;/a&gt; in the works.&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/11/sparkleshare-onion.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2013/11/sparkleshare-onion.png&#34; alt=&#34;sparkleshare-onion&#34; width=&#34;312&#34; height=&#34;342&#34; class=&#34;alignright size-full wp-image-11936&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/11/sparkleshare-onion.png 312w, https://guardianproject.info/wp-content/uploads/2013/11/sparkleshare-onion-273x300.png 273w&#34; sizes=&#34;(max-width: 312px) 100vw, 312px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can use any git service as the server for SparkleShare, including github, bitbucket, &lt;a href=&#34;https://gitorious.org/&#34; target=&#34;_blank&#34;&gt;gitorious&lt;/a&gt;, etc. But these have the same issues as putting your files on Dropbox: that service has complete access to your files. For extra protection, SparkleShare &lt;a href=&#34;https://github.com/hbons/SparkleShare/wiki/Client-Side-Encryption&#34; target=&#34;_blank&#34;&gt;can encrypt the files on the client-side&lt;/a&gt;, have encrypted shared folders with SparkleShare, so that the server does not have access to the files. For the last piece of setting up a private SparkleShare, you need a computer that you can &lt;code&gt;ssh&lt;/code&gt; to, and has &lt;code&gt;git&lt;/code&gt; and Tor on it. This computer could even be an old Android device running &lt;a href=&#34;https://guardianproject.info/code/lildebi/&#34; target=&#34;_blank&#34;&gt;Lil’ Debi&lt;/a&gt;, it only needs enough disk space for your SparkleShare files and a steady network connection. Running it on your own computer means it can use a Tor Hidden Service, and that all of the metadata related to who is editing what files remains private.&lt;/p&gt;

&lt;p&gt;To start, setup a Tor Hidden Service to the sshd port. You can read all about that process in the &lt;a href=&#34;https://www.torproject.org/docs/tor-hidden-service.html&#34; target=&#34;_blank&#34;&gt;Tor instructions&lt;/a&gt;, but basically, you need to add something like this to the &lt;code&gt;torrc&lt;/code&gt; configuration file:&lt;/p&gt;

&lt;pre&gt;HiddenServiceDir /var/lib/tor/ssh_hidden_service/
HiddenServicePort 22 127.0.0.1:22
&lt;/pre&gt;

&lt;p&gt;Then restart tor, and it will generate two files in &lt;code&gt;/var/lib/tor/ssh_hidden_service/&lt;/code&gt;, open the file called &lt;code&gt;hostname&lt;/code&gt; to see your new .onion address. We’re going to use &lt;code&gt;fakefakefakefake.onion&lt;/code&gt; as our made-up one for this HOWTO. That is the address you will use in SparkleShare as the server address.&lt;/p&gt;

&lt;p&gt;Next &lt;code&gt;ssh&lt;/code&gt; needs to be setup to use Tor to access the .onion address of the Tor Hidden Service. To do that we need the wonderful Netcat tool (&lt;code&gt;nc&lt;/code&gt;). On Debian/Ubuntu, run &lt;code&gt;sudo apt-get install netcat-openbsd&lt;/code&gt; to get it, its included with Mac OS X by default. Now edit your SSH config file, its usually in &lt;code&gt;~/.ssh/config&lt;/code&gt;, and add this section:&lt;/p&gt;

&lt;pre&gt;Host *.onion
     Compression yes
     ProxyCommand nc -X 5 -x 127.0.0.1:9050 %h %p
&lt;/pre&gt;

&lt;p&gt;For Windows, you need to use &lt;code&gt;connect&lt;/code&gt; proxy, which is thankfully included in SparkleShare. You can optionally use &lt;code&gt;connect&lt;/code&gt; instead of Netcat/&lt;code&gt;nc&lt;/code&gt; on Mac OS X (&lt;code&gt;fink install connect&lt;/code&gt; or &lt;code&gt;brew install connect&lt;/code&gt;) and GNU/Linux (e.g. &lt;code&gt;apt-get install connect-proxy&lt;/code&gt; or &lt;code&gt;yum install connect-proxy&lt;/code&gt;). Instead of the snippet above, use this snippet in &lt;code&gt;~/.ssh/config&lt;/code&gt; to use &lt;code&gt;connect&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;Host *.onion
     Compression yes
     ProxyCommand connect -5 -S 127.0.0.1:9050 %h %p
&lt;/pre&gt;

&lt;p&gt;Now its time to set up the git repo on the server that will be the conduit for sharing files between the different users. Basically, all you need to do is create a new folder, then make it a “bare” git repo (you can read &lt;a href=&#34;http://git-scm.com/book/en/Git-on-the-Server-Setting-Up-the-Server&#34; target=&#34;_blank&#34;&gt;all about it in the git book&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;ssh g&amp;#x69;t&amp;#x40;&amp;#x66;a&amp;#x6b;e&amp;#x66;&amp;#x61;k&amp;#x65;f&amp;#x61;&amp;#x6b;e&amp;#x66;a&amp;#x6b;&amp;#x65;.&amp;#x6f;n&amp;#x69;&amp;#x6f;n
mkdir /home/git/MyPrivateShare
cd /home/git/MyPrivateShare
git init --bare
&lt;/pre&gt;

&lt;p&gt;For sshing to the git, we set up a single account called &lt;code&gt;git&lt;/code&gt;, then to grant access, we add the SSH key (SparkleShare calls this the &lt;em&gt;Client ID&lt;/em&gt;) to the &lt;code&gt;git&lt;/code&gt; account’s &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Now everything should be ready to start adding clients! In SparkleShare, go to Add Hosted Project…, choose On my own server, then enter your username and .onion address (&lt;em&gt;ssh:&amp;#x2f;&amp;#x2f;&amp;#x67;&amp;#x69;t@fak&amp;#x65;&amp;#x66;&amp;#x61;&amp;#x6b;efake&amp;#x66;&amp;#x61;&amp;#x6b;&amp;#x65;.onio&amp;#x6e;&lt;/em&gt;) in &lt;strong&gt;Address&lt;/strong&gt; and the path to the git repo (&lt;em&gt;/home/git/MyPrivateShare&lt;/em&gt;) in &lt;strong&gt;Remote Path&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/11/Screenshot-SparkleShare-Setup.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2013/11/Screenshot-SparkleShare-Setup.png&#34; alt=&#34;SparkleShare Setup&#34; width=&#34;686&#34; height=&#34;427&#34; class=&#34;alignnone size-full wp-image-11945&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/11/Screenshot-SparkleShare-Setup.png 686w, https://guardianproject.info/wp-content/uploads/2013/11/Screenshot-SparkleShare-Setup-300x186.png 300w&#34; sizes=&#34;(max-width: 686px) 100vw, 686px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now the client will download the entire git repository from the server, and you’ll then have a working shared dropbox! If there are a lot of files in it, then the first sync can take a long time before any files show up. This is because git first downloads the entire history first, then it checks out the files. After that initial setup, then the new files show up quite quickly.&lt;/p&gt;

&lt;p&gt;So this SparkleShare setup keeps your files on computers that you control, it prevents information and metadata from being leaked to the network while people are using this SparkleShare setup. When using Client Side Encryption, even less data is leaked. The server cannot access the content of the files at all since they are encrypted. The the server in this case would only be able to see the network traffic, and which ssh key was used to access the server. If everyone accessing this setup used the same user account (i.e. &lt;code&gt;git&lt;/code&gt;) and ssh key, then the server would not even know which user is making the changes. This is about as private as you could hope for in a shared dropbox folder.&lt;/p&gt;

&lt;p&gt;One last nice feature of this setup is that git server does not need a domain name, static IP or even a public IP, it just needs a working internet connection. As long as it can connect to Tor, then the Hidden Service will work. So if this private dropbox is for extra sensitive stuff, it could be stashed anywhere it can get power and wifi.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting up your own app store with F-Droid</title>
      <link>https://guardianproject.github.io/info/2013/11/05/setting-up-your-own-app-store-with-f-droid/</link>
      <pubDate>Tue, 05 Nov 2013 11:55:43 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2013/11/05/setting-up-your-own-app-store-with-f-droid/</guid>
      <description>

&lt;p&gt;(_This blog post as now been cooked into an &lt;a href=&#34;https://f-droid.org/wiki/page/Setup_an_FDroid_App_Repo&#34; target=&#34;_blank&#34;&gt;updated HOWTO&lt;/a&gt;_)&lt;/p&gt;

&lt;p&gt;The Google Play Store for Android is not available in all parts of the world, US law restricts its use in certain countries like Iran, and many countries block access to the Play Store, like China. Also, the Google Play Store tracks all user actions, reporting back to Google what apps have been installed and also run on the phone. Because of the NSA leaks, we’re seeing that governments are &lt;a href=&#34;http://www.theguardian.com/technology/2013/oct/30/google-reports-nsa-secretly-intercepts-data-links&#34; target=&#34;_blank&#34;&gt;actively tapping&lt;/a&gt; into &lt;a href=&#34;http://www.nytimes.com/2013/10/31/technology/nsa-is-mining-google-and-yahoo-abroad.html&#34; target=&#34;_blank&#34;&gt;the raw data streams&lt;/a&gt; of Google, Yahoo, and others. So that means the information the Google Play Store sends back to Google is also intercepted by the NSA (and probably other country’s agencies), and that information is shared with other governments. In other words, your activity on the Google Play Store is far from private. Lastly, the Google Play Store is not free software, unlike the core of Android itself. It is proprietary software that Google entirely controls.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2013/11/your-own-app-store.png&#34; alt=&#34;your-own-app-store&#34; width=&#34;300&#34; height=&#34;203&#34; class=&#34;alignright size-full wp-image-11896&#34; /&gt; &lt;a href=&#34;https://f-droid.org&#34; title=&#34;F-Droid Home Page&#34; target=&#34;_blank&#34;&gt;F-Droid&lt;/a&gt; is a wonderful, free app store for Android. It is modeled after the &lt;a href=&#34;http://www.debian.org&#34; title=&#34;Debian home page&#34; target=&#34;_blank&#34;&gt;Debian GNU/Linux&lt;/a&gt; distro. It has its own package repositories (repos) and build servers for all the apps that are part of the official OS. Like Debian and Ubuntu, you can also setup your own repos for anyone to use. Any free software can be added to the official F-Droid repos, where they are built and signed by the F-Droid server. This can be annoying because it means that your apps in F-Droid are signed by a different key than your apps in the Google Play Store. If you host your own F-Droid repo, then people can use F-Droid to install your own builds signed by your own signing key.&lt;/p&gt;

&lt;p&gt;This is a quick HOWTO for how to setup such a repository on a Debian or Ubuntu box. It is somewhat technical, you will use the terminal, but you don’t need to be a terminal expert to follow along. First you need a the &lt;code&gt;fdroidserver&lt;/code&gt; tools and a webserver. For the webserver, here we use &lt;em&gt;nginx&lt;/em&gt; for the webserver since its lightweight, but any will do if you already have one running. The fdroidserver tools are not yet in the official Debian/Ubuntu/etc repos, so you have to add our PPA (Personal Package Archive) to get it (fingerprint: &lt;tt&gt;F50E ADDD 2234 F563&lt;/tt&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo add-apt-repository ppa:guardianproject/ppa
sudo apt-get update
sudo apt-get install fdroidserver nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the case of this HOWTO, we’re going to setup a “&lt;a href=&#34;https://f-droid.org/manual/fdroid.html#Simple-Binary-Repository&#34; target=&#34;_blank&#34;&gt;Simple Binary Repository&lt;/a&gt;” to host our official APKs. The repo will be set up in the recommended &lt;code&gt;fdroid/&lt;/code&gt; subdirectory. This gives the &lt;code&gt;fdroid&lt;/code&gt; tool its own directory to work in, and makes the repo URL clearly marked as an FDroid repo. Let’s give our normal user control over this subdirectory in the web root so that we don’t need to run the F-Droid tools as root (with &lt;em&gt;nginx&lt;/em&gt;, the webroot is &lt;code&gt;/usr/share/nginx/www&lt;/code&gt;, it is different for other webservers):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo mkdir /usr/share/nginx/www/fdroid
sudo chown -R $USER /usr/share/nginx/www/fdroid
cd /usr/share/nginx/www/fdroid
fdroid init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now put your APK files into &lt;code&gt;/usr/share/nginx/www/fdroid/repo&lt;/code&gt; and you are ready to run the commands to build the repo (if &lt;code&gt;fdroid init&lt;/code&gt; cannot find your Android SDK in &lt;code&gt;/opt/android-sdk&lt;/code&gt; or &lt;code&gt;$ANDROID_HOME&lt;/code&gt;, it will prompt you for the path):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /usr/share/nginx/www/fdroid
cp /path/to/*.apk /usr/share/nginx/www/fdroid/repo/
fdroid update -c
fdroid update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://f-droid.org&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2013/11/fdroidheader3-300x75.png&#34; alt=&#34;fdroidheader3&#34; width=&#34;300&#34; height=&#34;75&#34; class=&#34;alignleft size-medium wp-image-11906&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/11/fdroidheader3-300x75.png 300w, https://guardianproject.info/wp-content/uploads/2013/11/fdroidheader3.png 720w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;Voila! Now you have a working F-Droid Repo! Add it to an F-Droid client on your Android device to test it out. That is done in the &lt;strong&gt;Manage Repos&lt;/strong&gt; screen available from the menu. Your repo URL will be the hostname or IP address of your machine with &lt;code&gt;/fdroid/repo/&lt;/code&gt; added to the end of it, i.e. &lt;code&gt;https://mysecureserver.com/fdroid/repo/&lt;/code&gt; or &lt;code&gt;http://192.168.2.53/fdroid/repo/&lt;/code&gt;. You can temporarily uncheck the official repos to easily see what F-Droid found in your new repo.&lt;/p&gt;

&lt;h2 id=&#34;customization&#34;&gt;Customization&lt;/h2&gt;

&lt;p&gt;You can also customize your repo by editing the config file. Be sure to use a programming text editor, like &lt;code&gt;editor /usr/share/nginx/www/fdroid/config.py&lt;/code&gt;. In the config file, you can set the name of the repo, the description, the icon, paths to specific versions of the build tools, links to a related wiki, and whether to keep stats. Here’s the basic repo description block:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;repo_url = &amp;quot;https://guardianproject.info/fdroid/repo&amp;quot;
repo_name = &amp;quot;My Local Repo&amp;quot;
repo_icon = &amp;quot;GP_Logo_hires.png&amp;quot;
repo_description = &amp;quot;&amp;quot;&amp;quot;
This is a local test repository of Hans-Christoph Steiner &amp;lt;&amp;amp;#x68;a&amp;amp;#x6e;s@&amp;amp;#x67;ua&amp;amp;#x72;d&amp;amp;#x69;&amp;amp;#x61;n&amp;amp;#x70;ro&amp;amp;#x6a;e&amp;amp;#x63;&amp;amp;#x74;.&amp;amp;#x69;nf&amp;amp;#x6f;&amp;gt;.  It is a repository of Guardian Project apps.
&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To put your icon into your repo, choose a PNG image to put in your repo. The PNG goes in &lt;code&gt;/usr/share/nginx/www/fdroid/&lt;/code&gt;, the file can be named whatever you want (by default its &lt;code&gt;fdroid-icon.png&lt;/code&gt;). If you change the name from the default, be sure to update &lt;code&gt;repo_icon&lt;/code&gt; and &lt;code&gt;archive_icon&lt;/code&gt; in &lt;code&gt;/usr/share/nginx/www/fdroid/config.py&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;more-security&#34;&gt;More Security&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2010/02/apg.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2010/02/apg-150x150.png&#34; alt=&#34;apg&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignright size-thumbnail wp-image-1029&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2010/02/apg-150x150.png 150w, https://guardianproject.info/wp-content/uploads/2010/02/apg.png 256w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;Now that you have a working repo, its time to improve the security. Generating a repo in place is very easy, that is why this HOWTO started there, but it is not as secure as it should be if your repo is going to be your main distribution point. When generating the repo in place, make sure that &lt;code&gt;config.py&lt;/code&gt; is not accessible via the web, since it contains passwords. If the file permissions are correct (e.g. &lt;code&gt;chmod 0600 config.py&lt;/code&gt;), then &lt;code&gt;config.py&lt;/code&gt; will not be readable by the webserver. But the signing keys will still be that public server. To improve this situation, generate the repo on a non-public machine like your laptop, keeping &lt;code&gt;config.py&lt;/code&gt; and the keystore only on that machine, then use &lt;code&gt;fdroid server update&lt;/code&gt; to publish the changes to your repo on a separate server. You just need to set &lt;code&gt;serverwebroot&lt;/code&gt; in &lt;code&gt;config.py&lt;/code&gt; properly, then &lt;code&gt;fdroid server update&lt;/code&gt; will do the publishing via rsync over ssh. So both computers will have to have ssh and rsync installed and setup.&lt;/p&gt;

&lt;p&gt;You can also use your own existing signing key rather than the one generated by &lt;code&gt;fdroid init&lt;/code&gt;, just edit &lt;code&gt;repo_keyalias&lt;/code&gt;, &lt;code&gt;keystore&lt;/code&gt;, &lt;code&gt;keystorepass&lt;/code&gt;, &lt;code&gt;keypass&lt;/code&gt;, and &lt;code&gt;keydname&lt;/code&gt; in &lt;code&gt;/usr/share/nginx/www/fdroid/config.py&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since we like Tor and its Hidden Services for providing privacy, we also want to setup an F-Droid repository that is accessible over a Tor Hidden Service aka onion address. This will be covered in a future HOWTO.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Security Awareness Party</title>
      <link>https://guardianproject.github.io/info/2013/04/26/security-awareness-party/</link>
      <pubDate>Fri, 26 Apr 2013 09:05:36 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2013/04/26/security-awareness-party/</guid>
      <description>

&lt;p&gt;In the security world, there’s a pesky belief that a tool can either be secure or easy to use, but not both. Some experts also argue that training people to be safe online is too hard and doesn’t accomplish much (see Bruce Schneier’s recent post &lt;a href=&#34;http://www.schneier.com/blog/archives/2013/03/security_awaren_1.html&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Security Awareness Training&lt;/em&gt;&lt;/a&gt;). Without a thoughtful approach, that’s usually how it plays out. But it doesn’t have to be that way! We’re committed to making online security fun to learn and fun to use, and we’re launching a new series of interactive tutorials to make it happen. Consider this post an invitation to our festive Security Awareness Party. &lt;a href=&#34;https://guardianproject.info/home/how-you-can-work-with-us/&#34; target=&#34;_blank&#34;&gt;Beer is encouraged&lt;/a&gt;, especially if it comes from &lt;a title=&#34;Android-powered beer kegerator&#34; href=&#34;https://kegbot.org/&#34; target=&#34;_blank&#34;&gt;an Android-powered kegbot&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here at Guardian, security is always our #1 priority. We owe that to our users who rely on us to keep them safe in places like Syria or Iran. But the time we spend on encryption is wasted if users don’t like using our tools, or can’t figure out how they work. We want to make security apps that are enjoyable and easy to use everyday, and don’t take a PHD to understand.&lt;/p&gt;

&lt;p&gt;Activists in Iran and Syria know firsthand how important technologies like Tor and VPNs are for staying safe online. Our friends and neighbors might not be living under a repressive dictatorship, but that doesn’t mean they couldn’t use a little digital security in their lives. Maybe your nephew wants to get past the block on Facebook at school, or your co-worker wants to watch March Madness at work (make sure she gets that decoy spreadsheet ready). Maybe your friend just wants to send his wife a few…private messages, and he’d rather not have them stored by Google or Verizon. These people might not be pros, but they’re curious and happy to poke around their technology. With a little fun and interactive guidance, they can be well on their way to becoming a power user. Everyone starts somewhere!&lt;/p&gt;

&lt;p&gt;We want to make life safer and easier for at-risk activists and everyday people alike. That’s why we make accessible and straightforward guides to help you quickly and easily get past censors, internet police, or the office IT department.&lt;/p&gt;

&lt;h1 id=&#34;gibberbot-tutorial&#34;&gt;&lt;strong&gt;Gibberbot Tutorial&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Our newest tutorial is for our secure chat app, &lt;a href=&#34;https://play.google.com/store/apps/details?id=info.guardianproject.otr.app.im&amp;feature=search_result&#34; target=&#34;_blank&#34;&gt;Gibberbot&lt;/a&gt;. With your Android phone in one hand and the &lt;a href=&#34;https://guardianproject.info/howto/chatsecurely/&#34; target=&#34;_blank&#34;&gt;Gibberbot Tutorial&lt;/a&gt; in the other, you can be chatting securely on Google or Facebook chat in minutes! But Google and Facebook can’t even tell what you’re talking about. It’s also more convenient to have all of your chat apps rolled into one so that it doesn’t matter where your friends message you, it still goes to the same place. Gibberbot works even if someone is trying to monitor or block your phone’s communications. If you know another language and would like to contribute, &lt;a title=&#34;Gibberbot Tutorial Transifex Translations&#34; href=&#34;https://www.transifex.com/projects/p/gibberbot-tutorial/&#34; target=&#34;_blank&#34;&gt;we’d love your help translating the tutorial (we’ve got English and Tibetan covered)&lt;/a&gt;.&lt;/p&gt;

&lt;div id=&#34;attachment_3291&#34; style=&#34;width: 251px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/howto/chatsecurely/&#34; target=&#34;_blank&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-3291&#34; class=&#34; wp-image-3291&#34; alt=&#34;galaxy5&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/02/galaxy5.png&#34; width=&#34;241&#34; height=&#34;361&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-3291&#34; class=&#34;wp-caption-text&#34;&gt;
    So you want to chat securely?
  &lt;/p&gt;
&lt;/div&gt;

&lt;p style=&#34;text-align: center;&#34;&gt;
  &lt;p&gt;
     
  &lt;/p&gt;
  

&lt;p&gt;&lt;h1&gt;
    &lt;strong&gt;Orbot Tutorial&lt;/strong&gt;
  &lt;/h1&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    With our Android app Orbot, browsing the web securely and safely through Tor has been a piece of cake for a while now. But we just created &lt;a title=&#34;How to Orbot Tutorial&#34; href=&#34;https://guardianproject.info/howto/browsefreely&#34; target=&#34;_blank&#34;&gt;an interactive tutorial to get you started&lt;/a&gt; and show how easy it is circumvent censorship, even if the Google Play Store is blocking direct access to our app.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    The tools themselves are getting smarter too. A new tool from &lt;a title=&#34;Tor Project&#34; href=&#34;https://www.torproject.org/&#34; target=&#34;_blank&#34;&gt;Tor&lt;/a&gt;, called &lt;a title=&#34;Tor Project Obfsproxy&#34; href=&#34;http://www.torproject.org/projects/obfsproxy.html.en&#34; target=&#34;_blank&#34;&gt;Pluggable Transports&lt;/a&gt;, hides your Tor traffic to look like regular Internet traffic, making it even easier for Tor users to stay ahead of surveillance and censorship. To use this new tool with Orbot, just follow the instructions on &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/04/How-to-browse-freely-on-your-phone-if-your-internet-is-blocked.pdf&#34; target=&#34;_blank&#34;&gt;our new one-page guide&lt;/a&gt; (and &lt;a title=&#34;How to browse freely on your phone if your internet is blocked - Farsi&#34; href=&#34;https://guardianproject.info/wp-content/uploads/2013/04/How-to-browse-freely-on-your-phone-if-your-internet-is-blocked-Farsi.pdf&#34; target=&#34;_blank&#34;&gt;in Farsi&lt;/a&gt;) and you’re all set! For a more in-depth guide to using Orbot, watch our &lt;a href=&#34;https://www.youtube.com/watch?v=Dcf5sh99ze0&#34;&gt;video tutorial&lt;/a&gt; (now in English and Arabic).
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;div id=&#34;attachment_3585&#34; style=&#34;width: 250px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
    &lt;a href=&#34;https://guardianproject.info/howto/browsefreely&#34; target=&#34;_blank&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-3585&#34; class=&#34; wp-image-3585&#34; alt=&#34;orbot galaxy s3&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/04/galaxy15.png&#34; width=&#34;240&#34; height=&#34;361&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/04/galaxy15.png 400w, https://guardianproject.info/wp-content/uploads/2013/04/galaxy15-199x300.png 199w&#34; sizes=&#34;(max-width: 240px) 100vw, 240px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p id=&amp;quot;caption-attachment-3585&amp;quot; class=&amp;quot;wp-caption-text&amp;quot;&amp;gt;
  So you want to escape censorship?
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;p style=&#34;text-align: center;&#34;&gt;
    &lt;p&gt;
      As we continue to grow our team and create new tools, we need your feedback!  Please tell us what we can do to go from security awareness training to a full-on security awareness party. Feel free to leave a comment on this post or tell us how we can make things easier through our &lt;a href=&#34;https://guardianproject.info/contact/&#34;&gt;contact page&lt;/a&gt;. You can also let us know about any upcoming parties that we should be attending.
    &lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;
  &amp;lt;i&amp;gt;This post is partially a response to Bruce Schneier’s recent piece: &amp;lt;a title=&amp;quot;Schneier Security Awareness Training&amp;quot; href=&amp;quot;https://www.schneier.com/blog/archives/2013/03/security_awaren_1.html&amp;quot;&amp;gt;Security Awareness Training&amp;lt;/a&amp;gt;&amp;lt;/i&amp;gt;.
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ToFU/PoP in your Android App!  (a.k.a. extending Orlib to communicate over Tor)</title>
      <link>https://guardianproject.github.io/info/2012/09/20/tofu/pop-in-your-android-app-a.k.a.-extending-orlib-to-communicate-over-tor/</link>
      <pubDate>Thu, 20 Sep 2012 15:17:36 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2012/09/20/tofu/pop-in-your-android-app-a.k.a.-extending-orlib-to-communicate-over-tor/</guid>
      <description>

&lt;p&gt;In doing my research for InformaCam, I learned a couple of neat tricks for getting an app to communicate over Tor. Here’s a how-to for app developers to use depending on your threat model, and how you have your web server set-up. Enjoy, and please post your comments/questions/suggestions below…&lt;/p&gt;

&lt;h2 id=&#34;before-we-begin&#34;&gt;Before we begin…&lt;/h2&gt;

&lt;p&gt;You’re going to need some basic stuff up-and-running for this to work. Before you get coding, make sure you have the following:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Your Android device should have:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Orbot downloaded and running&lt;/li&gt;
&lt;li&gt;An encrypted data store to save keys, certificates, and addresses to, such as Guardian Project’s &lt;a href=&#34;https://github.com/guardianproject/sqlcipher-android&#34; target=&#34;_blank&#34;&gt;SQLCipher&lt;/a&gt; or &lt;a href=&#34;https://github.com/guardianproject/IOCipher&#34; target=&#34;_blank&#34;&gt;IOCipher&lt;/a&gt;. (SQLCipher is a database; if you want to have records for each hidden service such as “Onion Address,” “Certificate,” “Display Name,” etc. this is the model you can use. IOCipher is used like an encrypted java.io.File partition; you could easily store certificates in a java keystore with a .jks extension, and save a text file with a list of onion addresses. However you manage your backend is up to you.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Your server should have:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A lightweight web server. According to the Tor documentation, smaller servers like LightTPD are preferred over Apache since there’s less of an opportunity to accidentally reveal your IP address in error logs or publicly-accessible config files.&lt;/li&gt;
&lt;li&gt;Tor set up and running a hidden service&lt;/li&gt;
&lt;li&gt;Your own self-signed SSL certificate for your server. (Directions can be found &lt;a href=&#34;http://www.digicert.com/ssl-certificate-installation-lighttpd.htm&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;For extra credit,&lt;/em&gt; you can set yourself up your own certificate authority. This can be used to sign client authentication keys (how you distribute them to users is also up to you) and directions to do this can be found &lt;a href=&#34;http://it.toolbox.com/blogs/securitymonkey/howto-securing-a-website-with-client-ssl-certificates-11500&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ok-let-s-get-coding&#34;&gt;Ok, let’s get coding!&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use case: I don’t actually need Tor support, but I do want to add my custom SSL certificate to the app’s trust chain.&lt;/strong&gt;&lt;/p&gt;
What you need to do this is to create a custom Trust Manager, and use it when you instantiate your SSL connection.&lt;/p&gt;

&lt;p&gt;In this example, the trust manager loads (or creates, if it’s the first time use) your encrypted keystore. When your app makes a request to your web server, the Trust Manager will first check to see if the host name is in your “white list” (either in your SQLite database or in the encrypted flat file you created.) If that checks out, the Trust Manager will add the X509 certificate to your encrypted keystore (if it doesn’t exist there already.) I’ve omitted the part of the code where you load up your keystore, and where you save any changes to it; you can do that on your own, depending on how you have it set up.&lt;/p&gt;

&lt;p&gt;The following code I cribbed heavily from &lt;a href=&#34;https://github.com/ge0rg/MemorizingTrustManager&#34; target=&#34;_blank&#34;&gt;ge0rg’s memorizing trust manager&lt;/a&gt;. Please have a look at that, too, and thank the guy for his great work!&lt;/p&gt;

&lt;p&gt;&lt;pre style=&#34;font-size:0.8em;&#34;&gt;public class MyTrustManager implements X509TrustManager {
private KeyStore keyStore;
private X509TrustManager defaultTrustManager;
private X509TrustManager appTrustManager;&lt;/p&gt;

&lt;p&gt;byte[] keyStored = null;
String pwd;&lt;/p&gt;

&lt;p&gt;public MyTrustManager() {
    loadKeyStore();&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;defaultTrustManager = getTrustManager(false);
appTrustManager = getTrustManager(true);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;private X509TrustManager getTrustManager(boolean withKeystore) {
    try {
        TrustManagerFactory tmf = TrustManagerFactory.getInstance(&amp;ldquo;X509&amp;rdquo;);
        if(withKeystore)
            tmf.init(keyStore);
        else
            tmf.init((KeyStore) null);
        for(TrustManager t : tmf.getTrustManagers())
            if(t instanceof X509TrustManager)
                return (X509TrustManager) t;
    } catch (KeyStoreException e) {
        Log.e(LOG, &amp;ldquo;key store exception: &amp;ldquo; + e.toString());
    } catch (NoSuchAlgorithmException e) {
        Log.e(LOG, &amp;ldquo;no such algo exception: &amp;ldquo; + e.toString());
    }
    return null;
}&lt;/p&gt;

&lt;p&gt;private void loadKeyStore() {
    //TODO: this is where you load up your keystore and store the bytes into the keyStored field if neccessary.
    try {
        keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
    } catch(KeyStoreException e) {
        Log.e(LOG, &amp;ldquo;key store exception: &amp;ldquo; + e.toString());
    }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;try {
    keyStore.load(null, null);
    if(keyStored != null)
        keyStore.load(new ByteArrayInputStream(keyStored), pwd.toCharArray());


} catch(CertificateException e) {
    Log.e(LOG, &amp;quot;certificate exception: &amp;quot; + e.toString());
} catch (NoSuchAlgorithmException e) {
    Log.e(LOG, &amp;quot;no such algo exception: &amp;quot; + e.toString());
} catch (IOException e) {
    Log.e(LOG, &amp;quot;IOException: &amp;quot; + e.toString());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;private void storeCertificate(X509Certificate[] chain) {
    try {
        for(X509Certificate cert : chain) {
            keyStore.setCertificateEntry(cert.getSubjectDN().toString(), cert);
        }
    } catch(KeyStoreException e) {
        Log.e(LOG, &amp;ldquo;keystore exception: &amp;ldquo; + e.toString());
    }&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;appTrustManager = getTrustManager(true);
try {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    keyStore.store(baos, pwd.toCharArray());
    updateKeyStore(baos.toByteArray());
    Log.d(LOG, &amp;quot;new key encountered!  length: &amp;quot; + baos.size());
} catch(KeyStoreException e) {
    Log.e(LOG, &amp;quot;keystore exception: &amp;quot; + e.toString());  
} catch (NoSuchAlgorithmException e) {
    Log.e(LOG, &amp;quot;no such algo exception: &amp;quot; + e.toString());
} catch (IOException e) {
    Log.e(LOG, &amp;quot;IOException: &amp;quot; + e.toString());
} catch (CertificateException e) {
    Log.e(LOG, &amp;quot;Certificate Exception: &amp;quot; + e.toString());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;private void updateKeyStore(byte[] newKey) {
    // TODO: this is where YOU update your own keystore if you need to (ie, if it&amp;rsquo;s in an SQLite database)
}&lt;/p&gt;

&lt;p&gt;private boolean isCertKnown(X509Certificate cert) {
    try {
        return keyStore.getCertificateAlias(cert) != null;
    } catch(KeyStoreException e) {
        return false;
    }
}&lt;/p&gt;

&lt;p&gt;private boolean isExpiredException(Throwable e) {
    do {
        if(e instanceof CertificateExpiredException)
            return true;
        e = e.getCause();
    } while(e != null);
    return false;
}&lt;/p&gt;

&lt;p&gt;private void checkCertificateTrusted(X509Certificate[] chain, String authType, boolean isServer) throws CertificateException {
    try {
        if(isServer)
            appTrustManager.checkServerTrusted(chain, authType);
        else
            appTrustManager.checkClientTrusted(chain, authType);
    } catch(CertificateException e) {
        if(isExpiredException(e))
            return;
        if(isCertKnown(chain[0]))
            return;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    try {
        if(isServer)
            defaultTrustManager.checkServerTrusted(chain, authType);
        else
            defaultTrustManager.checkClientTrusted(chain, authType);
    } catch(CertificateException ce) {
        storeCertificate(chain);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;@Override
public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
    checkCertificateTrusted(chain, authType, false);
}&lt;/p&gt;

&lt;p&gt;@Override
public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
    checkCertificateTrusted(chain, authType, true);
}&lt;/p&gt;

&lt;p&gt;@Override
public X509Certificate[] getAcceptedIssuers() {
    return defaultTrustManager.getAcceptedIssuers();
}&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;}
&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Next, you want to initiate an Https request to use this custom Trust Manager. As most of you Android programmers know, you have to do any network stuff on another, non-UI thread. I like to use Future/Callables because it returns the contents of the web site you access into a variable that I can parse. Here’s how you do that for a standard POST request:

&amp;lt;pre style=&amp;quot;font-size:0.8em;&amp;quot;&amp;gt;public static String executeHttpsPost(final String host, final Map&amp;lt;String, Object&amp;gt; postData, final String contentType) {
    ExecutorService ex = Executors.newFixedThreadPool(100);
    Future&amp;lt;String&amp;gt; future = ex.submit(new Callable&amp;lt;String&amp;gt;() {
        String result = &amp;quot;FAIL&amp;quot;;
        String HYPHENS = &amp;quot;--&amp;quot;;
        STRING LINE_END = &amp;quot;\r\n&amp;quot;;
        String BOUNDARY = &amp;quot;***7hisIsMyBoUND4rY***&amp;quot;;
        String hostname;

        URL url;
        HttpsURLConnection connection;
        HostnameVerifier hnv;
        DataOutputStream dos;
        SSLContext ssl;

        MyTrustManager itm;

        private void buildQuery() {
            Iterator&amp;lt;Entry&amp;lt;String, Object&amp;gt;&amp;gt; it = postData.entrySet().iterator();

            connection.setRequestProperty(&amp;quot;Content-Type&amp;quot;, &amp;quot;multipart/form-data; boundary=&amp;quot; + BOUNDARY);
            StringBuffer sb = new StringBuffer();
            try {
                dos = new DataOutputStream(connection.getOutputStream());
                sb = new StringBuffer();
                while(it.hasNext()) {
                    sb = new StringBuffer();
                    Entry&amp;lt;String, Object&amp;gt; e = it.next();

                    sb.append(HYPHENS + BOUNDARY + LINE_END);

                    sb.append(&amp;quot;Content-Disposition: form-data; name=\&amp;quot;&amp;quot; + e.getKey() + &amp;quot;\&amp;quot;&amp;quot; + LINE_END);
                    sb.append(&amp;quot;Content-Type: &amp;quot; + contentType + &amp;quot;; charset=UTF-8&amp;quot; + LINE_END );
                    sb.append(&amp;quot;Cache-Control: no-cache&amp;quot; + LINE_END + LINE_END);
                    sb.append(String.valueOf(e.getValue()) + LINE_END);
                    dos.writeBytes(sb.toString());
                }

                dos.writeBytes(HYPHENS + BOUNDARY + HYPHENS + LINE_END);

                dos.flush();
                dos.close();

            } catch (IOException e) {
                Log.e(LOG, e.toString());
                e.printStackTrace();
            }
        }

        @Override
        public String call() throws Exception {
            hostname = host.split(&amp;quot;/&amp;quot;)[0];
            url = new URL(&amp;quot;https://&amp;quot; + host);

            hnv = new HostnameVerifier() {
                @Override
                public boolean verify(String hn, SSLSession session) {
                    if(hn.equals(hostname))
                        return true;
                    else
                        return false;
                }
            };

            itm = new MyTrustManager();

            ssl = SSLContext.getInstance(&amp;quot;TLS&amp;quot;);
            ssl.init(null, new TrustManager[] {itm}, new SecureRandom());

            HttpsURLConnection.setDefaultSSLSocketFactory(ssl.getSocketFactory());
            HttpsURLConnection.setDefaultHostnameVerifier(hnv);

            connection = (HttpsURLConnection) url.openConnection();

            connection.setRequestMethod(&amp;quot;POST&amp;quot;);
            connection.setRequestProperty(&amp;quot;Connection&amp;quot;, &amp;quot;Keep-Alive&amp;quot;);
            connection.setUseCaches(false);
            connection.setDoInput(true);
            connection.setDoOutput(true);

            buildQuery();

            try {
                InputStream is = connection.getInputStream();
                BufferedReader br = new BufferedReader(new InputStreamReader(is));
                String line;
                StringBuffer sb = new StringBuffer();
                while((line = br.readLine()) != null)
                    sb.append(line);
                br.close();
                connection.disconnect();
                result = sb.toString();
            } catch(NullPointerException e) {
                Log.e(LOG, e.toString());
                e.printStackTrace();
            }
            return result;
        }

    });

    try {
        return future.get();
    } catch (InterruptedException e) {
        Log.e(LOG, e.toString());
        e.printStackTrace();
        return null;
    } catch (ExecutionException e) {
        Log.e(LOG, e.toString());
        e.printStackTrace();
        return null;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use case: I have a web server set up with a hidden service running. How can my app access the web site?&lt;/strong&gt;&lt;/p&gt;
Simple! Just make some minor modifications to your SSLContext by adding a proxy! Take the executeHttpsPost method above, and add the following &lt;em&gt;after&lt;/em&gt; the line “HttpsURLConnection.setDefaultHostnameVerifier(hnv);”&lt;/p&gt;

&lt;pre style=&#34;font-size:0.8em;&#34;&gt;Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(&#34;localhost&#34;, 8118));
&lt;/pre&gt;
    

&lt;p&gt;Then, change your declaration of connection to:&lt;/p&gt;

&lt;pre style=&#34;font-size:0.8em;&#34;&gt;connection = (HttpsURLConnection) url.openConnection(proxy);
&lt;/pre&gt;
    

&lt;p&gt;So, as long as your device is also running Orbot (Tor) you can do the same POST over Tor! &lt;/li&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use case: I have a web server that requires client authentification. How can I add a client certificate to the SSL context?&lt;/strong&gt;&lt;/p&gt;
To do this, you’re going to need to add a KeyManager to your SSLContext. As I stated before, getting your client auth key to your app users is up to you (bluetooth, NFC, sneakernet???) but once it’s in there, and visible to your app, install it by adding your own custom KeyManager. In my testing, I added this method below to the MyTrustManager class, simply because it already had access to my encrypted keystore. But you can ostensibly place this anywhere:&lt;/p&gt;

&lt;p&gt;&lt;pre style=&#34;font-size:0.8em;&#34;&gt;public X509KeyManager[] getKeyManagers(byte[] kBytes, String clientCertificatePassword, String keystorePassword) {
KeyManagerFactory kmf = null;
KeyManager[] km = null;
X509KeyManager[] xkm = null;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;try {
    kmf = KeyManagerFactory.getInstance(&amp;ldquo;X509&amp;rdquo;);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;KeyStore xks = KeyStore.getInstance(&amp;quot;PKCS12&amp;quot;);

ByteArrayInputStream bais = new ByteArrayInputStream(kBytes);
xks.load(bais, keystorePassword.toCharArray());

kmf.init(xks, clientCertificatePassword.toCharArray());
km = kmf.getKeyManagers();
xkm = new X509KeyManager[km.length];

for(int x=0;x&amp;gt;km.length;x++) {
    X509KeyManager k = (X509KeyManager) km[x];
    xkm[x] = k;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;} catch (NoSuchAlgorithmException e) {
    Log.e(LOG, e.toString());
    e.printStackTrace();
} catch (UnrecoverableKeyException e) {
    Log.e(LOG, e.toString());
    e.printStackTrace();
} catch (KeyStoreException e) {
    Log.e(LOG, e.toString());
    e.printStackTrace();
} catch (IOException e) {
    Log.e(LOG, e.toString());
    e.printStackTrace();
} catch (CertificateException e) {
    Log.e(LOG, e.toString());
    e.printStackTrace();
}
return xkm;
}
&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Finally, when you instantiate your SSLContext for your POST request, include the returned value of the getKeyManager method as the KeyManager parameter. So, replace this line:

&amp;lt;pre style=&amp;quot;font-size:0.8em;&amp;quot;&amp;gt;ssl.init(null, new TrustManager[] {itm}, new SecureRandom());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;with this:

&amp;lt;pre style=&amp;quot;font-size:0.8em;&amp;quot;&amp;gt;X509KeyManager[] x509KeyManager = getKeyManager(kBytes, clientCertificatePassword, keystorePassword);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ssl.init(x509KeyManager, new TrustManager[] {itm}, new SecureRandom());
&lt;/pre&gt;&lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;That’s it! Good luck hacking, hackers…&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>&lt;!--:en--&gt;Build your own Open Secure Telephony Network, some assembly required&lt;!--:--&gt;</title>
      <link>https://guardianproject.github.io/info/2012/05/17/en-build-your-own-open-secure-telephony-network-some-assembly-required/</link>
      <pubDate>Thu, 17 May 2012 17:13:39 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2012/05/17/en-build-your-own-open-secure-telephony-network-some-assembly-required/</guid>
      <description>&lt;p&gt;&lt;!--:en--&gt;The Open Secure Telephony Network is a standard that defines how to configure a VoIP softswitch with the capability to have secure two-way VoIP conversations if both parties are using the same server. The system requires both backend and frontend components, which makes OSTN is a little different than some of the other Guardian apps. Unlike Gibberbot, there are few public SIP services that support secure signalling for a mobile app to connect with. Notably&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://tanstagi.net&#34;&gt;Tanstagi.net&lt;/a&gt; offers free accounts. But it’s more fun to run your own.&lt;/p&gt;

&lt;p&gt;Ready? Here’s the 12 step program.&lt;/p&gt;

&lt;p&gt;The core server system is what provides user registration and media proxying. The reference application I used is called Freeswitch. It has a plethora of configuration options, so I chose to use a configuration management system called Chef to get everything set correctly.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Bootstrap a Debian server. Right now the only supported platform for an automated installation is Debian 6 “Squeeze”. The adventerous may try to run the cookbook on another platform and do some bug fixing&lt;/li&gt;
&lt;li&gt;Install sudo, curl and git if you don’t already have them. &lt;code&gt;apt-get install sudo curl git-core&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Get a static IP address. This is crucial! Your users will need a place to register from anywhere in the world&lt;/li&gt;
&lt;li&gt;Get a domain name. This is also crucial! Your users will prefer to register to a name rather than an IP address&lt;/li&gt;
&lt;li&gt;Configure a local hostname. This is a dependency for the cookbook to properly configure Freeswitch to serve your custom domain. Unfortunately, this process varies based on OS and has bizarre conventions that make no sense. Just &lt;a href=&#34;http://serverfault.com/questions/331936/setting-the-hostname-fqdn-or-short-name&#34;&gt;follow the instructions&lt;/a&gt; and don’t ask questions. Remember to reboot after changing the hostname&lt;/li&gt;
&lt;li&gt;Install Chef from the &lt;a href=&#34;http://www.opscode.com/chef/install/&#34;&gt;opscode full stack&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Download the &lt;a href=&#34;https://github.com/lazzarello/chef-twelvetone&#34;&gt;freeswitch cookbook&lt;/a&gt; and &lt;a href=&#34;https://github.com/lazzarello/chef-twelvetone/tree/master/cookbooks/freeswitch&#34;&gt;execute it&lt;/a&gt; with chef-solo&lt;/li&gt;
&lt;li&gt;Walk away and have some coffee or a beer, depending on where the sun is relative to you&lt;/li&gt;
&lt;li&gt;When the Chef run is finished, Freeswitch will be up and running. Check with &lt;code&gt;netstat -lntp&lt;/code&gt; you should see freeswitch listening on TCP port 5061&lt;/li&gt;
&lt;li&gt;Create users by running &lt;code&gt;/opt/chef/embedded/bin/ruby /usr/local/freeswitch/scripts/gen_users&lt;/code&gt;. Without arguments, it will print the required parameters. Run it with an offset of 1000 and as many users as you like. Copy the XML files output by the script to &lt;code&gt;/usr/local/freeswitch/conf/directory/default/&lt;/code&gt; The script will also output a file with plaintext passwords so you can provision user handsets. Put this file somewhere safe and encrypted&lt;/li&gt;
&lt;li&gt;Reload the XML into Freeswitch’s memory. &lt;code&gt;/usr/local/freeswitch/bin/fs_cli -x &amp;quot;reloadxml&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Install &lt;a href=&#34;http://nightlies.csipsimple.com/trunk/&#34;&gt;CSipSimple&lt;/a&gt; and configure it to connect to your domain name with the username/password pair&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you make it through these steps, congratulations! You are now a Freeswitch operator. If you’re curious what is behind all of this and why it works, you should read about &lt;a href=&#34;https://en.wikipedia.org/wiki/Session_Initiation_Protocol&#34;&gt;SIP&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/ZRTP&#34;&gt;ZRTP&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Session_Description_Protocol&#34;&gt;SDP&lt;/a&gt;. It’s also worth noting that the Chef cookbook configures the server to act as an SSL &lt;a href=&#34;https://en.wikipedia.org/wiki/Certificate_authority&#34;&gt;Certificate Authority&lt;/a&gt;. This is used for Secure SIP. The current landscape of using commercially signed certificates in Freeswitch is far more complicated than any HTTPS web server you may have worked with.&lt;/p&gt;

&lt;p&gt;If you’d like to get help from me or another Guardian Project hacker, you can create issues &lt;a href=&#34;https://dev.guardianproject.info/projects/ostn&#34;&gt;in our tracker&lt;/a&gt; and message SteeleNivenson on Freenode or OFTC in channel #guardianproject. Oh yeah, and there’s Twitter @leeazzarello.&lt;!--:--&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Orbot Your Twitter!</title>
      <link>https://guardianproject.github.io/info/2012/05/02/orbot-your-twitter/</link>
      <pubDate>Wed, 02 May 2012 17:19:27 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2012/05/02/orbot-your-twitter/</guid>
      <description>&lt;p&gt;In some ways, Twitter is the perfect application to run over the &lt;a href=&#34;https://torproject.org&#34;&gt;Tor network&lt;/a&gt;. It works with small bits of data, it is asynchronous, works naturally in a “store and forward” queue model, and in general, has a decent amount of &lt;a href=&#34;https://twitter.com/about/security&#34;&gt;default security built-in&lt;/a&gt; through HTTP/S support and OAuth. Compared to the problem-child of the open web, which often involves large websites, streaming video, flash embeds, and malicious javascript, Twitter is a nearly perfect candidate for use over a secure, anonymous (but sometimes high latency) network. Add to the fact that Twitter is often &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_websites_blocked_in_the_People&#39;s_Republic_of_China&#34;&gt;blocked or monitored in many countries&lt;/a&gt;who do not care for free speech and human rights, and it becomes almost a necessity that you use it with a service like Tor.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;WARNING AND DISCLAIMER: Twitter for Android is proprietary, closed-source software. Details of the implementation of proxy support have not been publicly disclosed or audited by a third-party at this time. In particular, resolution of hostnames via DNS may not be properly routed through Tor (this is a common issue with proxied software). In addition, through other permissions that Twitter for Android may have you on your device, there may be a strong ability to correlate identity between your registered Google Account and your activities on Twitter.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Until recently, in order to run &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.twitter.android&amp;amp;hl=en&#34;&gt;Twitter for Android&lt;/a&gt; through Tor for Android, aka &lt;a href=&#34;https://guardianproject.info/apps/orbot/&#34;&gt;Orbot&lt;/a&gt;, you would need to &lt;a href=&#34;http://shortfuse.org/?page_id=2&#34;&gt;root your device&lt;/a&gt;, or deal with complex proxy settings. However, as of last week, Twitter became &lt;em&gt;one of the first and only major apps (aka 100M+ installs!)&lt;/em&gt; to &lt;a href=&#34;https://twitter.com/#!/moxie/status/195622774348324864&#34;&gt;add direct proxy support into their app&lt;/a&gt;, in a very easy to find and activate way.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;UPDATE June 13, 2012: After a recent audit, we now recommend turning off the “Sync Data” option through Twitter’s Settings menu, under your registered Twitter account. This will stop push notifications from being sent, which are currently not handled by Orbot/Tor.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install and activate Orbot, open Twitter, tap the gear icon on the home screen.&lt;/li&gt;
&lt;li&gt;Check the “proxy” box, enter ‘localhost’ and ‘8118’.&lt;/li&gt;
&lt;li&gt;Open your account settings, and disable the “Sync Data” option to stop push notifications which cannot be proxied through Orbot/Tor.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;See the screenshots below for a full walkthrough, and please spread the word to those in need.&lt;/p&gt;

&lt;div id=&#39;gallery-7&#39; class=&#39;gallery galleryid-2041 gallery-columns-3 gallery-size-thumbnail&#39;&gt;
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2012/05/device-2012-05-02-165201.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/05/device-2012-05-02-165201-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; aria-describedby=&#34;gallery-7-2047&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
    
    &lt;dd class=&#39;wp-caption-text gallery-caption&#39; id=&#39;gallery-7-2047&#39;&gt;
      Orbot and Twitter now work together easily, thanks to new simple proxy settings feature in Twitter for Android
    &lt;/dd&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2012/05/device-2012-05-02-164620.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/05/device-2012-05-02-164620-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; aria-describedby=&#34;gallery-7-2042&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
    
    &lt;dd class=&#39;wp-caption-text gallery-caption&#39; id=&#39;gallery-7-2042&#39;&gt;
      When you setup Orbot, your device does not need root or “superuser” access in order to work with Twitter, or with other apps like Gibberbot (Chat) or ORWeb (safe web access)
    &lt;/dd&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2012/05/device-2012-05-02-164656.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/05/device-2012-05-02-164656-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; aria-describedby=&#34;gallery-7-2043&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
    
    &lt;dd class=&#39;wp-caption-text gallery-caption&#39; id=&#39;gallery-7-2043&#39;&gt;
      Orbot by default provides an HTTP proxy server on “localhost” and port 8118
    &lt;/dd&gt;
  &lt;/dl&gt;
  
  &lt;br style=&#34;clear: both&#34; /&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2012/05/device-2012-05-02-164743.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/05/device-2012-05-02-164743-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; aria-describedby=&#34;gallery-7-2044&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
    
    &lt;dd class=&#39;wp-caption-text gallery-caption&#39; id=&#39;gallery-7-2044&#39;&gt;
      In the Twitter app account sign in screen, click the small gear icon to open proxy settings
    &lt;/dd&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2012/05/device-2012-05-02-164753.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/05/device-2012-05-02-164753-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; aria-describedby=&#34;gallery-7-2045&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
    
    &lt;dd class=&#39;wp-caption-text gallery-caption&#39; id=&#39;gallery-7-2045&#39;&gt;
      Enable the proxy, set Proxy Host to ‘localhost’ and Proxy Port to ‘8118’
    &lt;/dd&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2012/05/device-2012-05-02-164807.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/05/device-2012-05-02-164807-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; aria-describedby=&#34;gallery-7-2046&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
    
    &lt;dd class=&#39;wp-caption-text gallery-caption&#39; id=&#39;gallery-7-2046&#39;&gt;
      You can also modify Proxy settings in the app via Menu-&gt;Settings
    &lt;/dd&gt;
  &lt;/dl&gt;
  
  &lt;br style=&#34;clear: both&#34; /&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2012/05/device-2012-05-02-170011.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/05/device-2012-05-02-170011-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; aria-describedby=&#34;gallery-7-2054&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
    
    &lt;dd class=&#39;wp-caption-text gallery-caption&#39; id=&#39;gallery-7-2054&#39;&gt;
      You can use the app just the same as before, but now through Tor!
    &lt;/dd&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2012/05/device-2012-05-02-170043.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/05/device-2012-05-02-170043-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; aria-describedby=&#34;gallery-7-2055&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
    
    &lt;dd class=&#39;wp-caption-text gallery-caption&#39; id=&#39;gallery-7-2055&#39;&gt;
      With searches, you may need to try a few times for them to go through
    &lt;/dd&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2012/05/device-2012-05-02-170118.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/05/device-2012-05-02-170118-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; aria-describedby=&#34;gallery-7-2056&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
    
    &lt;dd class=&#39;wp-caption-text gallery-caption&#39; id=&#39;gallery-7-2056&#39;&gt;
      #OrbotYourTwitter!
    &lt;/dd&gt;
  &lt;/dl&gt;
  
  &lt;br style=&#34;clear: both&#34; /&gt;
&lt;/div&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;Learn more and install apps&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Twitter for Android: &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.twitter.android&amp;amp;hl=en&#34;&gt;Google Play&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Orbot: Tor for Android: &lt;a href=&#34;https://play.google.com/store/apps/details?id=org.torproject.android&amp;amp;&#34;&gt;Google Play&lt;/a&gt; or &lt;a href=&#34;https://www.torproject.org/docs/android.html.en&#34;&gt;direct download via TorProject.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Learn more about &lt;a href=&#34;https://www.torproject.org/about/overview.html.en&#34;&gt;how Tor works&lt;/a&gt; or just watch the video below!&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Announcing ObscuraCam v1 – Enhance Your Visual Privacy!</title>
      <link>https://guardianproject.github.io/info/2011/06/23/announcing-obscuracam-v1-enhance-your-visual-privacy/</link>
      <pubDate>Thu, 23 Jun 2011 21:28:20 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2011/06/23/announcing-obscuracam-v1-enhance-your-visual-privacy/</guid>
      <description>

&lt;p&gt;We’re very happy to announce the beta release of &lt;a href=&#34;https://guardianproject.info/apps/securecam/&#34;&gt;ObscuraCam&lt;/a&gt; for Android. This is the first release from the SecureSmartCam project, a partnership with &lt;a href=&#34;https://www.witness.org/&#34;&gt;WITNESS&lt;/a&gt;, a leading human rights video advocacy and training organization. This is the result of an &lt;a href=&#34;https://github.com/guardianproject/SecureSmartCam/tree/obscurav1&#34;&gt;open-source development cycle&lt;/a&gt;, comprised of multiple sprints (and branches), that took place over the last five months. This “v1” release is just the first step towards the complete vision of the project.&lt;/p&gt;

&lt;p&gt;The goal of the SecureSmartCam project to to design and develop a new type of smartphone camera app that makes it simple for the user to respect the visual privacy, anonymity and consent of the subjects they photograph or record, while also enhancing their own ability to control the personally identifiable data stored inside that photo or video. Also, we think an app that allows you to pixelize your friends, disguise their faces and otherwise defend their privacy just a little bit, is a lot of fun and helps raise awareness about an important issue. In this first release we have focused on ‘obscura’ by optimizing the workflow of identity obfuscation in still images. Future releases will look at ‘informa,’ the process of properly gaining and recording informed consent from subjects, while also moving to video.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2011/06/teamdinner.jpg&#34;&gt;&lt;img class=&#34;size-full wp-image-1199 alignnone&#34; title=&#34;teamdinner&#34; alt=&#34;&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2011/06/teamdinner.jpg&#34; width=&#34;450&#34; height=&#34;337&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2011/06/teamdinner.jpg 640w, https://guardianproject.info/wp-content/uploads/2011/06/teamdinner-300x225.jpg 300w&#34; sizes=&#34;(max-width: 450px) 100vw, 450px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;quick-download-links&#34;&gt;Quick Download Links&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://market.android.com/details?id=org.witness.sscphase1&amp;amp;feature=search_result&#34;&gt;&lt;img class=&#34;alignleft&#34; style=&#34;margin: 3px;&#34; title=&#34;obscura_market_qr&#34; alt=&#34;&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2011/06/obscura_market_qr.jpg&#34; width=&#34;130&#34; height=&#34;130&#34; /&gt;&lt;/a&gt;For those of you who just want to get to it, head over to the &lt;a href=&#34;https://market.android.com/details?id=org.witness.sscphase1&amp;amp;feature=search_result&#34;&gt;Android Market&lt;/a&gt; to grab the latest version of the app. You can also scan the QR code to the left, and it will take you in that direction.&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2011/06/obscura_market_qr.jpg&#34;&gt;&lt;br /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For those without access to the Android Market, you can get the ObscuraCam.APK file from our &lt;a href=&#34;https://guardianproject.info/builds/Obscura/&#34;&gt;public builds folder&lt;/a&gt;. The official signed release binary is also available &lt;a href=&#34;https://guardianproject.info/downloads/ObscuraCam-1.0.4.2-20110624.apk&#34;&gt;here&lt;/a&gt;. For these options, be sure to check back for updates, because the app will not auto-update itself.&lt;/p&gt;

&lt;h4 id=&#34;the-cameras-everywhere-initiative&#34;&gt;The “Cameras Everywhere” Initiative&lt;/h4&gt;

&lt;p&gt;In January, WITNESS launched their &lt;a href=&#34;https://blog.witness.org/2011/01/cameraseverywhere/&#34;&gt;Cameras Everywhere&lt;/a&gt; initiative, in which they ask:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;As more and more people film people speaking out and taking a stand against human rights crises, how can we protect victims and witnesses and ensure informed consent as much as possible?&lt;/em&gt; &lt;em&gt;As more and more footage circulates from human rights crises around the world, how does powerful footage reach audiences in comprehensible ways that move people to action?&lt;/em&gt; &lt;em&gt;And how do we know how to trust that footage?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;…&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;_Critical issues to address in this realm include safety and security in the use of video; ethical questions raised by the widespread capacity to shoot and circulate human rights video; challenges around the authenticity of video and the preservation of evidence; and the need for effective documentation around the use of video in advocacy.&lt;br /&gt;
_&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Through our collaboration, WITNESS has decided to move beyond just awareness, training and advocacy, and instead help design a next generation of Camera app software that is not just intended to share and capture more, but is meant to allow its operator to stop, think and be empowered to control the media they are capturing.&lt;/p&gt;

&lt;h4 id=&#34;a-primer-on-visual-privacy-and-anonymity&#34;&gt;A Primer on Visual Privacy and Anonymity&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Visual_privacy&#34;&gt;Visual Privacy&lt;/a&gt; is the relationship between collection and dissemination of visual information, the public expectation of privacy, and the legal issues surrounding them. It relates particularly to the increasing presence of large-scale still- and video-camera networks in everyday life. This not only includes those surveillance-oriented networks under the control of corporations and governments, but also applies to the vast new network of citizen-controlled media capture devices such as smartphones and handheld cameras that has created a peer-to-peer, social-networking based surveillance. At the same time that these networks have exploded in size, face detection and recognition technologies have also improved considerably while policy regarding the privacy and fair use of such systems and content, as well as the rights of those imaged by such networks, are topics that are not resolved. What results is a situation in which massive amounts of media are being captured every day with little to no protection of individual rights to privacy or anonymity – something that is especially detrimental to human rights efforts.&lt;/p&gt;

&lt;p&gt;As Sam Gregory of WITNESS &lt;a href=&#34;https://blog.witness.org/2011/02/human-rights-video-privacy-and-visual-anonymity-in-the-facebook-age/&#34;&gt;points out&lt;/a&gt;, most contemporary discussions around anonymous communication on the Internet focus on the data protection side – for instance options for data encryption or censorship circumvention. In the case of media content, a largely unaddressed question arises: what about the rights to anonymity and privacy for those people who appear, intentionally or not, in visual recordings? Visual privacy and anonymity may sound like a contradiction in terms, but people often wish to speak out and to ‘be seen’ while at the same time concealing their face and identifying surroundings. As human rights documentation and organizing increasingly involves media capture, how are people enabled to make purposeful choices about when they speak out and what degrees of anonymity they hold onto for themselves? Conversely, people caught in the background of a video or still may be unaware that they are even being filmed in that moment and have no option to protect themselves – particularly true in mass protest settings where the wave of group solidarity may overwhelm any sense of personal privacy. For those speaking out from marginalized positions, personal safety is a very real risk.&lt;/p&gt;

&lt;p&gt;Some examples where visual privacy and anonymity is being diluted in the name of features or security:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;a href=&#34;http://www.timesonline.co.uk/tol/news/uk/article6913273.ece&#34;&gt;persecution&lt;/a&gt; later faced by bystanders and people who stepped in to film or assist Neda Agha-Soltan as she lay dying during the 2009 Iranian election protests.&lt;/li&gt;
&lt;li&gt;Facebook’s &lt;a href=&#34;http://blog.facebook.com/blog.php?post=467145887130&#34;&gt;opt-out feature&lt;/a&gt; for auto-detection and tagging of faces&lt;/li&gt;
&lt;li&gt;British Columbia’s privacy watchdog &lt;a href=&#34;http://www.metronews.ca/vancouver/local/article/897762--province-s-privacy-watchdog-oks-facial-recognition-to-identify-rioters&#34;&gt;OKs the use of facial recognition technology&lt;/a&gt; to identify rioters from video and still images of Vancouver’s 2011 hockey riots.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.viewdle.com/products/mobile/index.html&#34;&gt;Viewdle’s Social Camera&lt;/a&gt; automatically tags your friends in photos based on the social networking profile pictures they have published&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While some of these examples might seem harmless, or even a useful feature for law enforcement, the main issue is that the subjects of these photos and videos are never asked if they wish to participate in them, not to mention whether they want their photo published online in the first place. The permanence of media on the Web means that any uploaded content can be poured over again and again to identify individuals – either by old-fashioned investigative techniques, but crowd-sourcing, or by face detection /recognition software.&lt;/p&gt;

&lt;h4 id=&#34;how-obscuracam-helps&#34;&gt;How ObscuraCam Helps&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2011/06/01_home.png&#34;&gt;&lt;img class=&#34;alignleft&#34; style=&#34;margin: 3px;&#34; title=&#34;01_home&#34; alt=&#34;&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2011/06/01_home-180x300.png&#34; width=&#34;180&#34; height=&#34;300&#34; /&gt;&lt;/a&gt;Part of the problem currently surrounding visual privacy and anonymity is the fact that many of the tools and applications that people use on an everyday basis do not have features built in to protect privacy. As a result, everyone with a smartphone, tablet or laptop – not to mention an actual video camera! – captures raw, unedited content that exposes the identities of participants and bystanders present at sensitive events or activities.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/apps/securecam/&#34;&gt;ObscuraCam&lt;/a&gt; is a mobile application for Android that makes it easy for anyone to protect the identity of individuals or groups represented in their photos by building obfuscation and redaction directly into the app. It can be used on photos taken directly from the app itself, or on any photo that your mobile device has access to, including local memory card images or linked Picasa albums. By moving a usually cumbersome post-production process into the daily workflow of those capturing sensitive images, it’s our hope that visual privacy will be respected when it really matters.&lt;/p&gt;

&lt;h4 id=&#34;using-obscuracam&#34;&gt;Using ObscuraCam&lt;/h4&gt;

&lt;p&gt;ObscuraCam features a simple, touch-based user interface for easy manipulation and redaction of images, as well as an automated removal of identifying metadata stored in the photo itself. The following steps walk through the process of capturing and sharing an obscured photo using ObscuraCam.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;From the application home page, choose to either capture a new image or choose an existing image from your existing collections. These options just launch your standard Camera and Gallery application. When the photo is imported, identifying EXIF metadata stored in the file itself, such as GPS location, camera make and model or timestamp, will be removed.&lt;/li&gt;
&lt;li&gt;After you capture or open an image with ObscuraCam, it is automatically scanned to detect faces. Any faces detected are marked as tagged regions in an image, and the user is able to create as many additional tagged regions as they wish – either via the menu or by long-pressing the desired region. By default, tagged regions are set to be obscured via pixelation.&lt;/li&gt;
&lt;li&gt;Once a tagged region has been created, the user can interact with that region by simply touching it to bring up a contextual menu.&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2011/06/02_autodetect.png&#34;&gt;&lt;img class=&#34;aligncenter size-medium wp-image-1171&#34; title=&#34;02_autodetect&#34; alt=&#34;&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2011/06/02_autodetect-300x180.png&#34; width=&#34;300&#34; height=&#34;180&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2011/06/02_autodetect-300x180.png 300w, https://guardianproject.info/wp-content/uploads/2011/06/02_autodetect.png 800w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Options available from the contextual tagging menu include:

&lt;ul&gt;
&lt;li&gt;Edit – select to scale and move tagged regions&lt;/li&gt;
&lt;li&gt;Redact – select to fully redact tagged region and replace with black space&lt;/li&gt;
&lt;li&gt;Pixelate – select to selectively obfuscate identities of persons or situations&lt;/li&gt;
&lt;li&gt;bgPixelate – select to easily obfuscate everything BUT the tagged region&lt;/li&gt;
&lt;li&gt;Mask – select to pin a set of ‘groucho marks’ glasses on the tagged region – not only a bit of fun, but useful for quickly defeating facial recognition schemes.&lt;/li&gt;
&lt;li&gt;Delete – delete the current tagged region&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Once you’re done selecting and obfuscating tagged regions, you can use the options from the main application menu to see a preview of the finished image, save it to your local memory, or share the picture with any application on your handset that is configured to accept images. This includes applications like Facebook, Twitter, or the default Messaging app. &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2011/06/09_processed.png&#34;&gt;&lt;img class=&#34;aligncenter size-medium wp-image-1172&#34; title=&#34;09_processed&#34; alt=&#34;&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2011/06/09_processed-180x300.png&#34; width=&#34;180&#34; height=&#34;300&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2011/06/09_processed-180x300.png 180w, https://guardianproject.info/wp-content/uploads/2011/06/09_processed.png 480w&#34; sizes=&#34;(max-width: 180px) 100vw, 180px&#34; /&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;share-with-us-and-save-your-face&#34;&gt;Share With Us and “Save Your Face”!&lt;/h4&gt;

&lt;p&gt;As impediments of visual privacy continue to expand, help us get the word out that we can take back control over our online identities with ObscuraCam! We’ve set up a &lt;a href=&#34;https://www.facebook.com/pages/ObscuraCam-Saving-Your-Social-Face/110765659013081&#34;&gt;Facebook Page&lt;/a&gt; where you can share your creations with us, and with eachother!&lt;/p&gt;

&lt;h4 id=&#34;source-code-issue-reporting&#34;&gt;Source Code &amp;amp; Issue Reporting&lt;/h4&gt;

&lt;p&gt;We’re big fans of open source and living in public. As consistent with all our projects, source code for the SecureSmartCam project, along with the ObscuraCam release, is available online at &lt;a href=&#34;https://github.com/guardianproject/SecureSmartCam&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We also use GitHub to manage our development milestones and active bugs / issues. If you encounter any bugs or issues when testing out this beta build, please report them directly to us in the comments below or by filing directly on the &lt;a href=&#34;https://github.com/guardianproject/SecureSmartCam/issues&#34;&gt;Issues&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create an encrypted file system on Android with LUKS</title>
      <link>https://guardianproject.github.io/info/2011/02/02/create-an-encrypted-file-system-on-android-with-luks/</link>
      <pubDate>Wed, 02 Feb 2011 23:29:15 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2011/02/02/create-an-encrypted-file-system-on-android-with-luks/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://code.google.com/p/cryptsetup/&#34;&gt;LUKS&lt;/a&gt; is the standard for Linux hard disk encryption. By providing a standard on-disk-format, it not only facilitates compatibility among distributions, but also provides secure management of multiple user passwords.&lt;/p&gt;

&lt;p&gt;Building off the work from other &lt;a href=&#34;https://androidvoid.wordpress.com/2009/09/30/android-encryption-using-cryptsetup-and-luks/&#34;&gt;great&lt;/a&gt; &lt;a href=&#34;http://forum.xda-developers.com/showthread.php?t=866131&#34;&gt;sources&lt;/a&gt;, the Guardian Project hack team decided to take a crack at porting LUKS to Android recently, with the goal of creating a proof of concept build process that can be easily adapted to future projects.&lt;/p&gt;

&lt;p&gt;On our stock Guardian hardware (rooted NexusOne running &lt;a href=&#34;http://www.cyanogenmod.com/&#34;&gt;CyanogenMod&lt;/a&gt;) we were able to create a 50MB “secretagentman.mp3” file on the device sdcard to store our encrypted filesystem. We think the possibilities for enhanced privacy here are great: to the average phone snooper, this would appear as just another harmless media file on your device storage!&lt;/p&gt;

&lt;p&gt;You can give it a shot by following the instructions over at the project &lt;a href=&#34;https://github.com/guardianproject/LUKS/wiki&#34;&gt;wiki&lt;/a&gt;. Note that the build process requires setting up the &lt;a href=&#34;http://developer.android.com/sdk/ndk/index.html&#34;&gt;Android NDK&lt;/a&gt; on your machine, and the current setup process must be done through adb shell or terminal, requiring root permissions. Work on a GUI is just getting started.&lt;/p&gt;

&lt;p&gt;As usual we encourage those wishing to get involved to check out our projects on &lt;a href=&#34;https://github.com/guardianproject&#34;&gt;Git&lt;/a&gt;, &lt;a href=&#34;https://guardianproject.info/contact/&#34;&gt;get in touch&lt;/a&gt; with us, and join us on IRC at #guardianproject on &lt;a href=&#34;http://freenode.net/irc_servers.shtml&#34;&gt;freenode&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SECURED: T-Mobile myTouch 4G gets Guardian</title>
      <link>https://guardianproject.github.io/info/2010/11/09/secured-t-mobile-mytouch-4g-gets-guardian/</link>
      <pubDate>Tue, 09 Nov 2010 23:26:59 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2010/11/09/secured-t-mobile-mytouch-4g-gets-guardian/</guid>
      <description>&lt;p&gt;One of the services we provide at the Guardian Project is taking any off the shelf Android phone and setting it up to be generally more secure, privacy minded and updated with a powerful suite of trusted apps. Today we were excited to get our hands on a myTouch 4G, manufactured by HTC and sold by T-Mobile. Really beautiful piece of hardware, and once we got our hands on it, a powerhouse of encrypted, anonymous and circumventing communications.&lt;/p&gt;

&lt;p&gt;Brief list of our current trusted app suite (not all are open-source but they are tested/vetted as best we can otherwise): Orbot (Tor on Android), Firefox with ProxyMob add-on, TextSecure, OtRChat, RedPhone, SipDroid with VPN, DroidTracker, Norton Mobile Security Suite, Android Privacy Guard with K9Mail for GPG, OISafe and OINotes for locally encrypted data collection and more!&lt;/p&gt;

&lt;p&gt;All in all, through our own development work and the larger Android security community, things are really coming together. With hardware like the 4G, it can all be put into a shiny, blazing package.&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;display: block; margin-right: auto; margin-left: auto;&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2010/11/wpid-IMG_20101109_174732.jpg&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img style=&#34;display: block; margin-right: auto; margin-left: auto;&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2010/11/wpid-IMG_20101109_174618.jpg&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How To: Lockdown Your Mobile E-Mail</title>
      <link>https://guardianproject.github.io/info/2010/07/09/how-to-lockdown-your-mobile-e-mail/</link>
      <pubDate>Fri, 09 Jul 2010 11:00:25 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2010/07/09/how-to-lockdown-your-mobile-e-mail/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Update 2015-04-27&lt;/strong&gt;: _We now recommend &lt;a href=&#34;http://www.openkeychain.org/&#34; target=&#34;_blank&#34;&gt;OpenKeychain&lt;/a&gt; over APG, the app described in this blog post. The set up is drastically easier, so you probably don’t even need this HOWTO anymore. Start by downloading K-9 and &lt;a href=&#34;http://www.openkeychain.org/&#34; target=&#34;_blank&#34;&gt;OpenKeychain&lt;/a&gt;, then go into OpenKeychain and start the config there._&lt;/p&gt;

&lt;p&gt;Over the past few years it’s become &lt;a href=&#34;https://www.youtube.com/watch?v=Gm8NdNy4wOM&#34;&gt;increasingly popular&lt;/a&gt; to sound the call that ‘&lt;a href=&#34;http://www.pcmag.com/article2/0,2817,2343209,00.asp&#34; title=&#34;dead&#34;&gt;email is dead&lt;/a&gt;{#y8a0}.’ And while many complementary forms of synchronous and asynchronous communication – from IM to social networking – have evolved since email first came on the scene, it’s hard to see email suddenly disappearing from its role as the most important way organizations communicate. I expect to be scooting around on my &lt;a href=&#34;https://en.wikipedia.org/wiki/Hoverboard&#34;&gt;hoverboard&lt;/a&gt; by the time email goes the way of the dinosaur.&lt;/p&gt;

&lt;p&gt;Unfortunately, many of the protocols involved in sending and receiving e-mail are not considered secure – in the sense that they are vulnerable to eavesdropping. Simple Mail Transport Protocol (SMTP) – the Internet standard for e-mail transmission across IP networks  most commonly used by client applications for sending messages to a mail server for relaying – is typically implemented without any type of transport encryption. Internet Message Access Protocol (IMAP) and Post Office Protocol (POP) suffer from the same eavesdropping issues as SMTP when implemented without transport encryption. Even when SMTP is implemented with transport encryption it does not, by default, require the authentication of e-mail message senders. As a result, mail servers cannot be sure that the senders of messages are really who they claim to be. And even though POP and IMAP require users to authenticate, messages are sent and delivered using SMTP.&lt;/p&gt;

&lt;p&gt;The result is a situation where the &lt;em&gt;recipient&lt;/em&gt; of an e-mail message can be positively identified but the &lt;em&gt;sender&lt;/em&gt; cannot. Along with the eavesdropping concerns mentioned at the top of the paragraph, this is an alarming state of affairs. Imagine if the same were true of snail mail – there would be rioting in the streets! Fortunately there has been a lot of great work done to combat these fears – the main issue being that the problem itself is  still one  that is often ignored or not fully understood by the layperson. As secure solutions for mobile platforms gain momentum, we’re hoping to change things.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href=&#34;https://en.wikipedia.org/wiki/Pretty_Good_Privacy#OpenPGP&#34;&gt;OpenPGP&lt;/a&gt;, an IETF standard for encryption and decryption of data. The version of OpenPGP that exists today is the evolution of PGP, which was created in 1991 as a means for secure BBSs communication and message storage (it ironically also stands for “Pretty Good Privacy”). Why do you need PGP? In the words of its inventory, Phil Zimmerman: “&lt;a href=&#34;http://www.spectacle.org/795/byzim.html&#34;&gt;It empowers people to take their privacy into their own hands&lt;/a&gt;.” How it works is a whole other story – one too complex for the purposes of this posting – but we’ll do our  best to scrape the surface quickly. Disclaimer: The following is meant solely as an introduction. There are many people out there who are experts in these topics, and we welcome any and all comments – especially if we misstate or misrepresent anything!&lt;/p&gt;

&lt;p&gt;PGP uses a serial combination of hashing, data compression, symmetric-key cryptography, and, finally, public-key cryptography. From the user’s perspective, it creates two &lt;a href=&#34;https://en.wikipedia.org/wiki/Cryptographic_key&#34;&gt;cryptographic keys&lt;/a&gt; to encrypt and decrypt data. The first of these two is called the &lt;a href=&#34;https://en.wikipedia.org/wiki/Public-key&#34;&gt;Public Key&lt;/a&gt; – which can be freely shared with anyone the user wishes and is used by others to encrypt data so that it can be decrypted by &lt;strong&gt;only the intended recipient&lt;/strong&gt;. The second key is the Private Key, which should be kept as private and safe as possible. It is used to decrypt data that has been encrypted using a specific Public Key. As long as the Private Key is kept secret, only the owner is  able to decrypt data that has been encrypted with a Public Key. One problem with older methods of encryption was the relative ease with which codes could be broken. With increasingly powerful computers that are able to crack codes via pure ‘brute force,’ encoding methods must be incredibly complex to stand up. To combat this, PGP uses a key that is astronomically large,  meaning that the security of PGP encryption lies entirely with the key as opposed to keeping the method for key generation a secret. In fact, the methods that PGP encryption uses are known and widely documented. In addition, the size of keys can be increased whenever necessary to stay one step ahead of technological advances. And for the time being, each of the algorithms in current use by PGP is not known to have cryptanalytic weaknesses.&lt;/p&gt;

&lt;p&gt;So how secure does this make your information? Italian Police, the &lt;a href=&#34;http://www.pcworld.com/article/110841/pgp_encryption_proves_powerful.html&#34;&gt;FBI&lt;/a&gt;, and &lt;a href=&#34;http://www.theregister.co.uk/2007/11/14/ripa_encryption_key_notice/&#34;&gt;British police&lt;/a&gt; have been unable to crack its security and have resorted to demanding private keys. It’s been likened as “the closest you’re likely to get to military-grade encryption” by cryptographer &lt;a href=&#34;https://en.wikipedia.org/wiki/Bruce_Schneier&#34;&gt;Bruce Schneier&lt;/a&gt;. Short answer: pretty darn good, as long as you guard your private key wisely.&lt;/p&gt;

&lt;p&gt;You’ve probably guessed by now that the reason for this posting is to show you how to effectively use OpenPGP to secure your mobile email. And while we would’ve loved to just jump right into the tutorial, there are a few more things you should know first. &lt;a href=&#34;https://code.google.com/p/android-privacy-guard/&#34; title=&#34;Android Privacy Guard&#34;&gt;Android Privacy Guard&lt;/a&gt;{#udlg} (or APG for short), is a first step at bringing &lt;a href=&#34;https://en.wikipedia.org/wiki/Pretty_Good_Privacy&#34; title=&#34;PGP&#34;&gt;OpenPGP&lt;/a&gt;{#qtjc} to the Android platform, letting you manage OpenPGP keys directly from your Android phone – and use them to encrypt, sign and decrypt emails and files. &lt;a href=&#34;http://groups.google.com/group/k-9-mail/browse_thread/thread/921051bc0a61ed0b/d6085b925805ebf2?lnk=raot&#34;&gt;Very recently&lt;/a&gt; the teams behind APG and the popular, open-source Android email client &lt;a href=&#34;https://code.google.com/p/k9mail/&#34;&gt;K-9 Mail&lt;/a&gt; have joined forces in a limited edition &lt;a href=&#34;https://en.wikipedia.org/wiki/Marvel_Team-Up&#34;&gt;team-up&lt;/a&gt; to create a beta version of K-9 that plays nice with APG quite seamlessly. We’ve been using it as our default email solution at Guardian for weeks now and want to share it with you!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Currently APG only supports importing and deleting keys – not generating them – so you’ve got to use a desktop implementation of OpenPGP (such as &lt;a href=&#34;http://www.gnupg.org/&#34; title=&#34;GNU Privacy Guard&#34;&gt;GNU Privacy Guard&lt;/a&gt;{#vrm_}) to actually generate your keypair if you don’t already have one. A number of front-end applications and libraries are available to perform this task. If you already have a keypair set up, you should skip the first step.&lt;/p&gt;

&lt;p style=&#34;padding-left: 30px;&#34;&gt;
  &lt;strong&gt;1. Download and Install GnuPG Generate an OpenPGP keypair&lt;/strong&gt;
&lt;/p&gt;

&lt;p style=&#34;padding-left: 30px;&#34;&gt;
  Install GnuPG  &lt;a href=&#34;http://www.gnupg.org/download.html&#34;&gt;here&lt;/a&gt;. There are binaries available for &lt;a href=&#34;http://www.gnupg.org/download/supported_systems.en.html&#34;&gt;whatever OS flavor&lt;/a&gt; you prefer, and since they do a great job of making documentation and &lt;a href=&#34;http://www.dewinter.com/gnupg_howto/english/GPGMiniHowto.html&#34;&gt;How-To Guides&lt;/a&gt; available, we’ll skip the part where we reinvent the wheel.
&lt;/p&gt;

&lt;p style=&#34;padding-left: 30px;&#34;&gt;
  &lt;strong&gt;2. Generate and export your keypair&lt;/strong&gt;
&lt;/p&gt;

&lt;p style=&#34;padding-left: 30px;&#34;&gt;
  Follow the instructions &lt;a href=&#34;http://www.dewinter.com/gnupg_howto/english/GPGMiniHowto-3.html#ss3.1&#34;&gt;here&lt;/a&gt; to create a new keypair. &lt;a href=&#34;http://www.dewinter.com/gnupg_howto/english/GPGMiniHowto-3.html#ss3.2&#34;&gt;Export&lt;/a&gt; your public and private keys (re-direct from stdout to a file) and stick that file on your Android device’s SD card. Usually it’s best to create a new folder /APG to keep things organized, especially if your SD card is a mess like ours 🙂
&lt;/p&gt;

&lt;p style=&#34;padding-left: 30px;&#34;&gt;
  &lt;strong&gt;3. Download APG and import your keys&lt;/strong&gt;
&lt;/p&gt;

&lt;p style=&#34;padding-left: 30px;&#34;&gt;
  &lt;strong&gt; &lt;/strong&gt;If you don’t already have it, download Android Privacy Guard from its repository &lt;a href=&#34;https://code.google.com/p/android-privacy-guard/downloads/list&#34;&gt;here&lt;/a&gt; or point your barcode scanner to the QR code below. You can also find it on the Market if you prefer.
&lt;/p&gt;

&lt;p style=&#34;padding-left: 30px;&#34;&gt;
  &lt;span style=&#34;line-height: 1px; font-size: 13.2px;&#34;&gt; &lt;/span&gt;
&lt;/p&gt;

&lt;p style=&#34;padding-left: 30px; text-align: center;&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2010/06/qrcode_apg.png&#34;&gt;&lt;img class=&#34;size-full wp-image-385 aligncenter&#34; title=&#34;qrcode_apg&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2010/06/qrcode_apg.png&#34; alt=&#34;&#34; width=&#34;120&#34; height=&#34;120&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2010/06/qrcode_apg.png 120w, https://guardianproject.info/wp-content/uploads/2010/06/qrcode_apg-64x64.png 64w&#34; sizes=&#34;(max-width: 120px) 100vw, 120px&#34; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p style=&#34;padding-left: 30px;&#34;&gt;
  Fire up APG and select ‘Manage Public Keys’ from the menu:
&lt;/p&gt;

&lt;p style=&#34;padding-left: 30px; text-align: center;&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2010/06/apg_menu1.png&#34;&gt;&lt;img class=&#34;size-medium wp-image-390 aligncenter&#34; title=&#34;apg_menu&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2010/06/apg_menu1-180x300.png&#34; alt=&#34;&#34; width=&#34;180&#34; height=&#34;300&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2010/06/apg_menu1-180x300.png 180w, https://guardianproject.info/wp-content/uploads/2010/06/apg_menu1.png 480w&#34; sizes=&#34;(max-width: 180px) 100vw, 180px&#34; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p style=&#34;padding-left: 30px; text-align: center;&#34;&gt;
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    From the ‘Manage Public Keys’ screen, select ‘Import Keys’:
  &lt;/p&gt;
  

&lt;p&gt;&lt;p style=&#34;padding-left: 30px; text-align: center;&#34;&gt;
    &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2010/06/apg_manage_public_keys_blur.png&#34;&gt;&lt;img class=&#34;size-medium wp-image-391 aligncenter&#34; title=&#34;apg_manage_public_keys_blur&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2010/06/apg_manage_public_keys_blur-180x300.png&#34; alt=&#34;&#34; width=&#34;180&#34; height=&#34;300&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2010/06/apg_manage_public_keys_blur-180x300.png 180w, https://guardianproject.info/wp-content/uploads/2010/06/apg_manage_public_keys_blur.png 480w&#34; sizes=&#34;(max-width: 180px) 100vw, 180px&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;p style=&#34;padding-left: 30px;&#34;&gt;
      From the popup dialog, select the public key that you’ve transferred to your SD card. It’s helpful to use a file browser program like Astro File Manager if you don’t already have it installed:
    &lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p style=&amp;quot;padding-left: 30px; text-align: center;&amp;quot;&amp;gt;
  &amp;lt;span style=&amp;quot;line-height: 8px;&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;https://guardianproject.info/wp-content/uploads/2010/06/apg_import_keys_blur.png&amp;quot;&amp;gt;&amp;lt;img class=&amp;quot;size-medium wp-image-392 aligncenter&amp;quot; title=&amp;quot;apg_import_keys_blur&amp;quot; src=&amp;quot;https://guardianproject.info/wp-content/uploads/2010/06/apg_import_keys_blur-180x300.png&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;180&amp;quot; height=&amp;quot;300&amp;quot; srcset=&amp;quot;https://guardianproject.info/wp-content/uploads/2010/06/apg_import_keys_blur-180x300.png 180w, https://guardianproject.info/wp-content/uploads/2010/06/apg_import_keys_blur.png 480w&amp;quot; sizes=&amp;quot;(max-width: 180px) 100vw, 180px&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
  &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
    Once your public key(s) are successfully imported, return to the main APG menu, select ‘Manage Secret Keys’ and repeat the steps above for your Private Key.
  &amp;lt;/p&amp;gt;

  &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
    &amp;lt;strong&amp;gt;4. Download and Configure K-9 Mail&amp;lt;/strong&amp;gt;
  &amp;lt;/p&amp;gt;

  &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
    Download the latest version of K-9 mail featuring APG integration. You can find it on the Downloads page &amp;lt;a href=&amp;quot;https://code.google.com/p/k9mail/downloads/list&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt; or, again, point your barcode scanner to the QR Code below. Whatever floats your boat.
  &amp;lt;/p&amp;gt;

  &amp;lt;p style=&amp;quot;padding-left: 30px; text-align: center;&amp;quot;&amp;gt;
    &amp;lt;img class=&amp;quot;aligncenter&amp;quot; src=&amp;quot;https://chart.apis.google.com/chart?chs=150x150&amp;amp;cht=qr&amp;amp;chl=http://k9mail.googlecode.com/files/k9-apg-2900-beta.apk&amp;amp;chld=L|1&amp;amp;choe=UTF-8&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;125&amp;quot; height=&amp;quot;125&amp;quot; /&amp;gt;
  &amp;lt;/p&amp;gt;

  &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
    Set up your email account by entering your email address and password, then give it a name.
  &amp;lt;/p&amp;gt;

  &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
    &amp;lt;a href=&amp;quot;https://guardianproject.info/wp-content/uploads/2010/07/k9_setup1.png&amp;quot;&amp;gt;&amp;lt;img class=&amp;quot;aligncenter size-medium wp-image-451&amp;quot; title=&amp;quot;k9_setup&amp;quot; src=&amp;quot;https://guardianproject.info/wp-content/uploads/2010/07/k9_setup1-168x300.png&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;168&amp;quot; height=&amp;quot;300&amp;quot; srcset=&amp;quot;https://guardianproject.info/wp-content/uploads/2010/07/k9_setup1-168x300.png 168w, https://guardianproject.info/wp-content/uploads/2010/07/k9_setup1-84x150.png 84w, https://guardianproject.info/wp-content/uploads/2010/07/k9_setup1.png 480w&amp;quot; sizes=&amp;quot;(max-width: 168px) 100vw, 168px&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;
  &amp;lt;/p&amp;gt;

  &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
    &amp;lt;p style=&amp;quot;padding-left: 30px; text-align: center;&amp;quot;&amp;gt;
      &amp;lt;img class=&amp;quot;aligncenter&amp;quot; title=&amp;quot;k9_almost_done&amp;quot; src=&amp;quot;https://guardianproject.info/wp-content/uploads/2010/07/k9_almost_done-168x300.png&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;168&amp;quot; height=&amp;quot;300&amp;quot; /&amp;gt;
    &amp;lt;/p&amp;gt;

    &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
      For more popular accounts such as gmail, Yahoo!, etc., K-9 will automatically detect the correct configuration. For more complex accounts such as Exchange, please check out the K-9 wiki page &amp;lt;a href=&amp;quot;https://code.google.com/p/k9mail/w/list&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;.
    &amp;lt;/p&amp;gt;

    &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
      &amp;lt;strong&amp;gt;5. Send and Receive Encrypted Email!&amp;lt;/strong&amp;gt;
    &amp;lt;/p&amp;gt;

    &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
      Thanks to the integration effort by the teams at APG and K-9, actually using secure mobile email becomes easy. The compose screen features a prominent checkbox and button that allow you to sign and encrypt your outbound messages, respectively.
    &amp;lt;/p&amp;gt;

    &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
      &amp;lt;a href=&amp;quot;https://guardianproject.info/wp-content/uploads/2010/07/k9_compose.png&amp;quot;&amp;gt;&amp;lt;img class=&amp;quot;aligncenter size-medium wp-image-453&amp;quot; title=&amp;quot;k9_compose&amp;quot; src=&amp;quot;https://guardianproject.info/wp-content/uploads/2010/07/k9_compose-168x300.png&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;168&amp;quot; height=&amp;quot;300&amp;quot; srcset=&amp;quot;https://guardianproject.info/wp-content/uploads/2010/07/k9_compose-168x300.png 168w, https://guardianproject.info/wp-content/uploads/2010/07/k9_compose-84x150.png 84w, https://guardianproject.info/wp-content/uploads/2010/07/k9_compose.png 480w&amp;quot; sizes=&amp;quot;(max-width: 168px) 100vw, 168px&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;
    &amp;lt;/p&amp;gt;

    &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
      Decrypting messages with your private key is even easier and is literally a 1-touch experience:
    &amp;lt;/p&amp;gt;

    &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
      &amp;lt;a href=&amp;quot;https://guardianproject.info/wp-content/uploads/2010/07/k9_almost_done.png&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;a href=&amp;quot;https://guardianproject.info/wp-content/uploads/2010/07/k9_view_decrypt.png&amp;quot;&amp;gt;&amp;lt;img class=&amp;quot;aligncenter size-medium wp-image-455&amp;quot; title=&amp;quot;k9_view_decrypt&amp;quot; src=&amp;quot;https://guardianproject.info/wp-content/uploads/2010/07/k9_view_decrypt-180x300.png&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;180&amp;quot; height=&amp;quot;300&amp;quot; srcset=&amp;quot;https://guardianproject.info/wp-content/uploads/2010/07/k9_view_decrypt-180x300.png 180w, https://guardianproject.info/wp-content/uploads/2010/07/k9_view_decrypt-90x150.png 90w, https://guardianproject.info/wp-content/uploads/2010/07/k9_view_decrypt.png 480w&amp;quot; sizes=&amp;quot;(max-width: 180px) 100vw, 180px&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;
    &amp;lt;/p&amp;gt;

    &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
      &amp;lt;strong&amp;gt;Enjoy! &amp;lt;/strong&amp;gt;As always, please post all questions, concerns, and jokes (only good ones please) in the Comments section. We’re very excited about the powerful combination that these two apps bring and we’d love to hear from you!
    &amp;lt;/p&amp;gt;

    &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
      If you find any issues with APG, please report them &amp;lt;a href=&amp;quot;https://code.google.com/p/android-privacy-guard/issues/list&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;:
    &amp;lt;/p&amp;gt;

    &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
      &amp;lt;span style=&amp;quot;line-height: 13px;&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;line-height: 16px;&amp;quot;&amp;gt;Likewise, report issues with K-9 &amp;lt;a href=&amp;quot;https://code.google.com/p/k9mail/issues/list&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;. &amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>How To: Setup a Private VOIP Phone System for Android</title>
      <link>https://guardianproject.github.io/info/2010/05/26/how-to-setup-a-private-voip-phone-system-for-android/</link>
      <pubDate>Wed, 26 May 2010 05:53:54 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2010/05/26/how-to-setup-a-private-voip-phone-system-for-android/</guid>
      <description>&lt;div&gt;
  &lt;div&gt;
    &lt;strong&gt;MAY 2011: Learn more about our new efforts on the Open Secure Telephony Network at &lt;a href=&#34;https://guardianproject.info/wiki/OSTN&#34;&gt;https://guardianproject.info/wiki/OSTN&lt;/a&gt; – we currently recommend the &lt;a href=&#34;https://code.google.com/p/csipsimple/&#34;&gt;CSipSimple&lt;/a&gt; Android app instead of SIPDroid, for secure voice calls.&lt;/strong&gt;
  &lt;/div&gt;
  

&lt;p&gt;&lt;div&gt;
  &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
    Near the very top of Guardian’s open-source application suite &lt;a href=&#34;https://guardianproject.info/apps/&#34;&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&lt;span&gt;wish l&lt;span style=&#34;color: #0000ff;&#34;&gt;&lt;span&gt;ist&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt; is something that might seem like a no-brainer for a secure mobile device: voice. When we take into account network performance and audio fidelity requirements, as well as the International nature of Guardian’s target users (everything from average citizens to multi-national journalists or humanitarian organizations), the prospect of a truly real-time secure VOIP solution starts to reveal itself as quite the challenge. Fortunately, a number of efforts have been underway for some time on the Android platform. &lt;strong&gt;The following is an introduction to one such effort, and this post provides a very easy step-by-step how to enable your very own private mobile phone system.&lt;/strong&gt;
  &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;span style=&#34;color: #0000ff;&#34;&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2010/05/sipdroidcall.png&#34;&gt;&lt;img class=&#34;alignleft size-full wp-image-337&#34; title=&#34;sipdroidcall&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2010/05/sipdroidcall.png&#34; alt=&#34;&#34; width=&#34;145&#34; height=&#34;241&#34; /&gt;&lt;/a&gt;&lt;a href=&#34;https://code.google.com/p/sipdroid/&#34;&gt;Sipdroid&lt;/a&gt;&lt;/span&gt; is an open-source SIP client that adds native SIP/VOIP to Android’s default dialer / contacts applications. You can find Sipdroid in the Android Market or alternatively can &lt;a href=&#34;https://code.google.com/p/sipdroid/downloads/list&#34;&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&lt;span&gt;download it here&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;. SIP (&lt;a href=&#34;https://en.wikipedia.org/wiki/Session_Initiation_Protocol&#34;&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&lt;span&gt;Session Initiation Protocol&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;) is the Internet standard for real-time voice and video communications. It’s a fundamental building block for many popular consumer VOIP products that you may have used – &lt;a href=&#34;https://www.youtube.com/watch?v=1XU06zbDBBA&#34;&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&lt;span&gt;Vonage&lt;/span&gt;&lt;/span&gt;&lt;/a&gt; or &lt;a href=&#34;http://www.magicjack.com/&#34;&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&lt;span&gt;MagicJack&lt;/span&gt;&lt;/span&gt;&lt;/a&gt; are two examples. Once installed and configured properly, sipdroid allows you to make &amp;amp; receive calls over Wifi and 3G / EDGE data connections – which is a really powerful thing! A similar solution from &lt;a href=&#34;https://my.gizmo5.com/&#34;&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&lt;span&gt;Gizmo5&lt;/span&gt;&lt;/span&gt;&lt;/a&gt; allowed many Android users to completely untangle themselves from mobile minutes and rely on a purely VOIP solution. Alas, new Gizmo signups were suspended after Google announced their &lt;a href=&#34;http://googlevoiceblog.blogspot.com/2009/11/google-welcomes-gizmo5.html&#34;&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&lt;span&gt;acquisition&lt;/span&gt;&lt;/span&gt;&lt;/a&gt; – but we should all be excited to see what they can cook up as part of the official &lt;a href=&#34;https://www.google.com/voice&#34;&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&lt;span&gt;Google Voice&lt;/span&gt;&lt;/span&gt;&lt;/a&gt; team.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    While it’s expected that SIP providers will become more &lt;a href=&#34;https://code.google.com/p/sipdroid/wiki/NewStandbyTechnique&#34;&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&lt;span&gt;interoperable&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;, the simplest and most powerful solution currently available to get sipdroid running involves registering to the virtual PBX service from &lt;a href=&#34;https://www1.pbxes.com/index_e.php&#34;&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&lt;span&gt;PBXes.com&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;. For the uninitiated, a PBX (Private Branch Exchange) is what establishes and manages the connections between the telephony products of a private organization (telephones, fax machines, etc.) – each of which is labeled with an ‘extension’. It also is the system through which these extensions are able to access the public telephone network (&lt;a href=&#34;https://en.wikipedia.org/wiki/PSTN&#34;&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&lt;span&gt;PSTN&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;). Since the 1990s, traditional PBX solutions – usually out of reach for small businesses or individuals due to cost and complexity – have evolved to IP-based and virtual or hosted PBXes, which greatly simplify the processes of building and scaling telephony services. PBXes.com is one such ‘virtual PBX.’ Once a PBXes account is established, the account owner can create multiple extensions beneath it and easily dial between those extensions. You get 5 extensions for a free account, more for paid &lt;a href=&#34;https://www1.pbxes.com/iptel_virtual-pbx.html&#34;&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&lt;span&gt;account types&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;strong&gt;Why is this solution so interesting?&lt;/strong&gt; If you have a relatively small group of colleagues (NGO, humanitarian workers, activists, journalists, etc.), it allows you to easily establish a private internal phone system that can be used over a data connection in lieu of the regular phone system. In our experience, the call quality is also quite good. &lt;span&gt;And while the following step-by-step guide will lead you through the process of setting up this simple solution, first a word of caution: t&lt;span&gt;his is &lt;strong&gt;&lt;span&gt;not&lt;span&gt; a secure solution yet&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;&lt;span&gt;. It is a first step, however, down that road. To achieve a more secure solution, we need to enable more features, include tunneling and encrypting traffic through a Virtual Private Network (VPN) as well as integrating to a privately maintained &lt;a href=&#34;http://www.techsteward.com/blog/dirk/?p=735&#34;&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&lt;span&gt;A&lt;span style=&#34;color: #0000ff;&#34;&gt;&lt;span&gt;sterisk&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt; phone server running with custom security settings. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;span&gt;&lt;span&gt;&lt;span&gt;We are also investigating solutions that uses a public key exchange model, such as Philip Zimmermann’s &lt;a id=&#34;s_.7&#34; title=&#34;ZFone&#34; href=&#34;http://zfoneproject.com/&#34;&gt;ZFone&lt;/a&gt;, such as the new &lt;/span&gt;&lt;a href=&#34;http://whispersys.com/&#34;&gt;RedPhone app just announced by WhisperSystems&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;strong&gt;&lt;span&gt;&lt;span&gt;1.&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; &lt;strong&gt;&lt;span&gt;&lt;span&gt;Configure &lt;span&gt;&lt;span&gt;extensions to &lt;span&gt;&lt;span&gt;a&lt;span&gt;&lt;span&gt; PBXes.com account&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;span&gt;&lt;span&gt;If you don’t already have a PBXes.com account, head over to &lt;a href=&#34;http://www.pbxes.com&#34;&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;&lt;a href=&#34;http://www.pbxes.com&#34;&gt;http://www.pbxes.com&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt; and fill out the straightfo&lt;span&gt;&lt;span&gt;rward account registration form for a free account.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;span&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2010/05/welcome.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-333&#34; title=&#34;welcome&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2010/05/welcome-300x172.png&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;172&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2010/05/welcome-300x172.png 300w, https://guardianproject.info/wp-content/uploads/2010/05/welcome.png 615w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;&lt;/span&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
     
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;span&gt;&lt;span&gt;Next, select ‘Extensions’ from the left-hand navigation menu, &lt;span&gt;&lt;span&gt;then&lt;span&gt;&lt;span&gt; choose ‘SIP’ under ‘Add an Extension.’ &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;span&gt; &lt;span&gt;Last, configure your new extension with a few critical elements. Make sure you fill out the following fields, at a minimum:&lt;/span&gt;&lt;/span&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2010/05/addSIPExtension.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-334&#34; title=&#34;addSIPExtension&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2010/05/addSIPExtension-300x171.png&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;171&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2010/05/addSIPExtension-300x171.png 300w, https://guardianproject.info/wp-content/uploads/2010/05/addSIPExtension.png 619w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;ul&gt;
    &lt;li&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;span&gt;&lt;span&gt;Extension number (e.g. 100, 101, 402, etc.)&lt;/span&gt;&lt;/span&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;span&gt;&lt;span&gt;Display name (e.g. johndoe-100)&lt;/span&gt;&lt;/span&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;span&gt;&lt;span&gt;Password&lt;/span&gt;&lt;/span&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
    &lt;p&gt;
      &lt;span&gt;&lt;span&gt;After clicking ‘Submit,’ go ahead and repeat the process for as many extensions as  you’d like to set up. Each of these will be specific for a unique Android device. Don’t forget to APPLY your changes when finished by clicking the bright red bar – this ensures your changes take effect.&lt;/span&gt;&lt;/span&gt;
    &lt;/p&gt;
  &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;strong&gt;2.&lt;/strong&gt; &lt;strong&gt;Configure extensions on sipdroid&lt;/strong&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    If you don’t already have sipdroid, you can find the latest version &lt;a href=&#34;https://code.google.com/p/sipdroid/downloads/list&#34;&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&lt;span&gt;here&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;, or point your barcode scanner to the following QR code:
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
    &lt;a href=&#34;http://chart.apis.google.com/chart?cht=qr&amp;chs=170x170&amp;chl=http%3A%2F%2Fwww.androidzoom.com%2Fweb%2Findice%2FqrLink%3FappCode%3Dmaf%26dwnId%3D231933&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-335&#34; title=&#34;dp82z4m_35fd9f9hgz_b&#34; src=&#34;https://chart.apis.google.com/chart?cht=qr&amp;chs=170x170&amp;chl=http%3A%2F%2Fwww.androidzoom.com%2Fweb%2Findice%2FqrLink%3FappCode%3Dmaf%26dwnId%3D231933&#34; alt=&#34;&#34; width=&#34;170&#34; height=&#34;170&#34; /&gt;&lt;/a&gt;
  &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
    &lt;p&gt;
      Within the Account Settings section of sipdroid, set up one of your extensions from step 1:
    &lt;/p&gt;
  &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    · Authorization Username and Password
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    · Server: pbxes.com
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    · Port: 5060
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    · Protocol: TCP
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
    &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2010/05/sipdroid_account.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-336&#34; title=&#34;sipdroid_account&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2010/05/sipdroid_account.png&#34; alt=&#34;&#34; width=&#34;144&#34; height=&#34;240&#34; /&gt;&lt;/a&gt;
  &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;span&gt;&lt;span&gt;You should see a green dot appear in your notifications tray on successful registration like so:&lt;/span&gt;&lt;/span&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
    &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2010/05/sipdroidoptions.png&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-338&#34; title=&#34;sipdroidoptions&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2010/05/sipdroidoptions.png&#34; alt=&#34;&#34; width=&#34;145&#34; height=&#34;241&#34; /&gt;&lt;/a&gt;
  &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
     
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;strong&gt;3.&lt;/strong&gt; &lt;strong&gt;Trial Run – dial between extensions&lt;/strong&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Once you’ve set up a number of extensions within your PBX, you can easily dial between them. Simply input their extension number (e.g. 100).
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2010/05/sipdroidcall.png&#34;&gt;&lt;img title=&#34;sipdroidcall&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2010/05/sipdroidcall.png&#34; alt=&#34;&#34; width=&#34;145&#34; height=&#34;241&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
     
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;strong&gt;&lt;span&gt;&lt;span&gt;4.&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt; &lt;strong&gt;&lt;span&gt;&lt;span&gt;(Optional) &lt;span&gt;&lt;span&gt;Configure VPN&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/strong&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;span&gt;&lt;span&gt;As mentioned above, the solution so far isn’t a secure one. A first step in the right direction is connecting to &lt;span&gt;&lt;span&gt;PBXes&lt;span&gt;&lt;span&gt;’ &lt;span&gt;&lt;span&gt;PPTP VPN. For those quicker on their feet, configuration instructions can be found &lt;a href=&#34;http://mona-lilly.de/wiki/index.php/VPN&#34;&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&lt;span&gt;&lt;span&gt;&lt;span&gt;here&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span&gt;&lt;span&gt;. If you’d prefer to stick with us, follow these steps:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;span&gt;&lt;span&gt;&lt;em&gt;4a.&lt;/em&gt; &lt;span&gt;&lt;span&gt;On&lt;span&gt;&lt;span&gt; your Android phone, access the ‘VPN settings’ section of Wireless &amp;amp; network settings.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;em&gt;4b. &lt;/em&gt;Select ‘Add VPN,’ then ‘Add PPTP VPN’
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2010/05/addvpn.png&#34;&gt;&lt;img class=&#34;alignleft size-full wp-image-340&#34; title=&#34;addvpn&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2010/05/addvpn.png&#34; alt=&#34;&#34; width=&#34;144&#34; height=&#34;240&#34; /&gt;&lt;/a&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2010/05/addvpntype.png&#34;&gt;&lt;img class=&#34;alignleft size-full wp-image-341&#34; title=&#34;addvpntype&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2010/05/addvpntype.png&#34; alt=&#34;&#34; width=&#34;144&#34; height=&#34;240&#34; /&gt;&lt;/a&gt;&lt;br /&gt; &lt;br style=&#34;clear: both;&#34; /&gt;&lt;br /&gt; &lt;span&gt;&lt;span&gt;&lt;em&gt;4c.&lt;/em&gt; &lt;span&gt;&lt;span&gt;On&lt;span&gt;&lt;span&gt; your Android phone, access the ‘VPN settings’ section of Wireless &amp;amp; network settings.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;ul&gt;
    &lt;li&gt;
      VPN Name – your choice
    &lt;/li&gt;
    &lt;li&gt;
      VPN server – www#.pbxes.com [for # see URL line after logging into PBXes on your browser]
    &lt;/li&gt;
    &lt;li&gt;
      Enable encryption – We haven’t had success with enabling encryption on PBXes yet. This might be due to a sipdroid &lt;a href=&#34;https://code.google.com/p/sipdroid/issues/detail?id=370&#34;&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&lt;span&gt;issue&lt;/span&gt;&lt;/span&gt;&lt;/a&gt; or it might not. If you have success on Android 2.0 / Éclair please let us know in the comments! &lt;span&gt;&lt;span&gt; Nathan reported issues with encryption using PBXes PPTP VPN as well.  -Derek Halliday 5/12/10 4:33 PM &lt;/span&gt;&lt;/span&gt;
    &lt;/li&gt;
    &lt;li&gt;
      DNS search domain – leave empty
    &lt;/li&gt;
    &lt;li&gt;
      Username – &lt;account name&gt;-&lt;extension no.&gt; (e.g. guardianproj-401)
    &lt;/li&gt;
    &lt;li&gt;
      Password – &lt;extension password&gt;
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2010/05/add_pptp_vpn.png&#34;&gt;&lt;img class=&#34;size-full wp-image-342 alignnone&#34; title=&#34;add_pptp_vpn&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2010/05/add_pptp_vpn.png&#34; alt=&#34;&#34; width=&#34;144&#34; height=&#34;240&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
     
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    &lt;span style=&#34;color: #000000;&#34;&gt;&lt;span&gt;&lt;strong&gt;That’s it! &lt;/strong&gt;&lt;span&gt;If you come across any issues or have any questions along the way, please let us know in the “Comments” below and we’ll do our best to help you out or clarify. And if you’re itching for more, here are a couple next steps. We’re not presenting a deep tutorial on these (yet), so we’d love to hear from you if you have pursued either – or even better – if you’ve used sipdroid and/or PBXes in any other creative ways!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;ol&gt;
    &lt;li&gt;
      &lt;span&gt;&lt;span&gt;Hook your PBXes account into an external DID / VOIP number to dial out to standard phone. Think of it as the equivalent of ‘Skype Out’ for sipdroid. You can use a service such as CallCentric (&lt;a href=&#34;http://www.callcentric.com/&#34;&gt;http://www.callcentric.com/&lt;/a&gt;) for this. &lt;/span&gt;&lt;/span&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span&gt;&lt;span&gt;You can also integrate desktop VOIP programs or other mobile device client into the same PBXes accounts. Here’s a great list of &lt;/span&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_SIP_software#Free_and.2For_open_source_software&#34;&gt;free, open-source SIP clients&lt;/a&gt;&lt;span&gt;. We personally like &lt;/span&gt;&lt;a href=&#34;http://icanblink.com/&#34;&gt;Blink for Mac OS&lt;/a&gt;&lt;span&gt;.&lt;/span&gt;&lt;/span&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span&gt;&lt;span&gt;If you have a privately maintained &lt;a id=&#34;zdnk&#34; title=&#34;Asterisk&#34; href=&#34;https://en.wikipedia.org/wiki/Asterisk_(PBX)&#34;&gt;Asterisk&lt;/a&gt; or other SIP compatible-server, you can use this same approach with that box, and integrate with your own VPN server. We will be covering this in more detail with a future post, as this is a more secure solution that using a provide such as PBXes.&lt;/span&gt;&lt;/span&gt;
    &lt;/li&gt;
  &lt;/ol&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
     
  &lt;/p&gt;
&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
