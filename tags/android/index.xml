<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on Guardian Project</title>
    <link>https://guardianproject.github.io/info/tags/android/</link>
    <description>Recent content in Android on Guardian Project</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 01 Feb 2025 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://guardianproject.github.io/info/tags/android/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>IOCipher 1.0 community reboot</title>
      <link>https://guardianproject.github.io/info/2025/02/01/iocipher-1.0-community-reboot/</link>
      <pubDate>Sat, 01 Feb 2025 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2025/02/01/iocipher-1.0-community-reboot/</guid>
      <description>

&lt;h2 id=&#34;iocipher-update-to-version-1-0&#34;&gt;IOCipher update to version 1.0&lt;/h2&gt;

&lt;p&gt;We are thrilled to announce that a community contributor has picked up maintaining a fork of IOCipher and updated to IOCipher 1.0,
designed to enhance your development experience and empower you to create more secure applications with ease. Here’s what’s new and why it matters to you:&lt;/p&gt;

&lt;h3 id=&#34;1-enhanced-features&#34;&gt;1. Enhanced Features&lt;/h3&gt;

&lt;p&gt;We introduced a few new features. Most notably IOCipher is also available on Desktop Java for Linux and Windows now. (Although not all IOCipher features are fully supported on Windows).
The latest release even includes some example code for accessing IOCipher VFS using Python.&lt;/p&gt;

&lt;h3 id=&#34;2-dependency-updates&#34;&gt;2. Dependency updates&lt;/h3&gt;

&lt;p&gt;We updated to the newest SQLCipher and OpenSSL.&lt;/p&gt;

&lt;h3 id=&#34;3-bug-fixes-and-stability&#34;&gt;3. Bug Fixes and Stability&lt;/h3&gt;

&lt;p&gt;Now your virtual files can be as large as you want, there is no longer a hard limit at 4 GB.
We fixed some bugs that testing the JNI code with ASAN has found.&lt;/p&gt;

&lt;h2 id=&#34;iocipher-encrypted-virtual-disk-for-android-and-linux-jvm&#34;&gt;IOCipher: Encrypted Virtual Disk (for Android and Linux JVM)&lt;/h2&gt;

&lt;p&gt;IOCipher is a virtual encrypted disk for apps without requiring the device to be rooted. It uses a clone of the standard java.io API for working with files. Just password handling &amp;amp; opening the virtual disk are what stand between developers and fully encrypted file storage. It is based on libsqlfs and SQLCipher.&lt;/p&gt;

&lt;p&gt;IOCipher is based on transactions in SQLite, which means that it does not require being mounted in the normal sense. There is no open state once a transaction is complete. Each read or write operation is a self-contained SQLite transaction, so if the file system is forcably quit, SQLite’s transactions prevent the whole file system from being corrupted. This is important in Android since an Activity or Service can be killed at any moment without warning.&lt;/p&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Comes with &lt;strong&gt;all batteries included&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Secure transparent app-level &lt;strong&gt;virtual encrypted disk&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Multi-threaded access&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No root&lt;/strong&gt; required&lt;/li&gt;
&lt;li&gt;Only &lt;strong&gt;three new methods&lt;/strong&gt; to learn: &lt;code&gt;VirtualFileSystem.get()&lt;/code&gt;, &lt;code&gt;VirtualFileSystem.mount(dbFile, password)&lt;/code&gt;, and &lt;code&gt;VirtualFileSystem.unmount()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Supports Android API 21 and above&lt;/li&gt;
&lt;li&gt;Supports Java version 8 and above on Desktop&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;adding-iocipher-to-your-app&#34;&gt;Adding IOCipher to your App&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s a minimal example for using IOCipher to encrypt all files your app is storing on a phone:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add to your project build.gradle
&lt;pre&gt;
allprojects {
repositories {
    google()
    mavenCentral()
    maven {
        url &amp;ldquo;&lt;a href=&#34;https://jitpack.io&amp;quot;&#34;&gt;https://jitpack.io&amp;quot;&lt;/a&gt;
    }
}
}
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;add to your module build.gradle
&lt;pre&gt;
implementation &amp;lsquo;com.github.zoff99:pkgs_guardianprojectIOCipher:1.0.5&amp;rsquo;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;get the VFS singleton using &lt;code&gt;VirtualFileSystem.get()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;on first run, create the container file with a password using &lt;code&gt;VirtualFileSystem.createNewContainer(dbFile, password)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;mount the container file with a password using &lt;code&gt;VirtualFileSystem.mount(dbFile, password)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;replace the relevant &lt;code&gt;java.io&lt;/code&gt; import statements with &lt;code&gt;info.guardianproject.iocipher&lt;/code&gt;
&lt;pre&gt;
import info.guardianproject.iocipher.File;
import info.guardianproject.iocipher.FileOutputStream;
import info.guardianproject.iocipher.FileReader;
import info.guardianproject.iocipher.IOCipherFileChannel;
import info.guardianproject.iocipher.VirtualFileSystem;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a full Android example project see: &lt;a href=&#34;https://github.com/zoff99/iocipher_pack/tree/master/007_example_android&#34;&gt;https://github.com/zoff99/iocipher_pack/tree/master/007_example_android&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./android_example_app.png&#34; alt=&#34;Showing the Android IOCipher Example App running on the Android Emulator&#34; height=&#34;400px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;source-code&#34;&gt;Source Code&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;all you need for your project: &lt;a href=&#34;https://github.com/zoff99/iocipher_pack&#34;&gt;https://github.com/zoff99/iocipher_pack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;optional&#34;&gt;optional:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;a simple test app for Android: &lt;a href=&#34;https://github.com/zoff99/iocipher_pack/tree/master/007_example_android&#34;&gt;https://github.com/zoff99/iocipher_pack/tree/master/007_example_android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;a simple example desktop file manager app: &lt;a href=&#34;https://github.com/zoff99/iocipher_pack/tree/master/004_example_jvm&#34;&gt;https://github.com/zoff99/iocipher_pack/tree/master/004_example_jvm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;a simple python example for Linux: &lt;a href=&#34;https://github.com/zoff99/iocipher_pack/tree/master/006_example_python&#34;&gt;https://github.com/zoff99/iocipher_pack/tree/master/006_example_python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;a simple C API example for Linux: &lt;a href=&#34;https://github.com/zoff99/iocipher_pack/tree/master/005_example_c&#34;&gt;https://github.com/zoff99/iocipher_pack/tree/master/005_example_c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;a simple C API example for Windows: &lt;a href=&#34;https://github.com/zoff99/iocipher_pack/tree/master/005_example_c_win64&#34;&gt;https://github.com/zoff99/iocipher_pack/tree/master/005_example_c_win64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the core: &lt;a href=&#34;https://github.com/zoff99/iocipher_pack/tree/master/002_src_libsqlfs&#34;&gt;https://github.com/zoff99/iocipher_pack/tree/master/002_src_libsqlfs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;usage-notes&#34;&gt;Usage notes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;only one active mount per-app is supported&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>A Look Back at 2024: F-Droid&#39;s Progress and What’s Coming in 2025</title>
      <link>https://guardianproject.github.io/info/2025/01/21/a-look-back-at-2024-f-droids-progress-and-whats-coming-in-2025/</link>
      <pubDate>Tue, 21 Jan 2025 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2025/01/21/a-look-back-at-2024-f-droids-progress-and-whats-coming-in-2025/</guid>
      <description>

&lt;p&gt;With 2024 now behind us, we wanted to take a moment to reflect on the growth and achievements we accomplished as a community last year, and celebrate the incredible support we received from the FOSS community throughout the journey.&lt;/p&gt;

&lt;p&gt;This year has been a milestone for us, with significant strides in decentralizing app distribution, expanding the F-Droid ecosystem, and solidifying our infrastructure. All of these advancements were made possible thanks to donations, grants, our volunteers and regular contributors. So thank you again to everyone who helped make 2024 another great year for F-Droid. Now let&amp;rsquo;s take a closer look at what we accomplished.&lt;/p&gt;

&lt;h2 id=&#34;a-review-of-key-accomplishments-in-2024&#34;&gt;A Review of Key Accomplishments in 2024&lt;/h2&gt;

&lt;h3 id=&#34;decentralizing-app-distribution-a-core-focus&#34;&gt;Decentralizing App Distribution: A Core Focus&lt;/h3&gt;

&lt;p&gt;One of the most important initiatives we worked on in 2024 was the continued development of our app decentralization efforts. Our aim is to make F-Droid a more robust and accessible platform, making further in-roads into the hold Big Tech currently has on app distribution.  Building on the &lt;a href=&#34;https://f-droid.org/2022/02/05/decentralizing-distribution.html&#34;&gt;work we started in 2022&lt;/a&gt;, as a part of the &lt;a href=&#34;https://www.ffdweb.org/blog/guardian-project-annoucement/&#34;&gt;Filecoin Foundation for the Decentralized Web grant&lt;/a&gt;, we continued to make substantial progress this year in providing developers and end-users with more options to distribute their apps through a decentralized, equitable and privacy-oriented process. The goal for this project is to enable individuals and organizations to mirror and distribute F-Droid apps in a community-driven fashion, reducing reliance on centralized services. This work ties into a larger vision of creating a truly open-source ecosystem for Android apps that is not governed by proprietary companies.&lt;/p&gt;

&lt;p&gt;In 2024 we completed the following infrastructure upgrades:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Broke out and overhauled core client logic around publishing and consuming repositories.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Made client logic into &lt;a href=&#34;https://f-droid.org/2023/05/02/three-client-libraries.html&#34;&gt;libraries&lt;/a&gt; to make it easy to embed repositories in any app that needs it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Added support for mirroring repositories onto both IPFS and Filecoin.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Added support in F-Droid client to use mirrors and repositories hosted on IPFS and Filecoin.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Improved F-Droid client “&lt;a href=&#34;https://f-droid.org/docs/Whitelabel_Builds/&#34;&gt;whitelabel builds&lt;/a&gt;”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enhanced F-Droid client’s existing “nearby” and “app swap” capabilities.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Updated F-Droid’s Repomaker tool (for easy “point and click” curation and publishing of app repos) and add support for IPFS publishing.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Supported iOS apps and progressive web apps (PWA) as packages that can be shipped via repositories.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2024 marked the end of this grant period, however the tools, features and policies established within the scope of the grant, will continue to be developed thanks to donations and other funders who are committed to further decentralizing app distribution.&lt;/p&gt;

&lt;h2 id=&#34;expanding-the-f-droid-ecosystem-repomaker-and-mobifree&#34;&gt;Expanding the F-Droid Ecosystem: Repomaker and Mobifree&lt;/h2&gt;

&lt;p&gt;Another key project we &lt;a href=&#34;https://f-droid.org/2024/05/24/mobifree.html&#34;&gt;started&lt;/a&gt; in 2024 was the further exploration and expansion of tools within the F-Droid ecosystem. Thanks to a major grant from &lt;a href=&#34;https://cordis.europa.eu/project/id/101135795&#34;&gt;EU Horizon Europe&lt;/a&gt;, we were able to deepen our focus on tools like &lt;a href=&#34;https://f-droid.org/repomaker/&#34;&gt;Repomaker&lt;/a&gt;, which helps developers create their own F-Droid-compatible repositories. This tool is crucial for maintaining and growing the diverse range of apps available on F-Droid, and its expansion will support more developers who wish to contribute to the platform.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://mobifree.org/&#34;&gt;Mobifree&lt;/a&gt; is an initiative that aims to provide a free, open-source, and decentralized alternative to traditional mobile app stores. It focuses on the freedom of choice, privacy, and user empowerment. Our contributions to this project will help strengthen the ties between F-Droid and other decentralized app distribution systems, ensuring that we remain a key player in the future of open-source mobile software.&lt;/p&gt;

&lt;p&gt;Do you have your own project ideas for Mobifree?  You can apply for up to 50,000€ from &lt;a href=&#34;https://nlnet.nl/mobifree/&#34;&gt;NLnet NGI Mobifree&lt;/a&gt;.  We can help you apply, just reach out via the &lt;a href=&#34;https://f-droid.org/about/#contact&#34;&gt;regular F-Droid channels&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Key Contributions in 2024:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;User research to understand app developer distribution workflows, compensation models, index preferences and APK metadata.&lt;/li&gt;
&lt;li&gt;Built on existing Fastlane tooling to further automate the app package and upload the process to F-Droid.&lt;/li&gt;
&lt;li&gt;Repomaker feature development made the repo creation and distribution process easier for non-tech users, non-profit and humanitarian organizations.&lt;/li&gt;
&lt;li&gt;Created a central registry of all DAPPER compatible repos and API for app stores like Murena&amp;rsquo;s &lt;a href=&#34;https://doc.e.foundation/app-lounge-main&#34;&gt;App Lounge&lt;/a&gt; to pull in compatible repos and further decentralize app distribution process.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In 2025, we continue to contribute to the Mobifree project, getting our tools, apps and software ready for pilot testing this spring. From there, we will continue to improve the software based on user-testing feedback, ultimately making the tools available for the general public to use and enjoy.&lt;/p&gt;

&lt;h3 id=&#34;f-droid-community-engagement&#34;&gt;F-Droid Community Engagement&lt;/h3&gt;

&lt;p&gt;None of this would be possible without the incredible contributions from the FOSS community. In 2024, we saw a substantial increase in the number of contributions to F-Droid. From bug fixes and app updates to new apps being added to the store, our community of developers, testers, and contributors have been pivotal in keeping F-Droid running smoothly.&lt;/p&gt;

&lt;p&gt;Here are some statistics that highlight the community’s impact this year:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;App Updates: Over 7205 app updates were made, keeping the app catalog fresh and secure.&lt;/li&gt;
&lt;li&gt;New Apps Added: We welcomed over 402 new apps to the F-Droid repository, further expanding the variety of open-source apps available to users.&lt;/li&gt;
&lt;li&gt;Archived Apps: 939 Apps were successfully archived.&lt;/li&gt;
&lt;li&gt;Packages per Hour: Approximately 2-3 packages were created every hour, without interruption. Between updated and new apps, F-Droid built apps over 7600 times. Since most modern apps are split per device architecture, this  means that each app version required multiple packages to be built, sometimes up to 4 packages for each app version. This increases the real number of builds by 2.5-3x. Putting it all together, that would equal between 2-3 packages created per hour, without interruption in 2024.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These numbers are a reflection of the dedication and passion of the F-Droid community. We are immensely grateful for each and every contributor who made these achievements possible.&lt;/p&gt;

&lt;h2 id=&#34;looking-ahead-in-2025&#34;&gt;Looking Ahead in 2025&lt;/h2&gt;

&lt;h3 id=&#34;new-team-members-and-big-plans-for-2025&#34;&gt;New Team Members and Big Plans for 2025&lt;/h3&gt;

&lt;p&gt;As we look forward to 2025, we are excited to announce two key additions to the F-Droid team who will help us scale our efforts in the coming year. Hailey Still has joined us as a new project manager and UX designer. Hailey brings a diverse background of experience in managing complex projects and designing user-friendly and intuitive interfaces. Her expertise will continue to be instrumental in helping us secure new grant opportunities, streamline our operations and improve the user experience tools we work on.&lt;/p&gt;

&lt;p&gt;We are also pleased to welcome Nzambi Kakusu as our new grant administrator. Nzambi will play a crucial role in helping us secure and manage funding for F-Droid&amp;rsquo;s continued development. With her experience in grant management, Nzambi will help ensure that we can continue to sustain and grow the project in a way that aligns with our mission and values.&lt;/p&gt;

&lt;h3 id=&#34;otf-grant-and-infrastructure-work&#34;&gt;OTF Grant and Infrastructure Work&lt;/h3&gt;

&lt;p&gt;In 2025 we are thrilled to begin working on a grant funded by the &lt;a href=&#34;https://www.opentech.fund/funds/free-and-open-source-software-sustainability-fund/&#34;&gt;Open Technology Fund&lt;/a&gt;. This grant will help us maintain F-Droid and focus on critical infrastructure work that was often overlooked, due to lack of consistent funding in the past. We’ll be working on improving the resilience and security of our systems, ensuring that F-Droid continues to serve as a reliable, open-source app distribution platform for years to come. There will be an official announcement article coming soon.&lt;/p&gt;

&lt;h2 id=&#34;to-wrap-it-up&#34;&gt;To Wrap it Up&lt;/h2&gt;

&lt;p&gt;As we continue to grow and evolve, we are committed to our mission of decentralizing app distribution, expanding the F-Droid ecosystem, and empowering users with open-source alternatives to proprietary software. With the support of our community, our volunteers, and our new team members, we are excited for what 2025 will bring.&lt;/p&gt;

&lt;p&gt;Thank you for being part of the F-Droid journey!&lt;/p&gt;

&lt;p&gt;We look forward to an exciting year ahead, and we invite you to continue supporting F-Droid through &lt;a href=&#34;https://f-droid.org/contribute/&#34;&gt;contributions&lt;/a&gt;, &lt;a href=&#34;https://f-droid.org/donate/&#34;&gt;donations&lt;/a&gt;, and &lt;a href=&#34;https://floss.social/@fdroidorg&#34;&gt;spreading the word&lt;/a&gt; about our mission. Let’s make 2025 another year of progress for the open-source community!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>First Time Using CalyxOS Review</title>
      <link>https://guardianproject.github.io/info/2024/04/03/first-time-using-calyxos-review/</link>
      <pubDate>Wed, 03 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2024/04/03/first-time-using-calyxos-review/</guid>
      <description>&lt;p&gt;“But how are you planning on using the phone?” he asked me. I paused, a bit confused. “As a replacement for my iPhone. I want to do everything with this phone that I can do with my iPhone, and use it as I normally would.” He took a beat to respond, “Wow, alright. Well let&amp;rsquo;s give it a shot.”&lt;/p&gt;

&lt;p&gt;I would describe myself as tech-curious, but the reality is I am not your typical CalyxOS user. In fact, I didn´t know CalyxOS existed until recently. I am not a software developer, I can´t write code and until recently, I never worked in tech. But none-the-less I found myself needing a replacement for my iPhone and asked HC if they could help me out.&lt;/p&gt;

&lt;p&gt;And in no time my refurbished Google Pixel 4a phone had arrived, loaded and ready to go with CalyxOS. So here is my very unprofessional review of how it went.&lt;/p&gt;

&lt;p&gt;I walked into the Calyx setup process with no expectations. Well, actually I take that back. I expected it to be similar to my 20-something years of iOS experience that I was used to. I expected there to be some sort of introduction and for some sort of apps to be pre-loaded into the phone. I of course knew that the apps and home screen from my old iPhone wouldn´t magically appear on my Google Pixel, and that I would need to manually download them if I wanted to keep using them on my new device. So I was prepared for that, but otherwise, I walked in blind.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;First impressions&lt;/strong&gt;
The introduction and set up process went incredibly smoothly. It was a very similar experience to when I started up a new iPhone for the first time. I needed to select a language and location and then I needed to connect to wifi. So far so good, except that my wifi password is incredibly long and annoying. But that is on me, not Calyx.&lt;/p&gt;

&lt;p&gt;Date and time set up no problem. It accurately identified my general location and the recommended time-zone was correct.&lt;/p&gt;

&lt;p&gt;On to location services there were two options, one was automatically enabled, the other I needed to make a choice. If my memory serves, I don´t think I had this choice when setting up my iPhones in the past. I choose to allow apps to use my location that have asked my permission and kept going. I set up my pin and two fingerprints. This was all very similar to my older iOS phones. Then I encountered the &lt;a href=&#34;https://microg.org/&#34;&gt;microG&lt;/a&gt; instructions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is MicroG?&lt;/strong&gt;
The microG explanation was helpful since I had no idea what microG does. For the uninitiated, it acts like an open source replacement for Google Play services and related software. But it only includes the “useful parts” and most interestingly, it does not have any advertising or location tracking, a bonus if you ask me.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installing the Apps Bundle&lt;/strong&gt;
Then it was time to install the apps bundle.  This was new, since usually the apps come pre-installed on my iPhone. But I thought it was nice that I had a choice here. In any case I left all apps selected and downloaded all of them. I will be doing write-ups on my experiences with those separately in case you want to follow along.&lt;/p&gt;

&lt;p&gt;As they were downloading, there was a useful description about each app, which was a very nice touch for the uninitiated. Because I will be honest, I did not recognize the majority of these apps.&lt;/p&gt;

&lt;p&gt;Next was a prompt asking if I wanted to restore a backup. Which I didn´t have, so I kept going to navigation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Navigation Options&lt;/strong&gt;
Here I had two options, gesture navigation and 3-button navigation. I was not sure what the term gesture navigation meant initially, so the little animation explaining the swiping actions made it very clear. I thought, “Let´s keep this simple” and I went with 3-buttons and off we went to my phone´s home screen.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My new home with CalyxOS&lt;/strong&gt;
My first thought was, “I downloaded a whole bunch of apps, but where are they?” As an iOS user, I was used to seeing all the pre-installed apps just appear, so this threw me off but only for a second or two. I started swiping around on the screen and found them in no time by swiping upwards. But then I quickly realized I did not know what the majority of the apps do, so I would need to familiarize myself with them in order to use them.&lt;/p&gt;

&lt;p&gt;Some apps were more self explanatory than others. For example, the usual basic phone apps, camera, clock, contacts, music, phone, calculator were all very obvious. Then there were some new apps that I didn´t quite know what they did, but the title made it very obvious. For example, K-9 Mail, Riseup VPN, Firewall, Calyx VPN and the Aurora Store.&lt;/p&gt;

&lt;p&gt;A note about the Aurora Store. I saw the little Google Drive logo on the shopping bag, so I thought that might be a place where I can download my Google Play apps. But if I did not see that tiny logo, I might not have known to look there.&lt;/p&gt;

&lt;p&gt;F-Droid I knew as an app store from my previous work and I also recognized Tor Browser, Orbot and OnionShare. I kind of assumed those three were connected because all the logos were purple and there was an onion theme going on which I associated with Tor. So we can say in this case, the branding worked!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A wrinkle in the time-space continuum&lt;/strong&gt;
My only issue with the entire experience was that my location was around 600 kilometers off from my actual real-time location. No matter what app I used, Organic Maps, Google Maps, or SatStat, all said I was in some industrial area in a city 600 kilometers away from my house. In fact, they were so consistent that I thought, maybe it is a wrinkle in the time-space continuum and I really am in two places at once! All jokes aside, I reached out to the very helpful Calyx development team and they are helping me solve the &lt;a href=&#34;https://gitlab.com/CalyxOS/calyxos/-/issues/2257&#34;&gt;issue&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Who knows, at the end of the day it might be the hardware, since no one else has reported this bizarre issue and my phone was refurbished to begin with.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Final Thoughts&lt;/strong&gt;
All in all my experience unboxing and setting up a Calyx phone went very smoothly. And as a tech-curious user, with very little experience in software engineering, I can say it was a very easy switch from iOS to CalyxOS.&lt;/p&gt;

&lt;p&gt;CalyxOS gives you an alternative to big tech, without sacrificing usability. It gave me choices in terms of my data privacy that made me feel safe and more empowered. And it gave me a whole bundle of open source, privacy conscious apps to try out, so I can expand my horizons.&lt;/p&gt;

&lt;p&gt;Moving forward, I am curious to see more iOS and Android users migrate towards CalyxOS as a viable alternative.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The future of our fdroid-compatible app repository</title>
      <link>https://guardianproject.github.io/info/2024/02/24/the-future-of-our-fdroid-compatible-app-repository/</link>
      <pubDate>Sat, 24 Feb 2024 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2024/02/24/the-future-of-our-fdroid-compatible-app-repository/</guid>
      <description>&lt;p&gt;Guardian Project has been running its own &lt;a href=&#34;https://guardianproject.info/fdroid/&#34;&gt;fdroid-compatible app repository&lt;/a&gt; since &lt;a href=&#34;https://guardianproject.info/2012/03/15/our-new-f-droid-app-repository-out-of-date/&#34;&gt;2012&lt;/a&gt;. Up until now, we worked to ensure that our repository had the same standards of free software as the official F-Droid repository.  Therefore, the Guardian Project repository was included in the official F-Droid client app by default.  A lot has changed since then, for the better.  F-Droid has long since stopped shipping pre-built binaries from any provider.  Back in the day, F-Droid shipped some binaries, like Mozilla&amp;rsquo;s Firefox APKs, and allowed some non-free libraries in apps.  The free software ecosystem on Android has since blossomed, so F-Droid no longer needs to make those kinds of compromises.  And F-Droid is completing a big update on how repositories are handled.&lt;/p&gt;

&lt;p&gt;Guardian Project remains committed to producing free software.  But for some of our key use cases, it is unfortunately not yet possible to address them without including some proprietary libraries in our free software apps.  This means that the Guardian Project repository is &lt;a href=&#34;https://gitlab.com/fdroid/fdroidclient/-/merge_requests/1302&#34;&gt;no longer included&lt;/a&gt; in F-Droid by default.  Now, F-Droid can enforce that apps only use free software libraries while Guardian Project cannot yet.  This ties in nicely to two other key development efforts with the official F-Droid client app.  First, the index signer keys for selected repositories are now &lt;a href=&#34;https://gitlab.com/fdroid/fdroidclient/-/merge_requests/1296/diffs?commit_id=54e3975660f97c60ffdd038b1965a30822e033db&#34;&gt;built-in&lt;/a&gt;, that means that the client will automatically verify that the user added the real repository.  Second, F-Droid &lt;a href=&#34;https://gitlab.com/fdroid/fdroidclient/-/merge_requests?milestone_title=1.20&#34;&gt;v1.20&lt;/a&gt; will ship a massive overhaul of the core plumbing and user experience for adding, removing, and managing repositories.  This makes it much easier and safer for users to use repositories that are not built-in.&lt;/p&gt;

&lt;p&gt;What kinds of exceptions does Guardian Project make?  We still work to avoid as many kinds of tracking as possible.  And the code that we create is free software.  The exceptions are all related to proprietary libraries getting built into some of our apps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ProofMode uses a number of Google Play Services libraries, such as Play Integrity (SafetyNet), FusionLocationProvider, and others, to provide extra assurances about the provenance of media files generated on an Android device.&lt;/li&gt;
&lt;li&gt;Circulo and Haven use proprietary Google libraries to assist with accurately finding location and to display maps.&lt;/li&gt;
&lt;li&gt;Save (aka OpenArchive) needs to integrate with widespread proprietary services like Dropbox or Google Drive. When it is useful, we produce free software versions of our apps and get them included on &lt;a href=&#34;https://f-droid.org/packages/net.opendasharchive.openarchive.release/&#34;&gt;f-droid.org&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;There is work underway to get Tor Browser &lt;a href=&#34;https://gitlab.torproject.org/tpo/applications/tor-browser/-/issues/27539#note_2989340&#34;&gt;included&lt;/a&gt; in f-droid.org.  One key blocker has been a proprietary binary library that the build system is &lt;a href=&#34;https://gitlab.com/guardianproject/fdroid-metadata/-/issues/3&#34;&gt;including&lt;/a&gt; anyway, even though it should be disabled in the build.&lt;/li&gt;
&lt;li&gt;Getting Orbot into f-droid.org is on our roadmap, it is already free software and otherwise compliant.  We welcome help maintaining the &lt;a href=&#34;https://gitlab.com/fdroid/fdroiddata/-/blob/master/metadata/org.torproject.android.yml&#34;&gt;build metadata&lt;/a&gt; in &lt;em&gt;fdroiddata&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will continue to &lt;a href=&#34;https://gitlab.com/guardianproject/fdroid-metadata/-/issues/4&#34;&gt;mark&lt;/a&gt; the apps in our repository with Anti-Features according to the &lt;a href=&#34;https://f-droid.org/docs/Anti-Features/&#34;&gt;F-Droid standard&lt;/a&gt;.  If you have found something we have overlooked, please &lt;a href=&#34;https://gitlab.com/guardianproject/fdroid-metadata/-/issues&#34;&gt;open an issue&lt;/a&gt; so we can fix it.  One side benefit of this change is that we can now also include some other important apps for privacy, until there are free software alternatives without any proprietary libraries. Firefox and Signal are two likely candidates, since both apps can be built as free software, but the official builds include proprietary libraries.  In any case, any third party apps we might include here will have to meet the same standards as our own apps.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Arti, next-gen Tor on mobile</title>
      <link>https://guardianproject.github.io/info/2023/03/04/arti-next-gen-tor-on-mobile/</link>
      <pubDate>Sat, 04 Mar 2023 10:00:00 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2023/03/04/arti-next-gen-tor-on-mobile/</guid>
      <description>&lt;p&gt;For software projects with recurring bugs, efficiency or security issues
there&amp;rsquo;s a joke making the rounds in the software industry: &amp;ldquo;Let&amp;rsquo;s re-write it
in &lt;a href=&#34;https://en.wikipedia.org/wiki/Rust_(programming_language)&#34;&gt;Rust&lt;/a&gt;!&amp;rdquo;  It&amp;rsquo;s a
fairly new low-level programming language with the declared goal to help
developers avoid entire classes of bugs, security issues and other pitfalls.
Re-writing software is very time consuming, so it rarely happens, especially
when just one more fix will keep a project up and running.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://torproject.org&#34;&gt;Tor-Project&lt;/a&gt; was started in 2001 using the &lt;a href=&#34;https://en.wikipedia.org/wiki/C_(programming_language)&#34;&gt;C
programming lanugage&lt;/a&gt;.
However a few years ago they set out to actually re-write their project in
Rust.  That projects codename is &lt;a href=&#34;https://arti.torproject.org/&#34;&gt;Arti&lt;/a&gt; and it
was &lt;a href=&#34;https://blog.torproject.org/arti_100_released/&#34;&gt;first released&lt;/a&gt; in 2022.
While Arti is working great, it doesn&amp;rsquo;t have all features of the original Tor
implementation yet.  However, they are steadily working on getting there.  For
example, rough &lt;a href=&#34;https://www.pluggabletransports.info/&#34;&gt;Pluggable Transports&lt;/a&gt;
support was added to Arti in the recent 1.1.0 release.&lt;/p&gt;

&lt;p&gt;We already have early &lt;a href=&#34;https://gitlab.com/guardianproject/arti-mobile-ex/&#34;&gt;test builds of
Arti&lt;/a&gt; running on both
Android and iOS.  The integration we came up with is pretty basic, but so far
it seems to work reliable for accessing the Tor network.  Maintaining code for
both iOS and Android in the same project will hopefully simplify shipping new
Arti releases for us, make integrating Tor capabilities into any app simpler.
To make it useful for the broader mobile developer community, we&amp;rsquo;re also
investigating whether we can provide easy to use API bindings.  We&amp;rsquo;ve created a &lt;a href=&#34;https://gitlab.com/guardianproject/arti-mobile-ex/-/tree/main/android/sample&#34;&gt;sample
app&lt;/a&gt;
on Android to test and illustrate what a minimalistic integration of Arti looks
like.  It&amp;rsquo;s as simple as adding a few lines of code.&lt;/p&gt;

&lt;p&gt;Support for features like advanced censorship circumvention or onion services is not
exactly straight forward on mobile operating systems, because they tend to be
way more locked down than traditional computers.  Currently, we can successfully test
pluggable transports in &amp;ldquo;managed&amp;rdquo; mode on old versions of Android.  However
this technique will likely not work on the latest version of Android and never
worked iOS to begin with.  We have shared our findings with the Arti developer
team and hope they&amp;rsquo;ll work on getting us to full Pluggable Transports support, integraing
with our existing &lt;a href=&#34;https://gitlab.com/guardianproject/IPtProxy&#34;&gt;IPtProxy Library&lt;/a&gt; soon.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Steps towards trusted VPNs</title>
      <link>https://guardianproject.github.io/info/2023/02/28/steps-towards-trusted-vpns/</link>
      <pubDate>Tue, 28 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2023/02/28/steps-towards-trusted-vpns/</guid>
      <description>

&lt;p&gt;VPNs have become quite popular in recent years for a number of reasons, and more and more they are being touted as a privacy tool.  The question is whether using a VPN does improve privacy.  It is clear that VPNs are quite useful for getting access to things on the internet when direct connections are blocked.  VPN providers include a number of tactics in both their client apps and server infrastructure to ensure that their users are able to make a connection.  Then once users are connected, all of their traffic that goes over the VPN will see the internet from the point of view of the VPN&amp;rsquo;s server.  That is how VPNs &amp;ldquo;unblock&amp;rdquo; the internet.  In contrast, some are using VPNs to selectively block things, like making a system-wide &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-block-advertisements-at-the-dns-level-using-pi-hole-and-openvpn-on-ubuntu-16-04&#34;&gt;adblocker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To answer the question about whether they are a useful privacy tool, let&amp;rsquo;s start with the history of where VPNs came from.  VPN stands for Virtual Private Network.  They were developed by large companies with multiple offices and travelling employees.  The goal was to link together all of these offices so that internal data could be freely shared between them without that data going over the internet as easily readable unencrypted plain text.  Then travelling employees could also safely access the internal data via any internet connection.  The key piece of this picture is that the users, employees in this case, already had to trust their VPN provider.  The VPN provider was the company they worked for, and the data they were handling belonged to the company.  So there was no attempt to hide user information from the VPN provider.  Indeed quite the opposite: companies linked the VPN access to each employee&amp;rsquo;s &amp;ldquo;single sign-on&amp;rdquo; account.  Built into the design of VPNs is full trust of the VPN provider, with the aim of keeping the data private from the internet. This setup was also by design, since many large companies wanted to ensure their employees work laptops were still going through the corporate firewall, where the company could block certain sites (e.g. malware, porn), then also &lt;a href=&#34;https://www.fortinet.com/resources/cyberglossary/data-exfiltration&#34;&gt;monitor employees&lt;/a&gt; internet activity to ensure they are not exposing files that the company does not want to be public.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/File:Virtual_Private_Network_overview.svg&#34;&gt;&lt;img src=&#34;Virtual_Private_Network_overview.svg.png&#34; alt=&#34;Virtual Private Network overview&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This does not paint a good picture for a tool to protect privacy.  But there is hope!  It is possible to use a VPN to improve your privacy if you pay attention to some key details.  For VPN services to provide privacy, you have to put a lot of trust in the people who are operating the service.  The VPN provider can see &lt;strong&gt;all&lt;/strong&gt; of your traffic that goes over the VPN, and they have a strong link to your user account with them.  The privacy advantage of a VPN is that the destination sites cannot see which IP address your device is coming from, they will see the VPN provider&amp;rsquo;s IP address.  And your ISP will see you are using a VPN, but not which sites you visit.  With HTTPS, TLS, and end-to-end encryption being widespread, any encrypted content will be protected from the VPN provider also.  But the VPN provider can still see where you are connecting from, which sites and services you are using, what time of day, and even potentially correlate traffic to link activities of their users.  In other words, the VPN operator sees lots of metadata about you, so much so that they could paint a quite detailed portrait of your personal life if they ever did let their data be analyzed.&lt;/p&gt;

&lt;h2 id=&#34;how-to-build-a-privacy-respecting-vpn-service&#34;&gt;How to build a privacy-respecting VPN service&lt;/h2&gt;

&lt;p&gt;There are good signals that VPN services can send to show that they are tackling the real issues.  For example, shipping free software clients, maintaining a &lt;a href=&#34;https://www.eff.org/deeplinks/2016/05/canary-watch-one-year-later&#34;&gt;warrant canary&lt;/a&gt;, posting a clear privacy policy describing the logging policy, and publishing the unredacted results of third party audits.  If the VPN operator is doing the right thing, then VPNs can provide a relatively private way to access the internet.  With a consistent track record of transparency, they can build up a trusted reputation for protecting privacy.  Unfortunately, we cannot rest there since a VPN provider can change their setup quite easily, whether willingly or under duress.  Maintaining consistent, regular, and transparent communications is therefore essential.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Calyx Institute&amp;rsquo;s &lt;a href=&#34;https://calyxinstitute.org/legal/privacy-policy&#34;&gt;Privacy Policy&lt;/a&gt;
and &lt;a href=&#34;https://calyxinstitute.org/about/financials-and-annual-reports&#34;&gt;Financials and Annual Reports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mozilla&amp;rsquo;s &lt;a href=&#34;https://www.mozilla.org/en-US/privacy/principles/&#34;&gt;Data Privacy Principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mullvad&amp;rsquo;s &lt;a href=&#34;https://mullvad.net/help/swedish-legislation/&#34;&gt;Swedish legislation relevant to us as a VPN provider&lt;/a&gt; and &lt;a href=&#34;https://mullvad.net/help/no-logging-data-policy/&#34;&gt;Privacy Policy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On top of that, the &lt;a href=&#34;https://vpnalyzer.org/&#34;&gt;VPNalyzer&lt;/a&gt; project is working to make monitoring VPN services a lot easier and possible to crowdsource.  This gives a third party perspective from some respected organizations.&lt;/p&gt;

&lt;h3 id=&#34;know-as-little-as-possible-about-your-users&#34;&gt;Know as little as possible about your users&lt;/h3&gt;

&lt;p&gt;Many VPN providers require an account and payment information.  This is usually personally identifiable information, like name, credit card information, email address, phone number, billing address, etc.  The most private services have &lt;a href=&#34;https://f-droid.org/2022/02/28/no-user-accounts-by-design.html&#34;&gt;no user accounts by design&lt;/a&gt;.  Calyx, Lavabit, and Riseup VPNs do not require any account or payment at all, so they do not have that information to give out or leak.  Providers that accept payment need a way to tie payment to service, that is usually done using accounts tied to email addresses or phone numbers.  Personal details are not required to make accounts and payments work.  Mullvad uses a randomly generated account number only, there is no link to other identifiers unless you provide them.  Additionally, Mullvad is one of the few VPN vendors that accepts cash payments.  Many technically minded implementers laugh at the idea of processing envelopes of cash, but it is an effective, real world solution to minimizing personal data that software methods struggle to match.&lt;/p&gt;

&lt;h3 id=&#34;keep-as-little-information-as-possible&#34;&gt;Keep as little information as possible&lt;/h3&gt;

&lt;p&gt;The VPN servers unavoidably see lots of information about what users are doing.  The default with most servers is to keep logs of that data. The longer this data is kept, the greater the risk it will be used to identify users and their activities. It does not help that standard practice for running servers is to keep logs for a long time.  Many service providers keep those logs for years.&lt;/p&gt;

&lt;p&gt;VPN providers must be clear about what logs they are keeping, and how long they are stored.  Even better, they will provide information about how they do store the data that they do keep.  For example, if the servers do not use full disk encryption, then it would be straightforward to recover the deleted logs.  That is much harder on systems using full disk encryption.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;a href=&#34;https://cure53.de/audit-report_ivpn.pdf&#34;&gt;2019 audit&lt;/a&gt; of &lt;a href=&#34;https://www.ivpn.net/blog/independent-security-audit-concluded&#34;&gt;IVPN&lt;/a&gt; showed that, at that time, the auditors confirmed that IVPN performed no &amp;ldquo;statistical logging of customer-traffic&amp;rdquo;, &amp;ldquo;logging of traffic, IP addresses or DNS requests&amp;rdquo; on the servers that the auditors were given access to.&lt;/li&gt;
&lt;li&gt;Mullvad says, &amp;ldquo;we never store any activity logs of any kind.&amp;rdquo; in their &lt;a href=&#34;https://mullvad.net/en/help/no-logging-data-policy/&#34;&gt;no logging data policy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;proven-track-record-of-resisting-unjust-legal-intrusion&#34;&gt;Proven track record of resisting unjust legal intrusion&lt;/h3&gt;

&lt;p&gt;There are many legal ways for authorities to get private data, this is an essential part of a functioning justice system.  But these powers are sadly abused in basically every country in the world, it is only a question of degrees.  A VPN provider needs to represent its users legal interests, and push back on legal orders when there is the possibility they are unjust.  Calyx Institute&amp;rsquo;s Nick Merrill provides the shining example in this regard.  With the ACLU, he fought a &lt;a href=&#34;https://en.wikipedia.org/wiki/Doe_v._Ashcroft&#34;&gt;legal case&lt;/a&gt; for over a decade to prevent unjust intrusion for his users.  Ladar Levison shut down his email company &lt;a href=&#34;https://en.wikipedia.org/wiki/Lavabit&#34;&gt;Lavabit&lt;/a&gt; rather than allow the US Government to monitor Edward Snowden&amp;rsquo;s email account.&lt;/p&gt;

&lt;p&gt;There are other ways to ensure that the legal processes are not abused.  These include warrant canaries and disclosure when data had to be turned over via legal procedures.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mozilla&amp;rsquo;s &lt;a href=&#34;https://www.mozilla.org/en-US/about/policy/transparency/&#34;&gt;Transparency&lt;/a&gt; policy&lt;/li&gt;
&lt;li&gt;ProtonVPN&amp;rsquo;s &lt;a href=&#34;https://protonvpn.com/blog/transparency-report/&#34;&gt;Transparency Report &amp;amp; Warrant Canary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Riseup&amp;rsquo;s &lt;a href=&#34;https://riseup.net/canary&#34;&gt;Canary Statement&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;publish-as-much-as-possible-as-free-open-source-software&#34;&gt;Publish as much as possible as free open source software&lt;/h3&gt;

&lt;p&gt;F-Droid works to build &lt;a href=&#34;https://f-droid.org/2022/05/24/buildserver-overhaul-sponsored-by-calyx-institute.html&#34;&gt;services&lt;/a&gt; where free software, &lt;a href=&#34;https://f-droid.org/2022/07/22/maven-central.html&#34;&gt;code&lt;/a&gt; &lt;a href=&#34;https://f-droid.org/2022/09/30/free-software-and-inspection-are-key-to-software-we-can-trust.html&#34;&gt;inspection&lt;/a&gt;, &lt;a href=&#34;https://f-droid.org/2023/01/15/towards-a-reproducible-fdroid.html&#34;&gt;reproducible builds&lt;/a&gt; provide a method to ensure that the software we deliver is trustworthy.  VPN vendors recognize how important trust is, so the good ones work to get their apps into f-droid.org.  The F-Droid community provides the best screening for ensuring Android apps are truly free software.  On top of that, F-Droid flags apps for &lt;a href=&#34;https://f-droid.org/docs/Anti-Features/&#34;&gt;Anti-Features&lt;/a&gt;, which are things that users may not like, but might accept.  Here are VPN clients that do maintain their free software clients in f-droid.org:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/se.leap.bitmaskclient/&#34;&gt;Bitmask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/org.calyxinstitute.vpn/&#34;&gt;Calyx VPN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/nl.eduvpn.app/&#34;&gt;eduVPN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/net.ivpn.client/&#34;&gt;IVPN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/com.lavabit.pahoehoe/&#34;&gt;Lavabit Encrypted Proxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/net.mullvad.mullvadvpn/&#34;&gt;Mullvad VPN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/org.outline.android.client/&#34;&gt;Outline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/ch.protonvpn.android/&#34;&gt;ProtonVPN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/one.librem.tunnel/&#34;&gt;Purism Librem Tunnel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/se.leap.riseupvpn/&#34;&gt;Riseup VPN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/com.tailscale.ipn/&#34;&gt;Tailscale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/com.wireguard.android/&#34;&gt;WireGuard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;use-external-auditors-to-confirm-source-code-and-operations&#34;&gt;Use external auditors to confirm source code and operations&lt;/h3&gt;

&lt;p&gt;External auditors are important because they can bring fresh eyes on the source code, and good auditors are experts at finding issues in source code and server setups.  And responsible organizations will publish the full, unredacted audit report once they have fixed the issues.  Even if a VPN app is included in F-Droid, there are key aspects of the service that cannot be independently verified.  For this, we must rely on the people who run the service to do the right thing.  Audits can demonstrate that they were doing the right thing at the point of time of the audit.  Here are some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IVPN&amp;rsquo;s &lt;a href=&#34;https://cure53.de/audit-report_ivpn.pdf&#34;&gt;2019 audit of IVPN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mozilla VPN had their app source code &lt;a href=&#34;https://blog.mozilla.org/security/files/2021/08/FVP-02-report.final_.pdf&#34;&gt;audited&lt;/a&gt; in 2021 and fixed the issues that were found.&lt;/li&gt;
&lt;li&gt;Mullvad&amp;rsquo;s &lt;a href=&#34;https://cure53.de/pentest-report_mullvad_2020_v2.pdf&#34;&gt;Pentest-Report Mullvad Apps, Clients &amp;amp; API 05.2020&lt;/a&gt;, &lt;a href=&#34;https://cure53.de/pentest-report_mullvad_v2.pdf&#34;&gt;Pentest-Report Mullvad VPN Clients 09.2018&lt;/a&gt;, and &lt;a href=&#34;https://mullvad.net/en/blog/2021/1/20/no-pii-or-privacy-leaks-found-cure53s-infrastructure-audit/&#34;&gt;2020 Infrastructure Audit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Outline&amp;rsquo;s &lt;a href=&#34;https://s3.amazonaws.com/outline-vpn/static_downloads/ros-report.pdf&#34;&gt;2017 Pentratration Test Report&lt;/a&gt; and &lt;a href=&#34;https://s3.amazonaws.com/outline-vpn/static_downloads/cure53-report.pdf&#34;&gt;Pentest &amp;amp; Audit Report Jigsaw Outline 09.-12.2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Proton VPN open sourced their client apps and had them &lt;a href=&#34;https://www.zdnet.com/article/protonvpn-apps-handed-to-open-source-community-in-transparency-security-push/&#34;&gt;audited&lt;/a&gt; in 2019.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;publicly-verifiable-binaries-via-reproducible-builds&#34;&gt;Publicly verifiable binaries via reproducible builds&lt;/h3&gt;

&lt;p&gt;Source code is the easiest place to conduct an audit of software, but it is the binary files that actually run on your device.  Auditing binaries rarely happens since it is so much more time intensive.  And yet, there are ways to change how software works without changing the source code. This can be done by injecting changes into the process that converts the source code into the executable binary.  &lt;a href=&#34;https://reproducible-builds.org/&#34;&gt;Reproducible Builds&lt;/a&gt; is the indisputable method for proving that a given binary was generated by given source code.&lt;/p&gt;

&lt;p&gt;There are some generic VPN clients in Debian that are built reproducibly, but there are no Android or iOS VPN apps or  branded desktop client apps that meet this standard yet.  We recommend that VPN providers work with &lt;a href=&#34;https://wiki.debian.org/ReproducibleBuilds&#34;&gt;Debian&lt;/a&gt;, &lt;a href=&#34;f-droid.org/docs/Reproducible_Builds&#34;&gt;F-Droid&lt;/a&gt;, the &lt;a href=&#34;https://reproducible-builds.org/&#34;&gt;Reproducible Builds&lt;/a&gt; group, or any other relevant &lt;a href=&#34;https://reproducible-builds.org/who/projects/&#34;&gt;project&lt;/a&gt; to achieve this key step.&lt;/p&gt;

&lt;h3 id=&#34;apple-ios&#34;&gt;Apple iOS&lt;/h3&gt;

&lt;p&gt;This post focuses on Android because iOS has a number of issues that make using VPNs for privacy less effective.  For example, VPNs on iOS will &lt;a href=&#34;https://www.bleepingcomputer.com/news/security/unpatched-ios-bug-blocks-vpns-from-encrypting-all-traffic/&#34;&gt;leak IP addresses&lt;/a&gt;.  Apple knows about this issue, yet still has &lt;a href=&#34;https://www.theregister.com/2022/08/19/apple_ios_vpn/&#34;&gt;not fixed&lt;/a&gt; it after a couple years.  On top of that, it is not possible to have reproducible builds on iOS because the actual executable binaries are encrypted by Apple&amp;rsquo;s proprietary Digital Restrictions Management (DRM), so only Apple could ever reproducibly build something.  If you are running Apple iOS, you are stuck trusting Apple to do the right thing, since they operate a relatively opaque, proprietary, strictly walled garden.&lt;/p&gt;

&lt;h2 id=&#34;run-your-own-vpn&#34;&gt;Run your own VPN&lt;/h2&gt;

&lt;p&gt;The VPN security model means you have to put a ton of trust in the operator.  Questions of trust get much easier when you are talking about yourself or own organization.  There are many projects that aim to make it as easy as possible to run your own VPN service.  The good ones are all free software and have been audited, both the client source code and the server side setup.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://amnezia.org&#34;&gt;Amnezia&lt;/a&gt; is a free service to create a personal VPN on your server.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leap.se/&#34;&gt;LEAP VPN&lt;/a&gt; is a &amp;ldquo;white label&amp;rdquo; VPN setup used to build Bitmask, CalyxVPN, RiseupVPN and more.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://getoutline.org/&#34;&gt;Outline&lt;/a&gt; &amp;ldquo;makes it easy to create a VPN server, giving anyone access to the free and open internet.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://we-pn.com/&#34;&gt;WEPN&lt;/a&gt; is a free software kit to become your own VPN provider, designed around a small hardware device.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are also generic VPN client apps based on standard protocols:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/nl.eduvpn.app/&#34;&gt;eduVPN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/de.blinkt.openvpn/&#34;&gt;OpenVPN for Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/en/packages/com.github.shadowsocks/&#34;&gt;Shadowsocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/org.strongswan.android/&#34;&gt;strongSwan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/com.WireGuard.android/&#34;&gt;WireGuard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;comparing-vpns-to-tor-and-masque&#34;&gt;Comparing VPNs to Tor and MASQUE&lt;/h2&gt;

&lt;p&gt;If it is privacy that you seek, then there are other tools to review.  Tor is a longstanding community project that aims to make privacy proxies without compromise. Tor works similarly to VPN in that it is tunneling traffic to shared servers, the big difference is that your traffic is tunneled through three relays (in comparison to single hop VPNs). Each individual Tor relay cannot see the enough to put together a picture of who is doing what. At most, a relay can see what is done, but not who.  Or that someone is accessing Tor, but not their destination.  &lt;a href=&#34;https://guardianproject.info/apps/org.torproject.android/&#34;&gt;Orbot&lt;/a&gt; provides a VPN mode, but this is still full Tor protection, since it is just using the device&amp;rsquo;s VPN user experience to provide access to the Tor network.  &lt;a href=&#34;https://www.torproject.org/&#34;&gt;Tor Browser&lt;/a&gt; then adds whole other layers of privacy protection that can only be implemented in the internet-enabled app.  This includes things like reducing metadata leaks in the HTTPS connection or web APIs, or isolating websites from each other within the browser, so they cannot read data about other sites the user has visited.&lt;/p&gt;

&lt;p&gt;A new approach that is somewhere in between a VPN and Tor are multi-hop &lt;a href=&#34;https://guardianproject.info/2020/02/25/masque-review/&#34;&gt;MASQUE&lt;/a&gt; relays.  MASQUE is a new protocol that is similar to VPN and proxy protocols.  MASQUE is built on HTTP/3 aka QUIC, so it does not stick out as much as VPN or WireGuard traffic.  It also allows for multi-hop configurations.  MASQUE is only newly deployed, so there is not the two decades of experience working to minimize metadata leaks in the processes for relaying traffic.&lt;/p&gt;

&lt;p&gt;Apple iCloud Private Relay is a &lt;a href=&#34;https://blog.cloudflare.com/icloud-private-relay/&#34;&gt;two hop deployment&lt;/a&gt; on MASQUE, which means that the Apple side can see that the user is sending traffic, and the Cloudflare side can see the destination, but not the user.  That does provide a real privacy improvement over a single hop system.  Unfortunately, Apple iCloud Private Relay fails most of the other tests laid out in this post.  Plus given the history of NSA programs like PRISM, and the willingness for US companies like Apple and Google to &lt;a href=&#34;https://www.theguardian.com/world/2013/jun/06/us-tech-giants-nsa-data&#34;&gt;take part&lt;/a&gt;, this setup is not clear protection from NSA and Five Eyes surveillance and targeting.  It would be relatively straightforward for those kinds of agencies to correlate the data from the Apple and Cloudflare side if they have access to the metadata from both sides.&lt;/p&gt;

&lt;p&gt;If privacy is your primary concern, then it is worth investing time into tools like Tor.  If you have limited time and are mostly concerned about mass surveillance, then a good VPN is worth considering for some added privacy protection.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Scanning apps, off the record</title>
      <link>https://guardianproject.github.io/info/2022/09/28/scanning-apps-off-the-record/</link>
      <pubDate>Wed, 28 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2022/09/28/scanning-apps-off-the-record/</guid>
      <description>

&lt;p&gt;Smart phones have brought us so many wonderful capabilities.  They let people around the world access vast realms of information.  They let app developers solve problems large and small in a way most relevent to their local context.  They are personal computers for the world.  They also have given surveillance capitalism an unprecedented reach into everyone&amp;rsquo;s lives. Repressive governments use them in ways that the East German Stasi secret police could only have dreamed of.  And as promising as artificial intelligence is, it is also threatening humanity.  People around the world are pushing back.  This public interest work requires technical inspection of apps.  There are organizations highlighting algorithmic transparency and calling out surveillance capitalism.  Journalists are linking apps into key stories about the misdeeds of powerful companies.  Activists are exposing the hidden machinations of their governments.  All of these people require technical skills to see what a given app is going.&lt;/p&gt;

&lt;p&gt;It turns out that a lot of the technical bits required to do these kinds of investigations can be automated.  When combined with good user experience design, many of the barriers to entry can be removed.  This allows more people to get involved, and for many of these problems to be crowdsourced even.  This is the central focus of our project Tracking the Trackers.  We have just completed the third round of work to bring the initial automation to a more accessible user experience.&lt;/p&gt;

&lt;p&gt;We have discussed these workflows with a number of organizations doing this kind of work to learn about their processes, and how they might be improved.  And we want to hear from more.  There is a lot of potential to pool limited resources to build up a shared, free software resource that is greater than the sum of its parts.  And there are many complementary projects:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;EFF&amp;rsquo;s &lt;a href=&#34;https://github.com/EFForg/apkeep&#34;&gt;apktool&lt;/a&gt; - tool for downloading Android apps from various sources&lt;/li&gt;
&lt;li&gt;F-Droid &lt;a href=&#34;https://f-droid.org/2020/12/21/announcing-issuebot.html&#34;&gt;&lt;em&gt;issuebot&lt;/em&gt;&lt;/a&gt; - automatically review apps via GitLab issues and merge requests&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://about.gitlab.com/topics/ci-cd/&#34;&gt;GitLab CI&lt;/a&gt; - server-less processing tied to issue trackers and merge requests&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git.app-check.org/app-check&#34;&gt;MobilSicher AppCheck&lt;/a&gt; - dynamic analysis for finding personal data leaks in apps&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pts-project.org/&#34;&gt;PiRouge&lt;/a&gt; - mobile forensic and network traffic analysis platform&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://beta.pithus.org/about/&#34;&gt;Pithus&lt;/a&gt; - mobile threat intelligence platform for activists, journalists, NGOs, researchers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;putting-it-all-together&#34;&gt;Putting it all together&lt;/h2&gt;

&lt;p&gt;We have developed a stack to integrate as many tools that are relevant into a single, productive user experience.  Detailed inspection of apps is a process that must be tracked, so the focus is on issue trackers and merge requests.  Each app is tracked as an issue.  A person opens up a new issue, adding what they know about the app, including links to it in an app store, the Application ID, links to any source code, etc.  Then &lt;em&gt;issuebot&lt;/em&gt; kicks in and downloads the app and any source code it can find.  Once successful, it will launch various analysis processed on what it downloaded.  Those results are then compiled into a report which is posted to the issue tracker for the human reviewers.  The bot leaves its mark using a GitLab label called &lt;code&gt;fdroid-bot&lt;/code&gt;.  If someone found more files to download and would like &lt;em&gt;issuebot&lt;/em&gt; to run again, they just remove the &lt;code&gt;fdroid-bot&lt;/code&gt; label and &lt;em&gt;issuebot&lt;/em&gt; will try the whole process again.&lt;/p&gt;

&lt;p&gt;It runs a number of different scans and processes to check:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Inspect apps from F-Droid, Google Play, APKPure, Huawei App Gallery, and GitHub Releases.&lt;/li&gt;
&lt;li&gt;Get the source code&lt;/li&gt;
&lt;li&gt;Build the app from source&lt;/li&gt;
&lt;li&gt;Find the license of the source code&lt;/li&gt;
&lt;li&gt;Extract info about libraries, classes, domain names, URLs, permissions, services, etc.&lt;/li&gt;
&lt;li&gt;Apply signature collections&lt;/li&gt;
&lt;li&gt;What kinds of &lt;a href=&#34;https://f-droid.org/docs/Anti-Features&#34;&gt;Anti-Features&lt;/a&gt; an app has, e.g. tracking, ads, non-free dependencies, known vulnerabilities, etc.&lt;/li&gt;
&lt;li&gt;Whether all the dependencies are also free software&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using this process, the F-Droid community reviews all apps for &lt;a href=&#34;https://f-droid.org/docs/Anti-Features/&#34;&gt;Anti-Features&lt;/a&gt; before accepting them into the &lt;f-droid.org&gt; collection.  For some years now, F-Droid have reviewed new apps and updates via merge requests with &lt;em&gt;issuebot&lt;/em&gt;.  It automatically checks issues on the &lt;a href=&#34;https://gitlab.com/fdroid/rfp/-/issues&#34;&gt;Requests for Packaging&lt;/a&gt; tracker, this is the starting point of the process of adding new apps to the collection.  The collection is then maintained via merge requests on the &lt;a href=&#34;https://gitlab.com/fdroid/fdroiddata/-/merge_requests&#34;&gt;&lt;em&gt;fdroiddata&lt;/em&gt;&lt;/a&gt; project.  There are hundreds of reviews there to browse through, an some &lt;a href=&#34;https://gitlab.com/fdroid/rfp/-/issues/2224#note_1118052837&#34;&gt;scans&lt;/a&gt; that are more interesting.&lt;/p&gt;

&lt;p&gt;We believe this same workflow fits well to many processes for inspecting apps.  GitLab provides the core workflow that fits how many researchers and organizations are already doing this work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Detailed inspection happens over time, over multiple work sessions.&lt;/li&gt;
&lt;li&gt;Multiple people are involved in the process.&lt;/li&gt;
&lt;li&gt;Work can happen asynchronously across time zones and organizations.&lt;/li&gt;
&lt;li&gt;Public GitLab also opens up crowdsourcing opportunities&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We have setup a instance of this setup for public interest organizations and investigators to use.  This is called the &amp;ldquo;Off The Record&amp;rdquo; tracker.  Access is available on request, send an email to &lt;a href=&#34;mailto:support@guardianproject.info&#34;&gt;support@guardianproject.info&lt;/a&gt; to make the request.  Additionally, the whole stack is free software.  Organizations are free to run it as they need to, with any privacy requirements that might need.  That also makes it cheap to host this software, so that it can be affordably provided as a service to people working in the public interest.  It can be &lt;a href=&#34;https://gitlab.com/fdroid/issuebot#installing-into-a-gitlab-project&#34;&gt;self-hosted&lt;/a&gt; with any GitLab &amp;ldquo;Community Edition&amp;rdquo; instance with CI/CD Runners, and also runs on the gratis &lt;a href=&#34;https://gitlab.com/&#34;&gt;https://gitlab.com/&lt;/a&gt; hosting.    It does touch some proprietary services, but only via public APIs so that the functionality is included in the stack.&lt;/p&gt;

&lt;p&gt;One new development is the creation a standard pattern for managing profiles for collections of signatures to detect Anti-Features in Android apps.  F-Droid &lt;a href=&#34;https://gitlab.com/fdroid/suss&#34;&gt;SUSS&lt;/a&gt; (Suspicious or Unwanted Software Signatures) is the first live project, with F-Droid&amp;rsquo;s &lt;code&gt;scanner&lt;/code&gt; tool using it. Before this round of work began, there were multiple silos where related activities were happening.  F-Droid scans for non-free software, Mobil Sicher detects when apps transmit personal data, Exodus Privacy find for tracking software, and IzzySoft looks for Anti-Features of all kinds.  We hope that standardizing data formats and workflows will make contribution and shared maintenance easier, as well as making it easy for organizations to maintain their own collections of signatures they want to detect.  YARA serves as template for this effort. It began at one malware company, and is now used by a &lt;a href=&#34;https://virustotal.github.io/yara/#who-s-using-yara&#34;&gt;wide variety&lt;/a&gt; of organizations. YARA has become the standard tool for writing malware signatures for desktop platforms.  Unfortunately, it is &lt;a href=&#34;https://github.com/VirusTotal/yara/issues/1145&#34;&gt;not well structured&lt;/a&gt; to work for scanning Android apps or source code, but it can serve as a inspiration and model.&lt;/p&gt;

&lt;h2 id=&#34;appendix&#34;&gt;Appendix&lt;/h2&gt;

&lt;h3 id=&#34;a-know-the-local-laws-on-software-inspection&#34;&gt;A) Know the local laws on software inspection.&lt;/h3&gt;

&lt;p&gt;In many places, just the act of inspecting software can get you in trouble with local governments or companies.  This could be anything from &lt;a href=&#34;https://www.vidstromlabs.com/blog/the-legal-boundaries-of-reverse-engineering-in-the-eu/&#34;&gt;unclear laws&lt;/a&gt; &lt;a href=&#34;https://www.eff.org/issues/coders/reverse-engineering-faq&#34;&gt;regarding&lt;/a&gt; &lt;a href=&#34;https://www.twobirds.com/en/insights/2020/germany/vertraglicher-ausschluss-von-reverse-engineering&#34;&gt;reverse engineering&lt;/a&gt; to overreach from law enforcement.  Running the inspection in private means the app reviewers are much less exposed unwarranted or unjust interference.  Anyone doing software inspection should familiarize themselves with local laws and regulation that affect it.&lt;/p&gt;

&lt;p&gt;The biggest challenges that remain for making software inspection commonplace are around how organizations and governments apply this software.  Any organization that wants to start working on auditing software in the public interest will need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Legal guidelines for getting any required permissions before downloading apps to review.&lt;/li&gt;
&lt;li&gt;A home organization for this repository that has a public mission aligned with these goals.&lt;/li&gt;
&lt;li&gt;Legal representation to handle any issues that arise, and to push back against illegitimate requests.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;b-what-no-ios&#34;&gt;B) What, no iOS?&lt;/h3&gt;

&lt;p&gt;We recognize that it is also important to inspect iOS apps.  Compared to Android, the Apple mobile ecosystem is smaller and much more closed and restrictive.  Therefore, it is much more more difficult to inspect.  The application executable binary in the &lt;code&gt;.ipa&lt;/code&gt; file is &lt;a href=&#34;https://stackoverflow.com/questions/5784169/does-apple-modify-ios-application-executables-on-apps-submitted-to-the-app-store/5784332#5784332&#34;&gt;encrypted&lt;/a&gt; which prevents examination of the binary.  The only way to get the actual &lt;code&gt;.app&lt;/code&gt; files is to have a jailbroken iOS device, then manually install them on the device.    Only then can they be extracted and inspected.&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;This work was funded by NLnet as &lt;a href=&#34;https://nlnet.nl/project/EthicalApps/&#34;&gt;The Search for Ethical Apps&lt;/a&gt; under the umbrella of &lt;a href=&#34;https://guardianproject.info/2022/09/01/the-search-for-ethical-apps-lets-start-with-governments/&#34;&gt;Guardian Project&lt;/a&gt;&amp;rsquo;s &lt;a href=&#34;https://guardianproject.info/tags/tracking-the-trackers/&#34;&gt;Tracking the Trackers&lt;/a&gt; effort.&lt;/em&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Search for Ethical Apps: Let&#39;s start with governments</title>
      <link>https://guardianproject.github.io/info/2022/09/01/the-search-for-ethical-apps-lets-start-with-governments/</link>
      <pubDate>Thu, 01 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2022/09/01/the-search-for-ethical-apps-lets-start-with-governments/</guid>
      <description>

&lt;p&gt;Governments across the world are moving services to mobile apps.  The vast majority of these apps are only available in the Google Play store or in the Apple App store.  Installing apps from these services requires users to agree to their terms of service.  This means governments require their citizens to sign opaque and privacy invading contracts with foreign Big Tech in order to use digital services.  This feeds ever more into Big Tech data control, filtering, and information bubbles.  There are some exceptions here, like China has multiple app stores that are popular.  Chinese Big Tech also require restrictive terms of service agreements.  Additionally, many of apps are developed by the same firms that are tied into the surveillance capitalism ecosystem.  So they include features that track the end users. The governments are not demanding data transparency, and these firms have not been delivering it.&lt;/p&gt;

&lt;p&gt;In Austria, there is a clear example: the &lt;a href=&#34;https://www.a-trust.at/en/Handy-Signatur/&#34;&gt;&lt;em&gt;Handy Signatur&lt;/em&gt;&lt;/a&gt; app.  Public health insurance providers require this app for people to access their accounts online. Since COVID-19 countermeasures forced schools into online-mode, many public schools have been requiring education apps for students, parents and teachers to connect with and interact with the school. People with the that app can also sign petitions and download vaccination certificates those without have to do much more work.&lt;/p&gt;

&lt;p&gt;Mobile phone users want to know about what apps are doing with their personal data. Citizens around the world gaining consciousness about these issues.  In order to build public pressure, a critical mass must be aware of these problems. To learn, they must first discover how widespread and entrenched this problem is.  We received funding from &lt;a href=&#34;https://nlnet.nl/project/EthicalApps/&#34;&gt;NLnet&lt;/a&gt; to work on this key area.  This project integrates existing tools and builds a &amp;ldquo;software kit&amp;rdquo; to make it easy to generate data about the apps governments require.  This data will be simple to index so that it citizens and search it and discover the terms their governments are requiring them to take to access e-government services.&lt;/p&gt;

&lt;p&gt;Journalists are just starting to report on this large and growing problem.  One of the few stories in the European media came recently in the Dutch media: &amp;ldquo;&lt;a href=&#34;https://fd.nl/economie-politiek/1383007/overheid-dwingt-burger-in-de-richting-van-google-en-apple&#34;&gt;&lt;em&gt;Overheid dwingt burger in de richting van Google en Apple&lt;/em&gt;&lt;/a&gt;&amp;rdquo; (The authorities force citizens towards Google and Apple).  On top of transparency, governments should also ensure that the apps they make and use are available without privacy concerns or corporate control, and that they are not feeding data to companies that control search algorithms and limit user autonomy.&lt;/p&gt;

&lt;p&gt;This first step is to make a repository with the apps related to government services.  This then provides a template for others to do the same in other countries.  Next steps are include pushing organizations and companies to do the same, for example school and banking apps; getting more country repositories and perhaps an EU repository; an helping governments, organizations, and companies set up good distribution options.  Governments should also list F-Droid as an option for getting the apps whenever they mention Google Play and Apple App Store.  And when governments go &lt;a href=&#34;https://f-droid.org/packages/de.bwl.lfdi.app/&#34;&gt;all&lt;/a&gt; &lt;a href=&#34;https://www.baden-wuerttemberg.datenschutz.de/lfdi-bw-app-f-droid/&#34;&gt;the way&lt;/a&gt;, they should be lauded. 🎉&lt;/p&gt;

&lt;p&gt;We work partners to make this come to life:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;F-Droid provides all the tools for securely publishing and managing app repositories.  F-Droid&amp;rsquo;s community app &lt;a href=&#34;https://gitlab.com/fdroid/rfp/-/issues&#34;&gt;review&lt;/a&gt; &lt;a href=&#34;https://gitlab.com/fdroid/fdroiddata/-/merge_requests&#34;&gt;process&lt;/a&gt; gives us a template to build upon for reviewing all apps in an open way.  F-Droid provides another option that does not lock anyone into any service. There are no terms of service, or even &lt;a href=&#34;https://f-droid.org/2022/02/28/no-user-accounts-by-design.html&#34;&gt;user accounts&lt;/a&gt; to sign up for.  And F-Droid provides a decentralized app distribution ecosystem where anyone can publish their own apps via their own repositories.  If the app is free software, it can be included in the main &lt;a href=&#34;https://f-droid.org&#34;&gt;f-droid.org&lt;/a&gt; repository.  Millions of users have installed F-Droid themselves, and companies like Fairphone have shipped devices with F-Droid pre-installed.  Anyone can freely install F-Droid on any Android device.  So F-Droid provides app distribution without being locked into any service, unlike Google Play.&lt;/li&gt;
&lt;li&gt;ITUJ&amp;rsquo;s &lt;a href=&#34;https://mobilsicher.de/&#34;&gt;mobilsicher&lt;/a&gt; project will provide the user facing service for Germany. Their new repository will serve both as an app distribution provider, and as an example of how other organizations can do the same.  Their impressive &lt;a href=&#34;https://git.app-check.org/app-check&#34;&gt;app-check&lt;/a&gt; review &lt;a href=&#34;https://appcheck.mobilsicher.de/&#34;&gt;platform&lt;/a&gt; is a complete stack for human reviewers to do dynamic analysis, and the database they have built up will be integrated into the review process.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://exodus-privacy.eu.org/&#34;&gt;Exodus Privacy&lt;/a&gt; focuses on tracking embedded in Android apps.  It works based on users requesting apps be reviewed.  It is an important source for this project since it is narrowly focused on detecting and reporting tracking in any Android app.&lt;/li&gt;
&lt;li&gt;EFF created and maintains &lt;a href=&#34;https://github.com/EFForg/apkeep&#34;&gt;&lt;em&gt;apkeep&lt;/em&gt;&lt;/a&gt;, the essential tool for getting the actual app files to inspect when the source code is not available.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://beta.pithus.org/about/&#34;&gt;Pithus&lt;/a&gt; is a mobile threat intelligence platform for activists, journalists, NGOs, researchers that is a entirely open platform supported and maintained by the community.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/techlore/plexus&#34;&gt;Techlore Plexus&lt;/a&gt; is a catalog of Android apps that have been reviewed in terms of compatibility with Google-free devices.  For example, they list whether an app requires Google Play Services to run.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, this is not the complete solution for &lt;a href=&#34;https://www.ethicsinapps.eu/&#34;&gt;ethical apps&lt;/a&gt;.  This is a stepping stone towards the end goal of &amp;ldquo;&lt;a href=&#34;https://publiccode.eu/&#34;&gt;Public&lt;/a&gt; &lt;a href=&#34;https://www.eff.org/deeplinks/2017/10/public-money-public-code-show-your-support-free-software-europe&#34;&gt;Money&lt;/a&gt;, &lt;a href=&#34;https://publiccode.asia/&#34;&gt;Public&lt;/a&gt; &lt;a href=&#34;https://blog.okfn.org/2017/09/20/public-money-public-code/&#34;&gt;Code&lt;/a&gt;&amp;rdquo;.  This project will push governments down that road by outlining easier steps to take as they move towards free software: making apps available for public audit, allowing users to install apps without agreeing to any terms of service, etc.  It enables users of free platforms like CalyxOS, LineageOS, Murena, etc. to get access to public services via their mobile devices.  It gives users with Google Play devices the option to disable Google Play, because they can get the apps they need via F-Droid.&lt;/p&gt;

&lt;h2 id=&#34;the-shape-of-the-work&#34;&gt;The shape of the work&lt;/h2&gt;

&lt;p&gt;Here is the general idea of what this project will do, as outlined in the funding propsal:&lt;/p&gt;

&lt;h3 id=&#34;1-low-maintenance-repositories&#34;&gt;1. Low maintenance repositories&lt;/h3&gt;

&lt;p&gt;Launch an F-Droid app repository for a pre-curated set of apps that includes direct download links.  Ongoing software maintenance is covered since it will be integrated into F-Droid&amp;rsquo;s core offering.  App updates, verification, and hosting for the Austria repository are all covered indefinitely by existing Guardian Project/F-Droid efforts.   Once complete, other launches will require only a website and a launch campaign.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Integrate APK download tools like EFF&amp;rsquo;s &lt;em&gt;apkeep&lt;/em&gt;, &lt;em&gt;gplaycli&lt;/em&gt;, etc. into &lt;em&gt;issuebot&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Build existing automation scripts into user tools&lt;/li&gt;
&lt;li&gt;Link repo publishing with &lt;em&gt;issuebot&lt;/em&gt; posts in GitLab project&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;2-ongoing-review&#34;&gt;2. Ongoing Review&lt;/h4&gt;

&lt;p&gt;Build a public facing app review site based on existing F-Droid methods and software.  This would clearly show the technical factors that go into the review process.  Chosen contributors can submit and review apps there, the public can watch.  This needs some software development and a GitLab instance (could be free hosting on gitlab.com).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Integrate review tools from collaborators&lt;/li&gt;
&lt;li&gt;Sync tracking lib data with Exodus Privacy&amp;rsquo;s public database&lt;/li&gt;
&lt;li&gt;Create canonical F-Droid database of proprietary libraries&lt;/li&gt;
&lt;li&gt;Build out data publishing system, so all extracted data is navigable by scripts&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;3-community-review&#34;&gt;3. Community Review&lt;/h4&gt;

&lt;p&gt;Expand software tooling to allow submission and review to more contributors.  Stage 2 should be running smoothly before opening it up to the public. On top of software development, this needs staff or committed volunteer time spent on managing the community.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;user research on how people think about data extracted from apps&lt;/li&gt;
&lt;li&gt;UX design for &lt;em&gt;issuebot&lt;/em&gt; to represent extracted data in GitLab tracker posts&lt;/li&gt;
&lt;li&gt;document tools so community manager can effectively curate user interactions&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;4-launch-for-new-organization&#34;&gt;4. Launch for new Organization&lt;/h4&gt;

&lt;p&gt;Launch a campaign for other countries and perhaps EU-wide in partnership with civil society organizations and governments.  This could happen after any of the previous stages, e.g. we could help one government setup a &amp;ldquo;pre-curated&amp;rdquo; website and another organization with a &amp;ldquo;community review&amp;rdquo; setup.&lt;/p&gt;

&lt;h3 id=&#34;total-budget-48-000&#34;&gt;Total Budget: 48,000€&lt;/h3&gt;

&lt;p&gt;(&lt;em&gt;We&amp;rsquo;re a little late in publishing this post, the project runs from April through September 2022&lt;/em&gt;).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Implementing TLS Encrypted Client Hello</title>
      <link>https://guardianproject.github.io/info/2021/11/30/implementing-tls-encrypted-client-hello/</link>
      <pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2021/11/30/implementing-tls-encrypted-client-hello/</guid>
      <description>

&lt;p&gt;As part of the &lt;a href=&#34;https://defo.ie/&#34;&gt;DEfO&lt;/a&gt; project, we have been working on
accelerating the development &lt;a href=&#34;https://www.ietf.org/archive/id/draft-ietf-tls-esni-13.html&#34;&gt;Encrypted Client Hello
(ECH)&lt;/a&gt; as
standardized by the IETF.  ECH is the next step in improving Transport Layer
Security (TLS).  TLS is one of the basic building blocks of the internet, it is
what puts the S in HTTPS.  The ECH standard is nearing completion.  That is
exciting because ECH can encrypt the last plaintext TLS metadata that it is
possible to encrypt.  So ECH will bring some real improvements in privacy and
censorship resistance.&lt;/p&gt;

&lt;p&gt;ECH is built on top of TLSv1.3 and &lt;a href=&#34;https://blog.cloudflare.com/handshake-encryption-endgame-an-ech-update/&#34;&gt;completes unfinished
work&lt;/a&gt;
from the TLSv1.3 effort, now that private DNS is a thing. ECH is now in draft-13
and there are many implementations that are interoperating. ECH is working for
&lt;a href=&#34;https://github.com/sftcd/openssl&#34;&gt;OpenSSL&lt;/a&gt;, &lt;a href=&#34;https://bugs.chromium.org/p/boringssl/issues/detail?id=275&#34;&gt;BoringSSL&lt;/a&gt;, &lt;a href=&#34;https://github.com/sftcd/nginx&#34;&gt;nginx&lt;/a&gt;, &lt;a href=&#34;https://github.com/sftcd/httpd&#34;&gt;Apache HTTPD&lt;/a&gt;, &lt;a href=&#34;https://github.com/sftcd/lighttpd1.4&#34;&gt;lighttpd&lt;/a&gt;,
&lt;a href=&#34;https://github.com/sftcd/haproxy/commits/ECH-experimental&#34;&gt;HAProxy&lt;/a&gt;, &lt;a href=&#34;https://github.com/guardianproject/conscrypt/tree/2.6.alpha1638179154.job1828169525&#34;&gt;Conscrypt&lt;/a&gt;, &lt;a href=&#34;https://github.com/niallor/curl&#34;&gt;curl&lt;/a&gt;, and more. There is work underway in &lt;a href=&#34;https://bugzilla.mozilla.org/show_bug.cgi?id=1725938&#34;&gt;Firefox&lt;/a&gt;
and &lt;a href=&#34;https://bugs.chromium.org/p/chromium/issues/detail?id=1091403&#34;&gt;Chromium&lt;/a&gt;. It has been sketched out for &lt;a href=&#34;https://github.com/square/okhttp/issues/6539&#34;&gt;OkHTTP&lt;/a&gt;. Draft versions of ESNI
and ECH have been deployed in Firefox releases and some production web services.&lt;/p&gt;

&lt;p&gt;The main downside of ECH is that it is
&lt;a href=&#34;https://defo.ie/report.html#issuesarising&#34;&gt;complex&lt;/a&gt;, and most of that is
unavoidable.  Large scale websites have complicated server-side setups, and ECH
has to work in those setups.  That is where ECH&amp;rsquo;s complexity comes from.  &lt;a href=&#34;https://www.ietf.org/archive/id/draft-ietf-dnsop-svcb-https-07.html&#34;&gt;DNS
SVCB and HTTPS RR
Types&lt;/a&gt; is a
related standard to encapsulate the complexity of large scale websites a single
DNS lookup.  It adds additional complexity since it might include the TCP port
number for the service, while TLS implementations mostly assume that the port
number is known before doing a DNS lookup.&lt;/p&gt;

&lt;p&gt;ECH was formerly known as Encrypted SNI (ESNI), which it replaces.  So do not
expect updates to ESNI unless ECH proves too complicated for implementers. ECH
is more complex to implement in the TLS library than ESNI.  Once it is
implemented in the TLS library, then implementing the next level of managing the
keys and hostnames is quite similar between ESNI and ECH.  The rest of this post
will be diving into details about that complexity and what it takes to implement
ECH.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;do-not-stick-out.jpg&#34; alt=&#34;Do Not Stick Out&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;do-not-stick-out&#34;&gt;Do Not Stick Out&lt;/h2&gt;

&lt;p&gt;ECH implementers must also work to ensure that their implementation does not
create packets that look &lt;a href=&#34;https://www.ietf.org/archive/id/draft-ietf-tls-esni-13.html#name-do-not-stick-out&#34;&gt;look
different&lt;/a&gt;
than other implementations.  How ECH is implemented will affect
fingerprintability.  Right now, BoringSSL, OpenSSL, and Firefox all put the ECH
extension in different places, so it is easy for a network observer to tell
which of them is serving as the client in a TLS session.  Ideally, all
implementations would create network packages that look identical to the network
observer.  To get an idea of this problem in the real world, see &lt;a href=&#34;https://gitlab.torproject.org/tpo/anti-censorship/pluggable-transports/snowflake/-/issues/40014&#34;&gt;this detailed
technical
discussion&lt;/a&gt;
of metadata ordering in DTLS as used in WebRTC.&lt;/p&gt;

&lt;h2 id=&#34;getting-the-keys&#34;&gt;Getting the keys&lt;/h2&gt;

&lt;p&gt;ECH encrypts the first stage of the negotiation between the client and server,
the &lt;em&gt;ClientHello&lt;/em&gt; packet using a new type of key and related configuration.
This is known as an &amp;ldquo;ECH Config&amp;rdquo;.  This negotiation is what sets up the
encrypted TLS connection, so to encrypt the negotiation, so the keys can not be
derived from the certificates and negotiation itself.  ECH also needs new
methods distributing this ECH Config.  HTTPS/SVCB therefore includes ECH Config Lists,
and DNS is the recommended way to get ECH Config Lists.  Other distribution
methods are also possible, and ECH implementation should provide a method to
directly supply ECH Config Lists.&lt;/p&gt;

&lt;p&gt;When using ECH in conjunction with HTTPS/SVCB, the DNS needs to be handled differently
than the common, decades old practices that most TLS stacks are built on.  The
ECH Config List must match the IP address so that multi-CDN setups still work.
That ensures the server gets the ECH Config that matches its ECH private keys,
not the one for a separate server.  If the A/AAAA lookup is done separately from
the HTTPS/SVCB lookup, they might not match since the results could come from
different caches, etc.  It is not yet clear where the right place to handle that
DNS is, but it is clear that clients that implement HTTPS/SVCB and ECH will need to
consider that DNS will touch different parts of the stack.&lt;/p&gt;

&lt;p&gt;Which part of the stack will handle the HTTPS/SVCB look up depends on whether
the code is acting as a library or more as the client itself.  For example,
libraries like OkHTTP or Conscrypt can both act as a TLS library, providing the
blocks for implementing TLS in an app.  They can also act as the TLS client
itself, the app just needs to open the hostname and port to get a connection.
This is especially true for OkHTTP, which can also handle DNS itself with its
own DNS-over-HTTPS implementation.  Most apps will expect to just open a URL and
have it work without providing anything else.  In the case of HTTP libraries
like OkHTTP or Volley, Conscrypt becomes the provider of TLS functions rather
than the client.  OkHTTP&amp;rsquo;s default setup will probably want to treat Conscrypt
like the client and do zero config.  But there are use cases where apps want to
handle DNS in OkHTTP, in that case Conscrypt is a library.  Another way this
could be broken down would be to have Conscrypt only be the TLS library, then
leave the DNS to the HTTP stacks.  Then each HTTP library would have to have
their own ECH and HTTPS/SVCB handling (In Android, that would mean
&lt;tt&gt;HttpURLConnection&lt;/tt&gt;, OkHTTP, Volley, Apache HTTP Client, etc).  Python
provides another example with HTTP libraries like &lt;a href=&#34;https://github.com/psf/requests/issues/5972&#34;&gt;Requests&lt;/a&gt; working in
combination with the core &lt;a href=&#34;https://bugs.python.org/issue45567&#34;&gt;&lt;tt&gt;ssl&lt;/tt&gt;&lt;/a&gt; module.&lt;/p&gt;

&lt;p&gt;One thing that is clear here: whichever piece initiates the HTTPS/SVCB DNS query
should also handle the ECH Config, and setting up the lower levels.  On top of
this, ECH has GREASE and &amp;ldquo;Retry Configs&amp;rdquo;.  GREASE is a key part of ensuring that
ECH connections do not stick out.  GREASE makes the network observer see TLS
packets that look the same as connections that successfully used an ECH Config
to encrypt.  Retry Configs are sent by the server if it cannot decrypt what the
client sent.  Whichever piece of the code handles the ECH Config List should
then also handle GREASE and the Retry Configs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://blog.cloudflare.com/encrypted-client-hello/&#34;&gt;&lt;img src=&#34;tls-ech-negotiation.png&#34; alt=&#34;TLS ECH Negotiation&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;outer-and-inner-clienthello&#34;&gt;Outer and Inner &lt;em&gt;ClientHello&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;This post began by saying that ECH was complex.  Most of that complexity stems
from the concept of &lt;em&gt;ClientHelloOuter&lt;/em&gt; and &lt;em&gt;ClientHelloInner&lt;/em&gt;.  They are sort of
parallel versions of the TLS &lt;em&gt;ClientHello&lt;/em&gt;, with &lt;em&gt;ClientHelloOuter&lt;/em&gt; being
plaintext and &lt;em&gt;ClientHelloInner&lt;/em&gt; being encrypted.  Many of the same bits of
metadata can be set in either &lt;em&gt;ClientHelloOuter&lt;/em&gt; or &lt;em&gt;ClientHelloInner&lt;/em&gt;, or even
in both.  And the outer and inner values can be different.  For example, the
outer plaintext SNI could be set to a generic domain name, while the inner could
be set to a different domain name that the client wants to protect.  Whenever
the client needs to manage what is set in &amp;ldquo;inner&amp;rdquo;, &amp;ldquo;outer&amp;rdquo;, etc., then extra
complexity is exposed all the way up to the app using the ECH client.  Also, so
many possible configuration options also means so many ways that the negotiation
might fail.&lt;/p&gt;

&lt;p&gt;BoringSSL&amp;rsquo;s &lt;code&gt;SSL_set1_ech_config_list()&lt;/code&gt; provides a good example of this complexity:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If a supported ECHConfig is found, &lt;tt&gt;ssl&lt;/tt&gt; will encrypt the true
ClientHello parameters. If the server cannot decrypt it, e.g. due to a key
mismatch, ECH has a recovery flow. &lt;tt&gt;ssl&lt;/tt&gt; will handshake using the
cleartext parameters, including a public name in the ECHConfig. If using
&lt;tt&gt;SSL_CTX_set_custom_verify&lt;/tt&gt;, callers should use
&lt;tt&gt;SSL_get0_ech_name_override&lt;/tt&gt; to verify the certificate with the public
name. If using the built-in verifier, the &lt;tt&gt;X509_STORE_CTX&lt;/tt&gt; will be
configured automatically.&lt;/p&gt;

&lt;p&gt;If no other errors are found in this handshake, it will fail with
&lt;tt&gt;SSL_R_ECH_REJECTED&lt;/tt&gt;. Since it didn&amp;rsquo;t use the true parameters, the
connection cannot be used for application data. Instead, callers should handle
this error by calling &lt;tt&gt;SSL_get0_ech_retry_configs&lt;/tt&gt; and retrying the
connection with updated ECH parameters. If the retry also fails with
&lt;tt&gt;SSL_R_ECH_REJECTED&lt;/tt&gt;, the caller should report a connection failure.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;a-walk-through-which-pieces-needs-to-do-what&#34;&gt;A walk through which pieces needs to do what&lt;/h2&gt;

&lt;p&gt;Let us return to the Python example to go through the pieces needed to implement
ECH there.  Starting at the lowest level, the Python &lt;tt&gt;ssl&lt;/tt&gt; is built on
top of OpenSSL, so the new ECH functions in OpenSSL need to be included and
exposed in &lt;tt&gt;ssl&lt;/tt&gt;&amp;rsquo;s API.  Unlike with a plain TLSv1.3 connection,
&lt;tt&gt;ssl&lt;/tt&gt; would not set up an ECH connection without additional configuration
as long as &lt;tt&gt;ssl&lt;/tt&gt; does not include the additional DNS requirements needed
to fetch the ECH Config.  The DNS could instead be implemented in the HTTP
library.  Requests is built on top of urllib3, so urllib3 could implement
HTTPS/SVCB handling.  Then Requests would automatically get ECH connections.
Since it can be necessary to handle the ECH Config outside of DNS, urllib3 and
Requests could provide methods for the app to submit the ECH Config.  This would
mean overriding any HTTPS/SVCB handling in Requests and urllib3.&lt;/p&gt;

&lt;p&gt;Based on this outline, these are the pieces that need to be implemented:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTPS/SVCB DNS queries for getting ECH Config Lists, IP, and other config.&lt;/li&gt;
&lt;li&gt;A way to provide ECH Config Lists as bytes directly to the &lt;tt&gt;ssl&lt;/tt&gt; module.&lt;/li&gt;
&lt;li&gt;A method to ensure encrypted DNS is used so all metadata is encrypted.&lt;/li&gt;
&lt;li&gt;A method to enable and disable GREASE, ideally with GREASE default on.&lt;/li&gt;
&lt;li&gt;A callback that gets called whenever ECH negotiation fails and the server
offers a &amp;ldquo;Retry Config&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Potentially also controls of what to send in the &lt;em&gt;ClientHelloOuter&lt;/em&gt; versus the
&lt;em&gt;ClientHelloInner&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From the point of view of the client implementation, there is a big difference
between TLS before and after ECH.  This new complexity may look scary but this
is a clear path to providing strong privacy protections with TLS that can be as
widely deployed as TLSv1.3 is now.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Data Sources: API Key Identifiers and BroadcastReceiver Declarations</title>
      <link>https://guardianproject.github.io/info/2020/12/15/new-data-sources-api-key-identifiers-and-broadcastreceiver-declarations/</link>
      <pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2020/12/15/new-data-sources-api-key-identifiers-and-broadcastreceiver-declarations/</guid>
      <description>

&lt;p&gt;A central focus of the &lt;a href=&#34;https://gitlab.com/trackingthetrackers/wiki&#34;&gt;Tracking the
Trackers&lt;/a&gt; project has
been to find simple ways to detect whether a given Android APK app
file contains code which tracks the user.  The ideal scenario is a
simple program that can scan the APK and tell a non-technical user
whether it contains trackers, but as decades of experience with
anti-virus and malware scanners have clearly demonstrated, scanners
will always contain a large degree of approximation and guesswork.
Tracking the Trackers grew out of experiments in using machine
learning to detect malware.  This provided the spark to apply this to
privacy issues.&lt;/p&gt;

&lt;p&gt;The malware research clearly demonstrates that network domain names
and code signatures are quite reliable techniques for identifying
malware.  This also applies to tracking, since the majority of
tracking happens via tracking companies&amp;rsquo; SDKs which send data to
specific domain names.  The hard part is that code signatures and
domain names are not easy to reliably extract, and are often easy to
obfuscate when someone is looking to hide what an app is actually
doing.  This is common in malware, and we are also starting to see
obfuscation in the world of tracking.&lt;/p&gt;

&lt;p&gt;Android gives us a break with its
&lt;a href=&#34;https://developer.android.com/guide/topics/manifest/manifest-intro&#34;&gt;&lt;em&gt;AndroidManifest.xml&lt;/em&gt;&lt;/a&gt;.
It is a hard requirement for Android apps so it is always there, it
contains some key declarations that set up how the code is run, and it
is easy to extract and parse.  So we put extra effort in thinking
about the data that is contained in the &lt;em&gt;AndroidManifest.xml&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Towards the goal of simple scanners for tracking, we are excited by
two new data sources that we found in the &lt;em&gt;AndroidManifest.xml&lt;/em&gt; that
are useful signals for automatically detecting tracking in Android
apps: API Key Identifiers and &lt;em&gt;BroadcastReceiver&lt;/em&gt; Declarations.&lt;/p&gt;

&lt;h3 id=&#34;api-key-identifiers&#34;&gt;API Key Identifiers&lt;/h3&gt;

&lt;p&gt;Tracking services provide their customers with servers to submit the
data for processing and analytics.  These are usually part of the
service&amp;rsquo;s API.  A common pattern for publicly accessible network APIs
is to require the use of an API Key.  This key grants access to the
service and provides an unique identifier for the customer so that the
submitted data goes to the right place.  In order to submit the key to
the API, the key data must be identified to the server somehow.  That
is the API Key Identifier.  This is generally something that never
changes, since changing it could mean locking out all customers.  For
example, &lt;a href=&#34;https://developers.google.com/android/reference/com/google/android/gms/analytics/Tracker&#34;&gt;Google Firebase
Analytics&lt;/a&gt;
has used &lt;code&gt;ga_trackingId&lt;/code&gt; as its API Key Identifier for many years. API
Key Identifiers are a great way to track trackers.  They are tiny and
easy to extract.  Most services require them.  The entire set that we
have found is small enough to fit into a single machine learning
search space.  And it is quite unlikely that an app would include them
by accident or without having set up a tracking service.&lt;/p&gt;

&lt;p&gt;We also found &lt;a href=&#34;https://github.com/Exodus-Privacy/etip/issues/62#issuecomment-613964965&#34;&gt;some
evidence&lt;/a&gt;
of obfuscated API Key Identifiers, the source has not yet been
identified.  We found many API Key Identifiers that were not the same
but matched a pattern.  This pattern looks like it could be encoding
some information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;tt&gt;com.APpuz.lHMBA142332.APIKEY&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt&gt;com.BCcyZzWehh.IOfazFfwIH109433.APIKEY&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt&gt;com.CDwo.buYv134822.APIKEY&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt&gt;com.DErSuvPp.bEyhwTQb93737.APIKEY&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt&gt;com.EOoOEpvG.ZuepOuto31966.APIKEY&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt&gt;com.FIKDGlAZIZ.vrlGNzSLEm110206.APIKEY&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;&lt;tt&gt;com.GicPdlXU.iXbdAAkA69030.APIKEY&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;API Key Identifiers are now &lt;a href=&#34;https://github.com/Exodus-Privacy/etip/issues/62&#34;&gt;included as a data
point&lt;/a&gt; gathered in
&lt;a href=&#34;https://guardianproject.github.io/info/2020/12/11/%CE%B5xodus-etip-the-canonical-database-for-tracking-trackers/&#34;&gt;Exodus ETIP&lt;/a&gt;.
If you have some clues about any of this, please &lt;a href=&#34;https://gitlab.com/trackingthetrackers/wiki/-/issues/6&#34;&gt;let us
know&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;broadcastreceiver-declarations&#34;&gt;&lt;em&gt;BroadcastReceiver&lt;/em&gt; Declarations&lt;/h3&gt;

&lt;p&gt;In Android, apps and the
&lt;a href=&#34;https://developer.android.com/about/versions/11/reference/broadcast-intents-30&#34;&gt;system&lt;/a&gt;
can publicly broadcast events, and any app can listen for these
events.  Some of these events contain detailed information, like the
&lt;a href=&#34;https://gitlab.com/trackingthetrackers/wiki/-/issues/5&#34;&gt;complete metadata&lt;/a&gt;
about which song is currently playing.  Charging and battery status
can be used to
&lt;a href=&#34;https://blog.lukaszolejnik.com/battery-status-readout-as-a-privacy-risk/&#34;&gt;re-identify users&lt;/a&gt;.
These broadcast events are generic Android &lt;code&gt;Intents&lt;/code&gt; which an app
registers a receiver by name in order to get the info when it is sent.
The specific pieces of interest are the
&lt;em&gt;&lt;a href=&#34;https://developer.android.com/reference/android/content/BroadcastReceiver&#34;&gt;BroadcastReceiver&lt;/a&gt;
&lt;a href=&#34;https://developer.android.com/reference/android/content/IntentFilter&#34;&gt;IntentFilter&lt;/a&gt;
&lt;a href=&#34;https://developer.android.com/guide/components/intents-filters#Building&#34;&gt;Action&lt;/a&gt;&lt;/em&gt;
names.&lt;/p&gt;

&lt;p&gt;Like other bits in the &lt;em&gt;AndroidManifest.xml&lt;/em&gt;, the &lt;em&gt;BroadcastReceiver&lt;/em&gt;
Declarations are easy to extract.  Unfortunately, &lt;em&gt;BroadcastReceiver&lt;/em&gt;
Declarations are not nearly has definitive when it comes to marking
tracking.  They are still worth including, since they are easy to
extract, and the whole set of unique, extracted names is small enough
to be used as a search space for the machine learning.&lt;/p&gt;

&lt;p&gt;The scope of how apps can receive data via &lt;em&gt;BroadcastReceivers&lt;/em&gt; was
also recently
&lt;a href=&#34;https://developer.android.com/about/versions/oreo/background#broadcasts&#34;&gt;narrowed&lt;/a&gt;
to a large degree by Google, due to privacy concerns.  The upside is
that apps cannot receive system-wide broadcasts unless they are
already running.  The downside is that scanners have to do static code
analysis, and perhaps even dynamic analysis, in order to see which
&lt;em&gt;BroadcastReceiver IntentFilter Action&lt;/em&gt; names an app has declared.&lt;/p&gt;

&lt;h2 id=&#34;usage-considerations&#34;&gt;Usage Considerations&lt;/h2&gt;

&lt;p&gt;The possibility of false positives is still there.  For example, if
someone makes a &amp;ldquo;build flavor&amp;rdquo; that builds without tracker SDKs but
forgets to exclude the API Key Identifiers, then a simple scanner will
flag this as tracking, even though it could not be.  The tracker SDK
is not included, which is the code that gathers and uploads the
tracking data.  In this example, the developer can easily fix it after
a scanner flags the app as a tracker, by moving the API key
configuration out of the &amp;ldquo;build flavor&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;A trickier case to review is when an app includes opt-in tracking.  We
believe that opt-in tracking and data reporting should not be flagged
as a tracker, especially when the opt-in user experience makes it
clear to the user what data is being gathered, and under what
condition it is being sent.  In that case, the simple scanner will
flag the app, since it contains the API Key Identifier.&lt;/p&gt;

&lt;p&gt;This is why we think that machine learning is very promising for
tracking apps that track us.  There are many good signals, but none of
them definitely mark an app as a tracker.  They must always be
considered as a group with the whole picture, and given well-labeled
data, machine learning can do this kind of task quite accurately.&lt;/p&gt;

&lt;h2 id=&#34;join-the-hunt&#34;&gt;Join the Hunt!&lt;/h2&gt;

&lt;p&gt;Finding API Key Identifiers is work that can be done in bite-sized
pieces, by people in their spare time.  Many if not most tracker SDKs
require API keys in order to use their service, so start by looking
through &lt;a href=&#34;https://etip.exodus-privacy.eu.org/trackers/all&#34;&gt;ETIP&lt;/a&gt; for
entries that are missing &lt;code&gt;Api_key_ids&lt;/code&gt; entries.  Usually, this is
documented in their SDK developer documentation.  There are also many
SDKs which set the API Key via a &lt;a href=&#34;https://github.com/Exodus-Privacy/etip/issues/62#issuecomment-598272804&#34;&gt;method
call&lt;/a&gt;
rather than a declaration in an XML file.  In that case, the API Key
Identifier might be found by reading the strings out of the JAR
file. We also welcome more information about &lt;em&gt;BroadcastReceiver&lt;/em&gt;
declarations.  We are tracking new data sources and approaches in our
&lt;a href=&#34;https://gitlab.com/trackingthetrackers/wiki/-/issues&#34;&gt;issue tracker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For any kind of mass scanning to be usable, future work should focus
on expanding the set of easy to extract features, and finding which of
those are useful.  Complicated and resource-intensive extractions like
domain names, code signatures, and source/sink tracing still hold
promise for delivering high accuracy, but would likely remain only
useful when scanning individual or small sets of apps.&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;This work was supported by NLnet&amp;rsquo;s &lt;a href=&#34;https://nlnet.nl/thema/NGIZeroPET.html&#34;&gt;NGI Zero PET&lt;/a&gt; fund.&lt;/em&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>εxodus ETIP: The Canonical Database for Tracking Trackers</title>
      <link>https://guardianproject.github.io/info/2020/12/11/%CE%B5xodus-etip-the-canonical-database-for-tracking-trackers/</link>
      <pubDate>Fri, 11 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2020/12/11/%CE%B5xodus-etip-the-canonical-database-for-tracking-trackers/</guid>
      <description>

&lt;p&gt;There is a new story to add to the list of horrors of &lt;a href=&#34;https://en.wikipedia.org/wiki/Surveillance_capitalism&#34;&gt;Surveillance Capitalism&lt;/a&gt;: the United States&amp;rsquo; Military is &lt;a href=&#34;https://www.vice.com/en/article/jgqm5x/us-military-location-data-xmode-locate-x&#34;&gt;purchasing tracking and location data&lt;/a&gt; from companies that track many millions of people.  We believe the best solution starts with making people aware of the problem, with tools like &lt;a href=&#34;https://exodus-privacy.eu.org/&#34;&gt;Exodus Privacy&lt;/a&gt;.  Then they must have real options for stepping out of &amp;ldquo;big tech&amp;rdquo;, &lt;a href=&#34;https://www.theguardian.com/technology/2017/nov/28/android-apps-third-party-tracker-google-privacy-security-yale-university&#34;&gt;where tracking dominates&lt;/a&gt;.  &lt;a href=&#34;https://f-droid.org&#34;&gt;F-Droid&lt;/a&gt; provides Android apps that are reviewed for tracking and other &lt;a href=&#34;https://f-droid.org/en/docs/Anti-Features/&#34;&gt;&amp;ldquo;anti-features&amp;rdquo;&lt;/a&gt;, and F-Droid is built into mobile platforms like &lt;a href=&#34;https://calyxos.org/&#34;&gt;CalyxOS&lt;/a&gt; that are free of proprietary, big tech software.&lt;/p&gt;

&lt;p&gt;Right now, the most effective method for automatically analyzing
Android APK files is to search for well known strings in the extracted
contents of the APK.  Domain names are one example, like if an app is
sending data to &lt;code&gt;google-analytics.com&lt;/code&gt; or &lt;code&gt;facebook.com&lt;/code&gt;, then it is
clear that it is doing some kind of tracking.  These lists of well
known strings must be created and managed by people, then gathered and
reviewed.  &lt;a href=&#34;https://exodus-privacy.eu.org/&#34;&gt;Exodus Privacy&lt;/a&gt; created
their &lt;a href=&#34;https://etip.exodus-privacy.eu.org/&#34;&gt;Exodus Tracker Investigation Platform
(ETIP)&lt;/a&gt; for exactly this purpose.  &lt;a href=&#34;https://github.com/YalePrivacyLab/tracker-profiles&#34;&gt;Yale Privacy Lab&lt;/a&gt;, &lt;a href=&#34;https://github.com/jawz101/potentialTrackers&#34;&gt;&lt;em&gt;jawz101&lt;/em&gt;&lt;/a&gt;, Guardian Project, F-Droid, and others have centralized their efforts on εxodus ETIP as the canonical database for these strings.&lt;/p&gt;

&lt;h2 id=&#34;searching-the-open-web-for-key-bits-of-info&#34;&gt;Searching the open web for key bits of info&lt;/h2&gt;

&lt;p&gt;Since tracking is mostly done by companies trying to get customers,
they advertise and document their services on the web.  We spent some
time searching for that information to see what we could find.  We
mostly searched using two bits of information: the API Key Identifiers
that we
&lt;a href=&#34;https://gitlab.com/trackingthetrackers/extracted-features/-/blob/master/axml-meta-data-run&#34;&gt;extracted&lt;/a&gt;
and &amp;ldquo;top 10&amp;rdquo; lists of companies that provide tracking and related
services.  From this, we added over 50 new service profiles to the
εxodus ETIP database.  We also added upwards of 100 pieces of
additional information to existing entries like SDK identity strings,
links to documentation, privacy policies, and information on the
company&amp;rsquo;s tracking methods.&lt;/p&gt;

&lt;p&gt;From that research, we saved some choice promises from selected tracking companies:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Glassbox offers customer experience analytics solutions that
doesn’t just tell you what a customer is doing. It tells you why.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Target traffic from all sources, including the 50% from the hidden
web where third-party cookies are blocked, to increase targetable
inventory.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Collect customer and product data in real time, from anywhere&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;PlaytestCloud will capture the whole gameplay experience, turning
you into a spectator with super powers.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;We record the players’ screen, their touches and what they have to
say at all times.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;We curate geospatial ground truth data sets on a global scale&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Take segmentation and analysis from overnight to real-time. Our DMP
works in-session for perfect match rates even on passerby traffic.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;crowdsourcing-the-hunt-for-trackers&#34;&gt;Crowdsourcing the hunt for trackers&lt;/h2&gt;

&lt;p&gt;Tracking the trackers is the kind of work that fits in very well with
crowdsourcing.  Tracking companies are disappearing and renaming
themselves all the time, in order to avoid too much scrutiny.  But
they still must reach out to developers in order to find customers.
That means we can find them.  Join in the search!  Non-technical
people can also contribute, for example, when you read news about a
tracking company,
&lt;a href=&#34;https://etip.exodus-privacy.eu.org/trackers/all&#34;&gt;search&lt;/a&gt; to see if it
is already in ETIP.  If not, &lt;a href=&#34;https://github.com/Exodus-Privacy/etip/issues&#34;&gt;file an
issue&lt;/a&gt; to request it is
added. Android developers with little bits of spare time can add code
signatures, domain names, and other key technical details to ETIP.  Or
even &lt;a href=&#34;https://gitlab.com/trackingthetrackers/scripts/-/blob/master/find-ga_trackingId.py&#34;&gt;code up quick scripts&lt;/a&gt;
with new ideas for detecting tracking.&lt;/p&gt;

&lt;p&gt;There are a number of forums where you can ask for assistance in
getting started.  Hope to hear from you soon!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://exodus-privacy.eu.org/en/page/contribute/&#34;&gt;Contributing to Exodus Privacy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://forum.f-droid.org&#34;&gt;F-Droid Forum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/about/#contact&#34;&gt;F-Droid chat rooms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://guardianproject.info/contact/&#34;&gt;Guardian Project channels&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(&lt;em&gt;This work was supported by NLnet&amp;rsquo;s &lt;a href=&#34;https://nlnet.nl/thema/NGIZeroPET.html&#34;&gt;NGI Zero PET&lt;/a&gt; fund.&lt;/em&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Distribution in Depth: Mirrors as a Source of Resiliency</title>
      <link>https://guardianproject.github.io/info/2020/12/07/distribution-in-depth-mirrors-as-a-source-of-resiliency/</link>
      <pubDate>Mon, 07 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2020/12/07/distribution-in-depth-mirrors-as-a-source-of-resiliency/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;distribution.png&#34; alt=&#34;distribution&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There are many ways to get the apps and media, even when the Internet is expensive, slow, blocked, or even completely unavailable.  Censorshop circumvention tools from ShadowSocks to Pluggable Transports can evade blocks.  Sneakernets and &lt;a href=&#34;https://briarproject.org/how-it-works/&#34;&gt;nearby connections&lt;/a&gt; work without any network connection.   Hosting on Content Delivery Networks (CDNs) can make hosting drastically cheaper and faster.  One method that is often overlooked these days is repository mirrors.  Distribution setups that support mirrors give users the flexibility to find a huge array of solutions for problems when things are not just working.  Mirrors on local networks can be much cheaper. Mirrors in specific countries are often not blocked or filtered.  Mirrors can be copied onto portable storage and moved to where the users are.&lt;/p&gt;

&lt;p&gt;Repository mirrors are mostly associated with free software distribution.  Every major GNU/Linux distro, from &lt;a href=&#34;https://www.debian.org/mirror/list&#34;&gt;Debian&lt;/a&gt; to Red Hat, is available via mirrors.  Software collections like Android/Java&amp;rsquo;s &lt;a href=&#34;https://maven.apache.org/guides/mini/guide-mirror-settings.html&#34;&gt;Maven Central&lt;/a&gt; and Python&amp;rsquo;s &lt;a href=&#34;https://pip.pypa.io/en/stable/reference/pip_install/#install-index-url&#34;&gt;PyPI&lt;/a&gt; support mirrors as well.  &lt;a href=&#34;https://f-droid.org/docs/Running_a_Mirror/&#34;&gt;F-Droid&lt;/a&gt;&amp;rsquo;s infrastructure is also based on mirrors.  Free software repositories have proven so valuable, that there generally are mirrors maintained around the world.  Local mirrors of popular free software repositories are available in all continents, and most countries.&lt;/p&gt;

&lt;p&gt;Mirrors also add conceptual complexity to distribution. Users who are used to internet services that work without configuration could easily find discussion of mirrors confusing.  Mirrors also mean that more pieces of infrastructure need to be maintained.  When systems with mirrors are well organized, then this work can be broken into small chunks and widely shared, often even by volunteers, so that the overall system is resilient and maintainable even given limited resources.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://commons.wikimedia.org/wiki/File:InternetPopulation2011_DeSabbata_Graham_OII.png&#34;&gt;&lt;img src=&#34;InternetPopulation2011_DeSabbata_Graham_OII.png&#34; alt=&#34;Internet Population&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;building-a-repository-mirror-system&#34;&gt;Building a repository mirror system&lt;/h2&gt;

&lt;p&gt;Good mirroring support must disconnect how the data is downloaded from how the data integrity is maintained.  That means data can come from anywhere, and still be properly verified before installing it.  This is usually done with an index of files signed by public key cryptography.  A system built on HTTPS and trusted servers is a bad candidate for mirroring.  This separation of concerns is a key property of distribution systems that allows them to be flexible while still providing fully verified distribution.&lt;/p&gt;

&lt;p&gt;Then, it must be easy for users to configure the mirrors in use.  First and foremost, mirrors should work without the user doing anything.  To ensure flexibility, they must be easy to add and remove, and new mirrors must be easy to find.  Both end users and repository operators should be able to specify mirrors to be used.  Legal requirements must also be heeded: the whole system should not require any service that might be legally questionable in any relevant jurisdiction.  EU users need GDPR-compliant services.  If the aim is to distribute in China, then the system cannot require Google Cloud Services.  Instead, it should also be able to go through cloud services available in China.&lt;/p&gt;

&lt;p&gt;There are many CDN providers around the world.  Many of these are in effect a mirroring service since they are pointed at a website hosted elsewhere, then they just cache the files.  Some of them are so cheap, that files can be hosted there without signing up.  This happens usually via source code repositories like GitHub.  For example, &lt;a href=&#34;https://rawgit.org/&#34;&gt;RawGit&lt;/a&gt; is an automatic, CloudFlare-based CDN for any public repository on GitHub, &lt;a href=&#34;https://gitlab.com&#34;&gt;gitlab.com&lt;/a&gt;, or BitBucket.  These fronting services are so cheap because they are basically only serving cached files.  Each given URL is set to be served from the cache for a long time, up to a year, without checking whether the file has changed.  In order to taken advantage of this kind of CDN setup, the repository must be designed accordingly.  That means each unique file should have a unchanging, unique URL.  There are two techniques for doing that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;For software, include the version in the filename or path, e.g. &lt;code&gt;org.fdroid.fdroid_1001000.apk&lt;/code&gt; or &lt;code&gt;1.10/F-Droid.apk&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;For media, include the hash of the file in the filename or path, e.g. &lt;code&gt;icon_CQLCGleZNBzDPRNp1ADs121TecVHFmUbe-Au-4qXF08=.png&lt;/code&gt; or &lt;code&gt;CQLCGleZNBzDPRNp1ADs121TecVHFmUbe-Au-4qXF08=/icon.png&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Mirrors are like all internet services in that there are always potential &lt;a href=&#34;https://guardianproject.github.io/info/2014/10/16/reducing-metadata-leakage-from-software-updates/&#34;&gt;privacy leaks&lt;/a&gt;.  To protect users&amp;rsquo; privacy, it is important to be conscious of the potential metadata that is visible in the system, and who can get that data.  For example, transport encryption (TLS, HTTPS, etc) should be used even though the signed index provides strong integrity checks in order to reduce metadata leaks.  Even with transport encryption, the oeprators of the mirrors themselves will still see the metadata.  When there are individual files that users can download, the mirror operators could see which user is downloading which file.  Metadata like the description of a movie file or the icon of an app will give away the user&amp;rsquo;s interests.  When possible, this metadata should be grouped to reduce the detail in the metadata.  Icons can be downloaded in random groups of 10.  Text descriptions can be grouped by language or other more neutral grouping.&lt;/p&gt;

&lt;h2 id=&#34;example-f-droid&#34;&gt;Example: F-Droid&lt;/h2&gt;

&lt;p&gt;F-Droid repositories, aka &amp;ldquo;&lt;em&gt;repos&lt;/em&gt;&amp;rdquo;, are collections of packages, mostly Android APK app files, which are organized in a single folder. That folder contains a signed index file which lists the entire contents and related metadata.  This includes descriptive texts, available graphics, etc.  This file structure is not tied to any particular transport method as long as the &lt;em&gt;repo/&lt;/em&gt; folder and index remain intact.  The client keeps the public key of the index signature locally, and uses that to verify the index file.  The index also includes a list of URLs pointing to official mirrors.  By default, repositories are served over HTTPS, but nothing in the repository structure requires that.  This allows F-Droid to use repositories from SD Cards and USB OTG thumb drives using &lt;code&gt;file:///&lt;/code&gt; URLs.  A mirror is then simply defined: a mirror is any available copy of a repository.  The mirror need not even be a complete copy, as long as the index and desired packages are present.&lt;/p&gt;

&lt;p&gt;F-Droid automatically handles much of the process of using the mirrors.  Each &lt;em&gt;repo&lt;/em&gt; can include a list of official mirrors in the index.  The F-Droid Android client will automatically use all of the official mirrors, automatically choosing one when downloading based on which is working.  The mirrors are still completely configurable.  Anyone can create their own mirror, either via the &lt;code&gt;fdroid mirror&lt;/code&gt; command for any &lt;em&gt;repo&lt;/em&gt;, or &lt;a href=&#34;https://f-droid.org/docs/Running_a_Mirror/&#34;&gt;via &lt;em&gt;rsync&lt;/em&gt;&lt;/a&gt; for &lt;em&gt;f-droid.org&lt;/em&gt;.  And F-Droid user can then &lt;a href=&#34;https://f-droid.org/tutorials/add-repo/&#34;&gt;&amp;ldquo;subscribe&amp;rdquo;&lt;/a&gt; to any mirror via the mirror URL.  Users can also disable any mirror from the repo&amp;rsquo;s details screen.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://guardianproject.github.io/info/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34; style=&#34;max-width:60%&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;add-mirror.png&#34; alt=&#34;add-mirror.png&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;add-mirror.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;&lt;h4&gt;click a link to add a new mirror&lt;/h4&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;br /&gt;


&lt;div class=&#34;box&#34; style=&#34;max-width:60%&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;disable-mirrors.png&#34; alt=&#34;disable-mirrors.png&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;disable-mirrors.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;&lt;h4&gt;disabling selected mirrors&lt;/h4&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://guardianproject.info/fdroid/&#34;&gt;Guardian Project&lt;/a&gt; &lt;em&gt;repo&lt;/em&gt; includes many of these mirroring channels: Mayfirst webserver, Tor Onion Service, Amazon AWS S3, GitHub Pages, GitHub Raw (Fastly), gitlab.com (Google Cloud), GitCDN/RawGit/Cloudflare and of course SD Card and USB OTG drives.  F-Droid &lt;em&gt;repos&lt;/em&gt; are particularly well suited to this kind of mirroring since the files are available via URLs that do not change.  CDNs cache files by URL.  &lt;a href=&#34;https://f-droid.org&#34;&gt;f-droid.org&lt;/a&gt; is mirrored by free software mirror providers around the world, including &lt;a href=&#34;https://mirrors.tuna.tsinghua.edu.cn/fdroid/repo&#34;&gt;China&lt;/a&gt;, &lt;a href=&#34;https://fdroid.tetaneutral.net/fdroid/repo&#34;&gt;France&lt;/a&gt;, &lt;a href=&#34;https://ftp.fau.de/fdroid/repo&#34;&gt;Germany&lt;/a&gt;, &lt;a href=&#34;https://plug-mirror.rcac.purdue.edu/fdroid/repo&#34;&gt;Indiana&lt;/a&gt;, &lt;a href=&#34;https://fdroid-mirror.calyxinstitute.org/fdroid/repo&#34;&gt;New York&lt;/a&gt;, &lt;a href=&#34;https://ftp.osuosl.org/pub/fdroid/repo&#34;&gt;Oregon&lt;/a&gt;, &lt;a href=&#34;https://mirror.librelabucm.org/fdroid/repo/&#34;&gt;Spain&lt;/a&gt;, &lt;a href=&#34;https://ftp.lysator.liu.se/pub/fdroid/repo&#34;&gt;Sweden&lt;/a&gt;, and &lt;a href=&#34;http://lysator7eknrfl47rlyxvgeamrv7ucefgrrlhk7rouv3sna25asetwid.onion/pub/fdroid/repo&#34;&gt;Tor Onion Service&lt;/a&gt;.  Local mirrors mean faster, more reliable, and cheaper access, especially for people in places like China, where government policy and infrastructure design works to downplay access to foreign networks.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.github.io/info/2016/06/02/building-the-most-private-app-store/&#34;&gt;Extensive&lt;/a&gt; &lt;a href=&#34;https://f-droid.org/docs/Security_Model/&#34;&gt;work&lt;/a&gt; has gone into making F-Droid the most private &amp;ldquo;app store&amp;rdquo; for mobile devices, including minimizing the potential metadata leaks.  There is a single index file for all the packages, and it includes all the translations.  So all users fetch the exact same index file, so the &lt;em&gt;f-droid.org&lt;/em&gt; and mirror servers cannot infer from the index which language the device is using.  The app icons and screenshsots are downloaded on demand, so that is one metadata leak.  F-Droid requires either HTTPS or Tor Onion Service transport encryption to minimize such leaks.&lt;/p&gt;

&lt;p&gt;F-Droid &lt;em&gt;repos&lt;/em&gt; default to keeping 3 releases per package available. Also, the index is not tied to the mirror, the F-Droid Android client will happily fetch the index from one mirror, and each package from other mirrors.  F-Droid will keep searching all the mirrors for a package until it finds it, so a mirror can be out of date yet still useful. Today&amp;rsquo;s update might only bring a couple new files, even if a mirror is delayed, it will still have all the previous content.  That property ensures that distribution is not an all-or-nothing prospect.  Instead, it can still transparently provide some level of access when there are troubles with the internet.  This makes lots of different kinds of relibility problems look quite similar from the point of view of the F-Droid client app: outages, network troubles, blocks, and even working around expensive data.&lt;/p&gt;

&lt;p&gt;Someone with a Raspberry Pi with an SD Card can be a local mirror server, even if they have irregular access to the internet.  The Raspberry Pi can be easily brought to unmetered WiFi, then synced up with the main &lt;em&gt;repo&lt;/em&gt; using &lt;code&gt;fdroid mirror&lt;/code&gt; or &lt;code&gt;rsync&lt;/code&gt;.  Then when it is brought back to its home, the local users can get apps and updates even if there is no active internet connection in the area.  This also works with &lt;a href=&#34;https://en.wikipedia.org/wiki/USB_On-The-Go&#34;&gt;USB OTG&lt;/a&gt; flash drives.  A whole &lt;em&gt;repo&lt;/em&gt; can be zipped up and broadcasted using a service like the satellite TV &amp;ldquo;&lt;a href=&#34;https://knapsackforhope.org/&#34;&gt;Knapsack for Hope&lt;/a&gt;&amp;rdquo; service, their app already makes it easy to decode the broadcast and write it to USB OTG.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;


&lt;div class=&#34;box&#34; style=&#34;max-width:60%&#34;&gt;
  &lt;figure  itemprop=&#34;associatedMedia&#34; itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;usb-otg-mirror.png&#34; alt=&#34;usb-otg-mirror.png&#34;/&gt;
    &lt;/div&gt;
    &lt;a href=&#34;usb-otg-mirror.png&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
      &lt;figcaption&gt;&lt;h4&gt;A f-droid.org mirror available via USB OTG drive.&lt;/h4&gt;
      &lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&#34;example-ubuntu&#34;&gt;Example: Ubuntu&lt;/h2&gt;

&lt;p&gt;Ubuntu uses a system of mixed mirrors and CDNs &lt;a href=&#34;https://wiki.ubuntu.com/Mirrors#Country_mirror_requirements&#34;&gt;based on standardized domain names&lt;/a&gt;, which includes some level of &lt;a href=&#34;https://wiki.ubuntu.com/DynamicMirrorDecisions&#34;&gt;automatic setup&lt;/a&gt; based on measurement.  The domain name is &lt;code&gt;COUNTRYCODE.archive.ubuntu.com&lt;/code&gt;.  During install, the user chooses the country to set up the device accordingly.  The mirror is then set to use the mirror domain name based on that country, e.g. a device set to Uganda would use &lt;code&gt;ug.archive.ubuntu.com&lt;/code&gt;.  When a country-specific mirrors exists, that domain name points to it.  Ubuntu has over 50 in-country mirrors. Otherwise, any other &lt;code&gt;*.archive.ubuntu.com&lt;/code&gt; domain name points to a mirror running on a major CDN.  This setup allows Ubuntu to change the mirror server-side setup separately from the user&amp;rsquo;s selection on their device.  Additionally, users are then still free to edit the configuration and use any URL that they want, including pointing to local media like CDROMs and thumb drives.  And anyone can &lt;a href=&#34;https://wiki.ubuntu.com/Mirrors&#34;&gt;create their own mirror&lt;/a&gt; without first getting permission.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&#34;select best server&#34; src=&#34;select-best-server.png&#34; width=&#34;100%&#34;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;Select-Ubuntu-Mirror-Archive.png&#34; alt=&#34;Select-Ubuntu-Mirror-Archive&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Free Software Tooling for Android Feature Extraction</title>
      <link>https://guardianproject.github.io/info/2020/05/06/free-software-tooling-for-android-feature-extraction/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2020/05/06/free-software-tooling-for-android-feature-extraction/</guid>
      <description>

&lt;p&gt;As part of the Tracking the Trackers project, we are inspecting
thousands of Android apps to see what kinds of tracking we can find.
We are looking at both the binary APK files as well as the source
code.  Source code is of course easy to inspect, since it is already a
form that is meant to be read and reviewed by people.  Android APK
binaries are a very different story.  They are first and foremost a
machine-executable format.  On top of that, many developers
deliberately obfuscate as much as possible in the APK to resist
inspection.&lt;/p&gt;

&lt;p&gt;That means inspection requires using tools to look into the binary APK
format.  There is actually a massive amount of work that goes into
inspecting APKs because this is required in order to do useful malware
analysis.  For the most part, these inspection techniques are the
malware companies&amp;rsquo; &amp;ldquo;special sauce&amp;rdquo;, so they are proprietary and
generally kept secret.  On top of that, malware companies keep secret
a lot of the conclusions they about what is useful data to collect,
and what should be ignored.&lt;/p&gt;

&lt;p&gt;One key piece of the Tracking the Trackers project is to make all of
research, tooling, and conclusions free, open, and publicly available.
First and foremost, that means the tools must be free software.  They
should also be easily installable so the barrier to entry for new
inspectors is as low as possible.  We focus on getting software as
part of Debian, since once there, so many people have access to those
packages since Ubuntu, Kali, and so many other GNU/Linux distros are
based on Debian.&lt;/p&gt;

&lt;h2 id=&#34;what-is-available-in-debian-already&#34;&gt;What is available in Debian already&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/2015/04/30/getting-android-tools-into-debian/&#34;&gt;Our
work&lt;/a&gt;
with the &lt;a href=&#34;https://wiki.debian.org/AndroidTools&#34;&gt;Debian Android Tools
Team&lt;/a&gt; and &lt;a href=&#34;https://java.debian.net/&#34;&gt;Debian Java
Team&lt;/a&gt; over the years means many key tools
are already included in Debian and its derivatives, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;key Android SDK components like &lt;em&gt;apksigner&lt;/em&gt;, &lt;em&gt;dx&lt;/em&gt; and &lt;em&gt;android.jar&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;apktool&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;dexdump/dexlist&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;enjarify&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;LibScout&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;libsmali&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;procyon&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;tools-we-are-using&#34;&gt;Tools we are using&lt;/h2&gt;

&lt;p&gt;One key aspect of our research is that working with terabytes of APKs,
this is necessary to be able to spot and map out as many trackers as
possible.  Since feature extraction can be a slow and resource
intensive process, we needed to use some tools that emphasize speed
over flexibility.  Even with fast extraction tools, we still have to
build up tailored processes to speed things up.  Some of these
straightforward feature extraction processes would take months to run
on ~3TB of APKs on a 32-thread machine with 144GB of RAM.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/reddr/LibScout&#34;&gt;LibScout&lt;/a&gt; - detect SDKs/libraries with their version in binary APKs&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/avast/apkparser&#34;&gt;https://github.com/avast/apkparser&lt;/a&gt; - faster manifest/resources parser&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/avast/apkverifier&#34;&gt;https://github.com/avast/apkverifier&lt;/a&gt; - faster APK signature verifier&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jedisct1/ipgrep&#34;&gt;https://github.com/jedisct1/ipgrep&lt;/a&gt; - ipgrep extracts possibly obfuscated host names and IP addresses from text, resolves host names, and prints them, sorted by ASN.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/stricaud/faup&#34;&gt;https://github.com/stricaud/faup&lt;/a&gt; - Fast URL decoder library&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cryptax/droidlysis&#34;&gt;https://github.com/cryptax/droidlysis&lt;/a&gt; - Quickly analyze APKs for the most essential features: permissions, &lt;code&gt;Activity&lt;/code&gt; and &lt;code&gt;BroadcastReceiver&lt;/code&gt; names, and key method calls.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;apkverifier&lt;/em&gt;, &lt;em&gt;apkparser&lt;/em&gt;, and &lt;em&gt;droidlysis&lt;/em&gt; are generally useful, but
not yet in Debian.  So we packaged them to make them easily available.
They are currently in the &lt;a href=&#34;https://ftp-master.debian.org/new.html&#34;&gt;Debian
NEW&lt;/a&gt; queue, awaiting final
review before inclusion.&lt;/p&gt;

&lt;p&gt;These tools have been assembled into scripts to run the actual feature
extract processes, they are maintained in the
&lt;a href=&#34;https://gitlab.com/trackingthetrackers/extracted-features&#34;&gt;https://gitlab.com/trackingthetrackers/extracted-features&lt;/a&gt; repo.  When
the actual data generated is small enough and there are not copyright
conflicts, the data is also included there.  Mostly, the data sets are
too large and sometimes touch on copyright restrictions, so they are
unfortunately not publicly available.&lt;/p&gt;

&lt;p&gt;There are lots of other tasks, including managing large APK
collections, gathering data to generate statistics about the features,
and downloading publicly available tracker SDK.  Those scripts are
maintained in &lt;a href=&#34;https://gitlab.com/trackingthetrackers/scripts&#34;&gt;https://gitlab.com/trackingthetrackers/scripts&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;gradle-plugins&#34;&gt;Gradle Plugins&lt;/h3&gt;

&lt;p&gt;When working with source code, then it is possible to do other kinds
of analysis.  Most Android apps are built with the Gradle tool.  So we
reviewed a wide range of Gradle plugins, and found these three useful
in our investigations.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/autonomousapps/dependency-analysis-android-gradle-plugin&#34;&gt;dependency-analysis-android-gradle-plugin&lt;/a&gt; - Produce a report of unused direct dependencies and used transitive dependencies.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jeremylong/DependencyCheck&#34;&gt;OWASP Dependency-Check&lt;/a&gt; - utility that detects publicly disclosed vulnerabilities in application dependencies&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/vanniktech/gradle-dependency-graph-generator-plugin/&#34;&gt;gradle-dependency-graph-generator-plugin&lt;/a&gt; - Gradle plugin that lets you visualize your Java library dependencies in a graph.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;tools-we-reviewed&#34;&gt;Tools we reviewed&lt;/h2&gt;

&lt;p&gt;We looked at quite a few existing tools, and found many interesting
and useful ones.  While they all produced useful output, many of these
were not useful to this project because they were tailored around the
use case of a person inspecting a small set of apps, so for example,
they were too slow or did not produce machine readable output suitable
for working with large APK collections.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/U039b/android_permissions_harvester&#34;&gt;android_permissions_harvester&lt;/a&gt; - for finding which permissions are used based on method calls&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cryptax/droidlysis&#34;&gt;droidlysis&lt;/a&gt; - cryptax&amp;rsquo;s (aXelle&amp;rsquo;s) tool: &amp;ldquo;DroidLysis is a property extractor for Android apps&amp;rdquo;. See also her &lt;a href=&#34;https://cfp.hack.lu/hacklu19/talk/ZZKNSM/&#34;&gt;talk at hacklu 2019&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rednaga/APKiD&#34;&gt;APKiD&lt;/a&gt; - &amp;ldquo;In addition to detecting packers, obfuscators, and other weird stuff, it can also identify if an app was compiled by the standard Android compilers or dexlib&amp;rdquo;&lt;a href=&#34;https://rednaga.io/2016/07/31/detecting_pirated_and_malicious_android_apps_with_apkid/&#34;&gt;[1]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/facebook/redex&#34;&gt;redex&lt;/a&gt; - &amp;ldquo;taking advantage of Redex allows us to normalise the applications prior to analysis&amp;rdquo;&lt;a href=&#34;https://blog.quarkslab.com/android-application-diffing-analysis-of-modded-version.html&#34;&gt;[1]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kaitai-io/kaitai_struct_formats/blob/master/executable/dex.ksy&#34;&gt;kaitai_struct_formats&lt;/a&gt; - generic binary struct parser tool, useful for directly parsing Android &lt;em&gt;classes.dex&lt;/em&gt; files.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/armijnhemel/binaryanalysis-ng&#34;&gt;binaryanalysis-ng&lt;/a&gt; - a framework for unpacking files recursively and running checks on the unpacked files.  Great for someone who needs to inspect small sets of a wide variety of file types.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/plum-umd/redexer&#34;&gt;redexer&lt;/a&gt; - infer with which parameters the app uses certain permissions (we name this feature RefineDroid)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ytliu/apk-static-xref&#34;&gt;apk-static-xref&lt;/a&gt; - staticallly generate a cross-reference-graph (XRG) of a component (e.g., Service) of Android APK file&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dorneanu/smalisca&#34;&gt;smalisca&lt;/a&gt; - Static Code analysis tool that generates call graphs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(&lt;em&gt;This work was supported by NLnet&amp;rsquo;s &lt;a href=&#34;https://nlnet.nl/thema/NGIZeroPET.html&#34;&gt;NGI Zero PET&lt;/a&gt; fund.&lt;/em&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>&#34;Features&#34; for Finding Trackers</title>
      <link>https://guardianproject.github.io/info/2020/04/28/features-for-finding-trackers/</link>
      <pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2020/04/28/features-for-finding-trackers/</guid>
      <description>

&lt;p&gt;One key component of the Tracking the Trackers project is building a
machine learning (ML) tool to aide humans to find tracking in Android
apps. One of the most important pieces of developing a machine
learning tool is figuring out which &amp;ldquo;features&amp;rdquo; should be fed to the
machine learning algorithms. In this context, features are
constrained data sets derived from the whole data set. In our case,
the whole data set is terabytes of APKs. This post is an outline of
the features that we are focusing on in this current project.&lt;/p&gt;

&lt;h1 id=&#34;confirmed-features&#34;&gt;Confirmed Features&lt;/h1&gt;

&lt;p&gt;These are features that we will definitely used, and already have good
tooling to do the &lt;a href=&#34;https://en.wikipedia.org/wiki/Feature_extraction&#34;&gt;feature
extraction&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;permissions&#34;&gt;Permissions&lt;/h2&gt;

&lt;p&gt;Android apps must request
&lt;a href=&#34;https://developer.android.com/guide/topics/permissions/overview&#34;&gt;permissions&lt;/a&gt;
from the Android OS to access sensitive user data as well as certain
system features. This can naturally give big hints towards tracking
attempts. Basically an app which does not request any permissions will
have a much harder time of tracking its users, while an app aimed
towards tracking will require a myriad of permissions depending on the
properties it desires to track (e.g. location, contacts, phone IDs,
Bluetooth IDs, WiFi IDs, camera/microphone-access, call-logs and many
more)&lt;/p&gt;

&lt;h2 id=&#34;tracking-libraries-and-sdks&#34;&gt;Tracking Libraries and SDKs&lt;/h2&gt;

&lt;p&gt;Code re-use plays a big role in any software project, why write your
own tracking functionality when someone else has already implemented a
whole library geared towards tracking users. This functionality is
provided by different SDKs, which are pre-configured bundles of
functionality which in turn (for this use case) are provided by
tracking companies. The app developer often has to choose the desired
functionality. While importing a tracking library is no guarantee for
tracking activities it is certainly a red flag. We compare the
libraries imported by the app with a list of known tracking libraries.&lt;/p&gt;

&lt;h2 id=&#34;domain-names&#34;&gt;Domain Names&lt;/h2&gt;

&lt;p&gt;Developers leave URLs in form of strings in the code to allow exchange
of information with the world outside of the app. This can be used to
transfer information about the user which in turn can be used for
tracking. The domains often contain a hint about the purpose behind
the data transfer (e.g. &lt;code&gt;https://www.google-analytics.com&lt;/code&gt;). Domain names
are data sinks for collecting data, which gives us a clear point to
focus on analyzing since collecting tracking data does not matter if
it never leaves the local device, while domain names are the point in
the code where data leaves the device and is sent to be collected and
analyzed on a remote server. Combined with other features like
permissions and seeing tracking libraries being imported a human
reviewer could get a pretty good idea of what type of information
could be sent. This human &amp;ldquo;gut feeling&amp;rdquo; of recognizing fishy
combinations of features is something a neural network can often learn
to approximate by being trained on a sufficient amount of training
data. Domain names known to be relevant to tracking are collected and
maintaned by &lt;a href=&#34;https://exodus-privacy.eu.org/en/&#34;&gt;Exodus Privacy&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;new-experimental-features&#34;&gt;New Experimental Features&lt;/h1&gt;

&lt;p&gt;These are features that show a lot of promise, but there is not
existing tooling to easily work with them.  We are working to make it
easier, and will cover that work in future posts.&lt;/p&gt;

&lt;h2 id=&#34;api-key-id&#34;&gt;API Key ID&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/Exodus-Privacy/etip/issues/62&#34;&gt;&lt;em&gt;API Key ID&lt;/em&gt;&lt;/a&gt;
is a string that identifies bit of authentication data for enabling
access to an online service. Many online services require an &lt;em&gt;API Key&lt;/em&gt;
even if a library or SDK is not required to access it. Even when the
SDK is detected, the presence of an &lt;em&gt;API Key&lt;/em&gt; shows that the tracking
function is actually enabled. For example, the Google Firebase SDK
includes lots of functionality, not only tracking, each of which must
be enabled with an &lt;em&gt;API Key&lt;/em&gt;. So the presence of Firebase is not
enough to confirm tracking. A &lt;a href=&#34;https://en.epicenter.works/content/analysis-of-the-stopp-corona-app-improvements-through-expert-report&#34;&gt;current
example&lt;/a&gt;
of exactly this is the Austrian Red Cross&amp;rsquo; &lt;em&gt;Stopp Corona&lt;/em&gt; app to track
the spread of covid-19 in Austria.&lt;/p&gt;

&lt;h2 id=&#34;natural-language-processing-nlp&#34;&gt;Natural Language Processing (NLP)&lt;/h2&gt;

&lt;p&gt;As mentioned under the section on domain names, domain names can
already give a clear hint at intent. However since this property is
well known, URLs might be obfuscated to hide this information. This
domain name obfuscation is a well known technique in the world of
malware, there is some evidence of use by tracking companies. In this
case, a language model might learn that any URL that looks like random
letters and numbers might be a sign to consider increasing the
probability of classifying this app as tracking slightly, depending on
other features like requested permissions, and imported tracking
libraries.&lt;/p&gt;

&lt;h2 id=&#34;broadcast-receivers&#34;&gt;Broadcast Receivers&lt;/h2&gt;

&lt;p&gt;Android provides a system for data to be broadcast to all apps on a
device, this is known as a &lt;a href=&#34;https://developer.android.com/guide/components/broadcasts&#34;&gt;&lt;em&gt;Broadcast
Receiver&lt;/em&gt;&lt;/a&gt;.
A wide range of data is available via this mechanism, both from the
Android system as well as apps.  The Android OS broadcasts detailed
information about the &lt;a href=&#34;https://developer.android.com/training/monitoring-device-state/battery-monitoring&#34;&gt;battery level, health, and charging
status&lt;/a&gt;,
including details of &lt;a href=&#34;https://developer.android.com/reference/android/os/BatteryManager#BATTERY_PLUGGED_AC&#34;&gt;how its
charging&lt;/a&gt;.
Many music apps will broadcast detailed information about the song
being played, while also &lt;a href=&#34;https://gitlab.com/trackingthetrackers/wiki/-/issues/5&#34;&gt;collecting those
events&lt;/a&gt; from
the system and other apps.  The full extent of this activity is not
well described, both what data is broadcasted, what apps are doing
with it, and which apps are collecting.  As a feature, &lt;em&gt;Broadcast
Receivers&lt;/em&gt; have a lot of promise since they fit the patterns of useful
features for machine learning: small, globally unique, and easy to
extract.&lt;/p&gt;

&lt;h1 id=&#34;feature-extraction-process&#34;&gt;Feature Extraction Process&lt;/h1&gt;

&lt;p&gt;We are using tabular data to feed to the machine learning processes,
so the process of extracting and pre-processing different features for
classification includes similar steps for every feature. The number of
features that can reasonably be processed this way is limited to
probably tens of thousands of features, or perhaps even hundreds of
thousands. Therefore we have collections of the top-&lt;em&gt;n&lt;/em&gt; features where
&lt;em&gt;n&lt;/em&gt; is in the range of thousands: For example, the top thousand
tracking libraries, or all built-in permissions. This way we extract
the features out of the binary APK file, and source code when
available, and loop over our collections of known features. If the
feature was found in the APK/source the tabular data will be a 1, else
a 0.&lt;/p&gt;

&lt;p&gt;(&lt;em&gt;This work was supported by NLnet&amp;rsquo;s &lt;a href=&#34;https://nlnet.nl/thema/NGIZeroPET.html&#34;&gt;NGI Zero PET&lt;/a&gt; fund.&lt;/em&gt;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tracking the Trackers: using machine learning to aid ethical decisions</title>
      <link>https://guardianproject.github.io/info/2020/01/16/tracking-the-trackers-using-machine-learning-to-aid-ethical-decisions/</link>
      <pubDate>Thu, 16 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2020/01/16/tracking-the-trackers-using-machine-learning-to-aid-ethical-decisions/</guid>
      <description>

&lt;p&gt;F-Droid is a free software community app store that has been working since 2010 to make all forms of tracking and advertising visible to users. It has become the trusted name for privacy in Android, and app developers who sell based on privacy make the extra effort to get their apps included in the F-Droid.org collection. These include &lt;a href=&#34;https://f-droid.org/packages/com.nextcloud.client&#34;&gt;Nextcloud&lt;/a&gt;, Tor Browser, &lt;a href=&#34;https://f-droid.org/packages/de.thecode.android.tazreader&#34;&gt;TAZ.de&lt;/a&gt;, and &lt;a href=&#34;https://f-droid.org/packages/de.tutao.tutanota&#34;&gt;Tutanota&lt;/a&gt;.  Auditing apps for tracking is labor intensive and error prone, yet ever more in demand. F-Droid already has tools to aide contributors in this process, visible in the &lt;a href=&#34;https://gitlab.com/fdroid/fdroiddata/merge_requests&#34;&gt;app submission&lt;/a&gt; and &lt;a href=&#34;https://gitlab.com/fdroid/rfp/issues&#34;&gt;Request For Packaging (RFP)&lt;/a&gt; issue trackers.  We also have functional prototypes of using machine learning to drastically speed up this process by augmenting humans, rather than replacing them.&lt;/p&gt;

&lt;p&gt;Since the prime motivation of the F-Droid community is ethical software distribution, algorithms will never replace humans in making ethical decisions. We have also explored using machine learning to detect tracking in a more generic way, without manually compiled lists of tracking libraries. With this funding, we will improve the F-Droid tools, and make them generally available for any use case needing to reliably detect trackers in Android apps. This builds upon our &lt;a href=&#34;https://f-droid.org/en/2017/12/14/new-collaborations-on-exposing-tracking.html&#34;&gt;collaboration&lt;/a&gt; with &lt;a href=&#34;https://exodus-privacy.eu.org/&#34;&gt;Exodus Privacy&lt;/a&gt; and &lt;a href=&#34;https://github.com/reddr/LibScout&#34;&gt;LibScout&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This project comes out of some proof of concept work that &lt;a href=&#34;https://www.lo-res.org/~aaron/&#34;&gt;Aaron Kaplan&lt;/a&gt; and Hans-Christoph Steiner did, working with students in the Vienna Economics University&amp;rsquo;s (WU) &lt;a href=&#34;https://www.wu.ac.at/en/infobiz/teaching/sbwl-data-science&#34;&gt;Data Science Lab&lt;/a&gt;.  We focused on using machine learning with Android apps, first to detect malware, then second to detect tracking libraries.  It is of course ultimately an outgrowth of the F-Droid community&amp;rsquo;s efforts, and Guardian Project&amp;rsquo;s funded efforts for building systems without any tracking at all.  And special thanks to F-Droid founder &lt;a href=&#34;https://en.wikipedia.org/wiki/Ciaran_Gultnieks&#34;&gt;Ciaran Gultnieks&lt;/a&gt; for setting the ethical tone that inspired us all, back in &lt;a href=&#34;https://f-droid.org/2010/09/30/no-free-beer.html&#34;&gt;2010&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;funding&#34;&gt;Funding&lt;/h2&gt;

&lt;p&gt;This current 44,500€ project is funded by NLnet&amp;rsquo;s &lt;a href=&#34;https://nlnet.nl/PET/&#34;&gt;Privacy &amp;amp; Trust Enhancing Technologies (PET) Fund&lt;/a&gt;.  F-Droid has received large, dedicated, computing resources from the &lt;a href=&#34;https://cfarm.tetaneutral.net/machines/list/&#34;&gt;GCC Compile Farm&lt;/a&gt;, as well as some shared resources from Aaron Kaplan.  The budget will be used entirely to pay for people&amp;rsquo;s time for the research, development, and integration work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Software development to get the existing LibScout and Exodus Privacy tools to be fully integrated into the F-Droid stack.&lt;/li&gt;
&lt;li&gt;Machine learning research and development.&lt;/li&gt;
&lt;li&gt;Community management, to coordinate with F-Droid contributors, app developers, tool developers, academic researchers, etc. as well to promote these tools&lt;/li&gt;
&lt;li&gt;Finalize and package up all the useful parts of this project, which also means getting them included in Debian&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;related-efforts&#34;&gt;Related Efforts&lt;/h2&gt;

&lt;p&gt;The general approach that we are taking here has been proven in the context of web pages. The Brave Browser includes &lt;a href=&#34;https://arxiv.org/pdf/1805.09155&#34;&gt;machine learning techniques&lt;/a&gt; for blocking ads and trackers in webpages.  It is a very similar idea to what we propose, but that example is embedded into a browser and only applies to web sites.&lt;/p&gt;

&lt;p&gt;Exodus Privacy has manually compiled an extensive list of tracking libraries and domains for receiving user data.  It then uses this to scan app from Google Play.  Those results are then reported on their website.  Exodus Privacy would directly benefit from this work, since they could use the tools we will create.&lt;/p&gt;

&lt;p&gt;Ghostery uses AI techniques to dynamically block ads in web pages. (&lt;a href=&#34;https://www.wired.com/story/ghostery-deploys-ai-in-fight-against-ad-trackers/&#34;&gt;https://www.wired.com/story/ghostery-deploys-ai-in-fight-against-ad-trackers/&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;F-Droid has its own &lt;code&gt;fdroid scanner&lt;/code&gt; for doing checks based on manually prepared regular expressions.  This was combined with Exodus Privacy into F-Droid&amp;rsquo;s &lt;a href=&#34;https://gitlab.com/fdroid/rfp/issues&#34;&gt;issuebot&lt;/a&gt; which automatically scans apps that users request to be added to F-Droid.&lt;/p&gt;

&lt;p&gt;LibScout uses machine learning to detect which versions of which libraries are included in an Android app (APK).  Using the list of libraries from Exodus Privacy, we worked with the LibScout author to create a functional prototype of a tracking library detector.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.sec.cs.tu-bs.de/pubs/2014-ndss.pdf&#34;&gt;Drebin&lt;/a&gt; clearly demonstrated that machine learning can be used to automatically classify Android apps based on certain aspects of their behavior. Their aim was to find malware.  Working with CERT.at and the WU Data Science Lab, we reproduced the results of the Drebin paper.&lt;/p&gt;

&lt;h2 id=&#34;the-challenges&#34;&gt;The challenges&lt;/h2&gt;

&lt;p&gt;The biggest promise of this project is also the biggest technical challenge: finding a way to take datasets about what includes tracking libraries (e.g. F-Droid manual review, LibScout, Exodus Privacy), and turning that into a more general machine learning approach.  We will have to explore a wide range of possible features to include in the machine learning that are distinct from the tracking libraries themselves.  This general approach will provide tracking detection with more automation and less maintenance work of rerunning the machine learning on updated datasets as new tracking libraries are put into use.&lt;/p&gt;

&lt;p&gt;The technical methods for determining whether an app includes trackers are well known and described.  They currently require knowledge of Android development.  Machine learning has been proven to be able to reliably spot trackers in apps, this project will turn working prototypes into production software, integrate it into F-Droid community-driven processes, and make these new tools easily available for anyone else to apply to their specific use cases. Given an Android apps downloaded from anywhere, these new tools will be able to mark which ones have any kind of tracking in them, with a very high degree of certainty.  With the portion of the project that involves applying LibScout, at this point, the idea has been proven with prototypes.  Applying it is a straightforward matter of bringing a proven prototype to production.&lt;/p&gt;

&lt;p&gt;Organizations relying on proprietary apps that must follow strict data protection requirements, like banks under the GDPR, can use these tools to ensure that apps they rely on do not contain illegal tracking, and to ensure that such tracking is not added in future releases.&lt;/p&gt;

&lt;p&gt;These techniques are also applicable to other platforms, like Progressive Web Apps and Apple iOS.  Bootstrapping another platform would require a marked training set of apps to feed to the machine learning.  F-Droid already provides this set, and Android is the most popular OS in the world, making Android the ideal platform to start this work.&lt;/p&gt;

&lt;h2 id=&#34;humans-at-the-core&#34;&gt;Humans at the core&lt;/h2&gt;

&lt;p&gt;F-Droid is a community run free software project very much in the same spirit as Debian.  The community has always aimed to provide 100% verified free software, built from source.  From the beginning, there was also an interest in other ethical considerations as well, these are expressed via F-Droid&amp;rsquo;s &amp;ldquo;Anti-Features&amp;rdquo;.  These are things tagged with Tracking (contains tracking), Ads (includes advertising), and NonFreeNet (requires a non-free network service).  The process of ensuring that the apps are 100% free software as well as tagging apps with the required Anti-Features is a manual process that many people contribute to, that is aided by quite a bit of automation.  This project fits directly into this existing ecosystem.  It will both quickly provide improvements in contributors&amp;rsquo; workflow based on the existing prototype, as well as experiments towards drastically improving the whole workflow of anyone working to track trackers.&lt;/p&gt;

&lt;p&gt;F-Droid fits into the whole Android app ecosytem in a very specific role.   It is the one source that only distributes free software, and has built a well deserved reputation for not compromising on the ethics that guide the community.  This has led it to become the standard &amp;ldquo;clean set&amp;rdquo; in all manner of research into Android malware and tracking.  Many academic papers covering Android malware cite f-droid.org as the source of ground truth.&lt;/p&gt;

&lt;p&gt;In closing, it is important to highlight that it is essential to keep humans always at the center of of these tools.  We are building tooling to augment humans, not replace them. Since the prime motivation of the F-Droid community is to build ethical software distribution, algorithms will never replace humans in making decisions based on ethics.  The tools can automate the technical details, so that contributors do not need to understand them in order to meaningfully help with the process.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NetCipher &#43; Conscrypt for the best possible TLS</title>
      <link>https://guardianproject.github.io/info/2019/12/17/netcipher-conscrypt-for-the-best-possible-tls/</link>
      <pubDate>Tue, 17 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2019/12/17/netcipher-conscrypt-for-the-best-possible-tls/</guid>
      <description>&lt;p&gt;A new NetCipher library has recently been merged:
&lt;a href=&#34;https://gitlab.com/guardianproject/NetCipher/merge_requests/86&#34;&gt;&lt;em&gt;netcipher-conscrypt&lt;/em&gt;&lt;/a&gt;.
In the same vein as the other NetCipher libraries,
&lt;em&gt;netcipher-conscrypt&lt;/em&gt; wraps the Google
&lt;a href=&#34;https://source.android.com/devices/architecture/modular-system/conscrypt&#34;&gt;Conscrypt&lt;/a&gt;
library, which provides the latest
&lt;a href=&#34;https://en.wikipedia.org/wiki/Transport_Layer_Security&#34;&gt;TLS&lt;/a&gt; for any
app that includes it.  &lt;em&gt;netcipher-conscrypt&lt;/em&gt; lets apps then disable old
TLS versions like TLSv1.0 and TLSv1.1, as well as disable TLS Session
Tickets.  This is an alpha release because it only works on recent
Android versions (8.1 or newer).  The actual functionality works well,
the hard part remains making sure that it is possible to inject
&lt;em&gt;netcipher-conscrypt&lt;/em&gt; as the TLS provider on all Android devices and
versions.  And the last missing piece is finding the right place in
Conscrypt to configure proxying to support Tor or other privacy
proxies&lt;/p&gt;

&lt;p&gt;Before Conscrypt, Android apps relied on the Android OS itself to
provide TLS.  Normally, software uses the TLS provided by the
operating system.  Since too often Android devices do not get software
updates, lots of users are stuck on old TLS versions.  So Google split
out the TLS stack from Android itself and made the Conscrypt library
from it so it can be independently updated.  Guardian Project has been
taking this approach for almost 10 years, starting with
SQLCipher-for-Android and IOCipher libraries.  We are happy to see
Google doing this themselves to give us more platform flexibility and
security.  We plan on using this as a platform for making &lt;a href=&#34;https://tools.ietf.org/html/draft-ietf-tls-sni-encryption&#34;&gt;ESNI
(Encrypted SNI)&lt;/a&gt;
available to all Android apps.&lt;/p&gt;

&lt;p&gt;It is exciting to see ideas that we have been championing over the
past decade to get mainstream adoption.  TLS Session Tickets have
always had serious &lt;a href=&#34;https://blog.filippo.io/we-need-to-talk-about-session-tickets/&#34;&gt;security&lt;/a&gt; and &lt;a href=&#34;https://www.theregister.co.uk/2018/10/19/tls_handshake_privacy/&#34;&gt;privacy&lt;/a&gt; issues, Android 10 &lt;a href=&#34;https://source.android.com/devices/architecture/modular-system/conscrypt#consrypt-q&#34;&gt;now
provides&lt;/a&gt;
an official API for disabling TLS Session Tickets:
&lt;a href=&#34;https://developer.android.com/reference/android/net/ssl/SSLSockets.html&#34;&gt;android.net.ssl.SSLSockets&lt;/a&gt;
and
&lt;a href=&#34;https://developer.android.com/reference/android/net/ssl/SSLEngines.html&#34;&gt;android.net.ssl.SSLEngines&lt;/a&gt;.
And the idea of per-app file encryption, which &lt;em&gt;IOCipher&lt;/em&gt; provides, can
now be largely provided by the built-in &lt;a href=&#34;https://source.android.com/security/encryption/file-based&#34;&gt;Android File-Based Encryption
(FBE)&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Trusted Update Channels vs. Scratching Your Itch</title>
      <link>https://guardianproject.github.io/info/2019/12/02/trusted-update-channels-vs.-scratching-your-itch/</link>
      <pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2019/12/02/trusted-update-channels-vs.-scratching-your-itch/</guid>
      <description>&lt;p&gt;One of the great things about free software is that people can easily take a functional program or library and customize it as they see fit.  Anyone can come along, submit bug fixes or improvements, and they can be easily shared across many people, projects, and organizations.  With distribution systems like Python&amp;rsquo;s &lt;a href=&#34;https://pypi.python.org&#34;&gt;pypi&lt;/a&gt;, there is an update channel that the trusted maintainers can publish fixes so consumers of the library can easily get updates.  When talking about update channels and code, it is unavoidable to also talk about people and trust.  One key piece is the trust relationship between the consumer and the maintainer.  The ideal software distribution system would be a blind, trustworthy pipe between the software maintainers and each end user.&lt;/p&gt;

&lt;p&gt;Since we are talking about libraries of code, the natural relationship turns out to be different than the trust relationship: it is between the consumer and the library itself, not the maintainers.  I use Requests for handling HTTP, not @nateprewitt&amp;rsquo;s fork.  My &lt;em&gt;setup.py&lt;/em&gt; includes a reference to &lt;code&gt;&#39;requests&#39;&lt;/code&gt;, not to the maintainers who I trust to keep the library updated.&lt;/p&gt;

&lt;p&gt;There have been cases were libraries were &lt;a href=&#34;https://www.zdnet.com/article/backdoor-code-found-in-11-ruby-libraries/&#34;&gt;taken&lt;/a&gt; &lt;a href=&#34;https://www.theregister.co.uk/2018/07/12/npm_eslint/&#34;&gt;over&lt;/a&gt; and used to distribute malware.  Or &lt;a href=&#34;https://www.theregister.co.uk/2018/11/26/npm_repo_bitcoin_stealer/&#34;&gt;another case&lt;/a&gt; where someone offered to take over a popular library, then inserted malware into it.  If it is really easy for maintainers to hand over a library to someone else, then that will be abused.  If they are too hard to hand over, then many valuable libraries will be abandoned or forked.  Having to check for forks is an added cost for library consumers, so ideally there would always be a trusted maintainer.&lt;/p&gt;

&lt;p&gt;For large projects like Requests or distros like Debian, there is a process for ensuring that new maintainers are doing the right thing.  There are also many small libraries that are very valuable.  For example, &lt;a href=&#34;https://github.com/rory/apache-log-parser&#34;&gt;apache_log_parser&lt;/a&gt; or &lt;a href=&#34;https://pypi.org/project/PyMTP/&#34;&gt;pymtp&lt;/a&gt;.   In these cases, the cost of doing a proper process of handing over to a new maintainer is quite large as compared to the overall effort the library author put into the library.  Or it might be a single maintainer who is now overburdened with other work.&lt;/p&gt;

&lt;p&gt;In F-Droid, reviewing app merge requests, aka &lt;em&gt;fdroiddata&lt;/em&gt;, is also about reviewing whether the trust relationship is changing.  This is on top of making sure the new code works, ensuring its still free software, and that all of the Anti-Features are properly marked.  Getting this review right is important especially when you consider that in F-Droid, many apps are automatically updated without core contributors reviewing it.&lt;/p&gt;

&lt;p&gt;All developers must consider these trust issues at a number of key points in the process of developing software, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;when adding a library to any piece of software&lt;/li&gt;
&lt;li&gt;helping a new maintainer take over existing software&lt;/li&gt;
&lt;li&gt;reviewing changes to the URL of the source code reposistory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are also some ideas about how to better map who we need to trust to the process of including software.  One interesting example is &lt;a href=&#34;https://dpc.pw/cargo-crev-and-rust-2019-fearless-code-reuse&#34;&gt;&lt;em&gt;cargo-crev&lt;/em&gt;&lt;/a&gt; for the Rust ecosystem.  It provides a system of describing and cryptographically linking trusted developers and their reviews of software packages.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IOCipher 64-bit builds</title>
      <link>https://guardianproject.github.io/info/2019/10/07/iocipher-64-bit-builds/</link>
      <pubDate>Mon, 07 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2019/10/07/iocipher-64-bit-builds/</guid>
      <description>&lt;p&gt;IOCipher v0.5 includes fulil 64-bit support and works with the latest
SQLCipher versions.  This means that the minimum supported SDK version
had to be bumped to &lt;em&gt;android-14&lt;/em&gt;, which is still older than what
Google Play Services and Android Support libraries require.&lt;/p&gt;

&lt;p&gt;One important thing to note is that newer SQLCipher versions require
an upgrade procedure since they changed how the data is encrypted.
Since IOCipher does use a SQLCipher database, and IOCipher virtual
disks will have to be upgraded.  That can be done by directly using the
&lt;a href=&#34;https://www.zetetic.net/sqlcipher/sqlcipher-api/#cipher_migrate&#34;&gt;SQLCipher migration method&lt;/a&gt;
on your IOCipher database files before opening them again.  It should
be possible to stick with SQLCipher
&lt;a href=&#34;https://github.com/sqlcipher/android-database-sqlcipher/issues/446&#34;&gt;v3.5.9 to avoid this&lt;/a&gt;,
but this has not been tested.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tor Project: Orfox Paved the Way for Tor Browser on Android </title>
      <link>https://guardianproject.github.io/info/2019/09/03/tor-project-orfox-paved-the-way-for-tor-browser-on-android/</link>
      <pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2019/09/03/tor-project-orfox-paved-the-way-for-tor-browser-on-android/</guid>
      <description>&lt;p&gt;Last month, we tagged the &lt;a href=&#34;https://github.com/guardianproject/Orfox/releases/tag/Orfox-Final-RIP-v16&#34;&gt;final release of Orfox&lt;/a&gt;, an important milestone for us in our work on Tor. Today, we pushed this final build out to all the Orfox users on Google Play, which forces them to upgrade to the official Tor Browser for Android..&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;orfoxrip.png&#34; alt=&#34;Orfox RIP app image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Our goal was never to become the primary developer or maintainer of the &amp;ldquo;best&amp;rdquo; tor-enabled web browser app on Android. Instead, we chose to act as a catalyst to get the Tor Project and the Tor Browser development team themselves to take on Android development, and upstream our work into the primary codebase. This has happened, and it is a great news for everyone. The work for developing and updating Tor Browser on the desktop and Android are now coordinated and synchronized, and end-users benefit from more frequent updates and improvements.&lt;/p&gt;

&lt;p&gt;Most importantly, the &lt;a href=&#34;https://github.com/amoghbl1&#34;&gt;Amazing Amogh&lt;/a&gt; can focus on his PhD studies, and not on continuing the heroic task of trying to merge Firefox releases, Tor Browser patches, and Android proxy setting code for four different HTTP network libraries! Thanks, Amogh!&lt;/p&gt;

&lt;p&gt;From the &lt;a href=&#34;https://blog.torproject.org/orfox-paved-way-tor-browser-android&#34;&gt;Tor Project&amp;rsquo;s blog&lt;/a&gt; announcing the last release of Orfox:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Mobile browsing has increasingly become the primary way many people go online. In 2014, Tor Browser was used by millions of people on their desktop computers, but there was not yet a way to use Tor on a mobile device. We have long recognized the need for protecting people&amp;rsquo;s rights to privacy and freedom online, including on mobile devices, but as a small nonprofit organization, we were not yet ready to meet that demand. That&amp;rsquo;s when our friends at Guardian Project began exploring the possibility of providing Tor Browser on Android themselves. Their answer was Orfox.&lt;/p&gt;

&lt;p&gt;Orfox was first released 23 September 2015. Over the next three years, Orfox continously improved and became a popular way for people to browse the internet with more privacy than standard browsers, and Orfox was crucial for helping people circumvent censorship and access blocked sites and critical resources. It was installed over 14 million times, and maintained over 1 million active users.&lt;/p&gt;

&lt;p&gt;In late 2017, we began working on our own Tor Browser for Android. Because of Orfox&amp;rsquo;s success, the development path for us was clearer and more in reach. We were able to build upon Guardian Project&amp;rsquo;s work and bring a browser with the full protections of Tor Browser to Android. We released the alpha version of Tor Browser for Android in September 2018 and launched the stable version this May. After nearly a year since we released the alpha version of Tor Browser on Android, the time for sunsetting Orfox has come.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you have Orfox, you will see the upgrade and prompt to install Tor Browser for Android soon. Otherwise, you can just &lt;a href=&#34;https://play.google.com/store/apps/details?id=org.torproject.torbrowser&amp;amp;hl=en_US&#34;&gt;go directly to install and get it now!&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NetCipher update: global, SOCKS, and TLSv1.2</title>
      <link>https://guardianproject.github.io/info/2019/06/25/netcipher-update-global-socks-and-tlsv1.2/</link>
      <pubDate>Tue, 25 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2019/06/25/netcipher-update-global-socks-and-tlsv1.2/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://guardianproject.github.io/info/code/netcipher&#34;&gt;NetCipher&lt;/a&gt; has been relatively quiet in recent years, because it kept
on working, doing it was doing. Now, we have had some recent
discoveries about the guts of Android that mean NetCipher is a lot easier
to use on recent Android versions.  On top of that, TLSv1.2 now reigns
supreme and is basically everywhere, so it is time to turn TLSv1.0 and
TLSv1.1 entirely off.&lt;/p&gt;

&lt;h2 id=&#34;a-single-method-to-enable-proxying-for-the-whole-app&#34;&gt;A single method to enable proxying for the whole app&lt;/h2&gt;

&lt;p&gt;As of Android 8.0 (26 aka Oreo), it is now possible to set a
&lt;code&gt;URLStreamHandlerFactory&lt;/code&gt;, which creates &lt;code&gt;URLConnection&lt;/code&gt; instances
with custom configurations.  If an app is using the built-in
&lt;code&gt;HttpURLConnection&lt;/code&gt; API for its networking, it is now possible to
enable global proxying with a single method call when the app starts:
&lt;a href=&#34;https://guardianproject.github.io/NetCipher/libnetcipher/info/guardianproject/netcipher/NetCipher.html#useGlobalProxy--&#34;&gt;&lt;code&gt;NetCipher.useGlobalProxy()&lt;/code&gt;&lt;/a&gt;.
Then the actual proxy configuration can be set dynamically, using
things like
&lt;a href=&#34;https://guardianproject.github.io/NetCipher/libnetcipher/info/guardianproject/netcipher/NetCipher.html#useTor--&#34;&gt;&lt;code&gt;NetCipher.useTor()&lt;/code&gt;&lt;/a&gt;
or
&lt;a href=&#34;https://guardianproject.github.io/NetCipher/libnetcipher/info/guardianproject/netcipher/NetCipher.html#clearProxy--&#34;&gt;&lt;code&gt;NetCipher.clearProxy()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;URL.setURLStreamHandlerFactory()&lt;/code&gt; method is a little odd because it cannot be unset or changed after it has been set.  NetCipher handles this by letting the app configure the proxy settings separately, so they can be disabled even though the custom &lt;code&gt;URLStreamHandlerFactory&lt;/code&gt; is still active.  Also, it is possible to use &lt;code&gt;URL.setURLStreamHandlerFactory&lt;/code&gt; on Android 7.x also, but it leaks DNS, so it is not recommended for privacy proxies.  It would still be useful as a failsafe for apps that use &lt;a href=&#34;https://guardianproject.github.io/NetCipher/libnetcipher/info/guardianproject/netcipher/NetCipher.html#getHttpURLConnection-java.lang.String-&#34;&gt;&lt;code&gt;NetCipher.getHttpURLConnection()&lt;/code&gt;&lt;/a&gt;, in case there are any calls to &lt;code&gt;URL.openConnection()&lt;/code&gt; added with the right proxy setup.  At the very least, the content will be proxied on Android 7.x, even if it leaks DNS.&lt;/p&gt;

&lt;h2 id=&#34;native-socks-support&#34;&gt;Native SOCKS Support&lt;/h2&gt;

&lt;p&gt;In Android 7.0 (24 aka Nougat), Google switched over to OpenJDK, which brought working SOCKS support to Android.  SOCKS is the best protocol for effective proxying, and it is the protocol that Tor itself has always natively supported.  Orbot has always provided a separaete HTTP Proxy to support Android, but that has always proven brittle, and was often the source of problems.  Since Android 7.0 and above natively support SOCKS, calling &lt;code&gt;NetCipher.useTor()&lt;/code&gt; will now default to using SOCKS if the device is running Android 7.0 or higher.&lt;/p&gt;

&lt;h2 id=&#34;bye-bye-tlsv1-0-and-tlsv1-1&#34;&gt;Bye bye TLSv1.0 and TLSv1.1&lt;/h2&gt;

&lt;p&gt;Transport Layer Security (TLS) is the protocol that powers most of the internet these days.  It gives HTTPS the S for &amp;ldquo;Secure&amp;rdquo;. After many years of slow updates and an increasing number of vulnerabilities, there is finally critical mass to stop using the old, broken versions.  TLS version 1.2 is not seriously vulnerable and is supported basically everywhere.  TLSv1.2 was finalized in 2008, so this is very far from the bleeding edge.  TLSv1.2 is supported all the way back to &lt;a href=&#34;https://developer.android.com/reference/javax/net/ssl/SSLSocket#protocols&#34;&gt;Android 4.1&lt;/a&gt;.  TLSv1.0 and TLSv1.1 are due to be officially deprecated by the IETF, the standards body that actually creates the TLS standard.  The major browser vendors have all promised to drop them in 2020.&lt;/p&gt;

&lt;p&gt;One way to enforce TLSv1.2 support would be to configure the server-side to stop supporting TLSv1.0 and TLSv1.1, like is recommend with SSLv2 and SSLv3.  Using NetCipher to do this on the client side
means that old app versions and devices of F-Droid and old devices will continue to work.
Also, doing it client-side means that all TLS connections will gain this protection regardless of which server the client is connecting to.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;NetCipher&lt;/em&gt; approach means apps will never use TLS older than v1.2 since they will refuse to connect unless TLSv1.2 is available.  The server-side can then safely support TLSv1.0 and TLSv1.1, so older clients and Android devices will still be able to connect, even if they do not support TLSv1.2.  It is win-win
for everyone.&lt;/p&gt;

&lt;p&gt;The one case that will fail entirely is connections to servers that do not support TLSv1.2.  If a webserver does not support TLSv1.2, it is really too old to be used safely anyway.  Even the oldest supported Red Hat Enterprise Linux release (6) supports TLSv1.2, and that was released in 2010.&lt;/p&gt;

&lt;h2 id=&#34;webview-proxying&#34;&gt;&lt;code&gt;WebView&lt;/code&gt; Proxying!&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.android.com/reference/android/webkit/WebView&#34;&gt;&lt;code&gt;WebView&lt;/code&gt;&lt;/a&gt; provides an easy way to show a webpage or build a web app.  If you want that page to always go over Tor, that is difficult since &lt;code&gt;WebView&lt;/code&gt; has no API to configure proxying.  NetCipher has a long running collection of hacks that span the Android versions to get proxying working in &lt;code&gt;WebView&lt;/code&gt;.  We have revived those, modernized them, and added a full test suite to confirm whether the proxying is leaking.  The good news is that proxying is working pretty well on all but Android 5.x (21 and 22), where it totally fails.&lt;/p&gt;

&lt;p&gt;Another new Android API we discovered is &lt;a href=&#34;https://developer.android.com/reference/android/webkit/WebViewClient.html#shouldInterceptRequest(android.webkit.WebView,%20android.webkit.WebResourceRequest)&#34;&gt;&lt;code&gt;WebViewClient.shouldInterceptRequest()&lt;/code&gt;&lt;/a&gt;.  This is an official API for manipulating HTTP requests in &lt;code&gt;WebView&lt;/code&gt;.  It is an an easy place to insert custom &lt;code&gt;HttpURLConnection&lt;/code&gt; instances, like NetCipher needs to configure proxy support and stronger TLS.  Using this API means eliminating Java reflection hacks.  But it has a large caveat: it only works for &lt;em&gt;GET&lt;/em&gt; requests.  Since the request body is not accessible via this API, it is not possible to implement &lt;em&gt;POST&lt;/em&gt; or &lt;em&gt;PUT&lt;/em&gt; requests.  One nice approach for the best of both works is to handle &lt;em&gt;GET&lt;/em&gt; with &lt;code&gt;WebViewClient.shouldInterceptRequest()&lt;/code&gt;, then &lt;em&gt;POST&lt;/em&gt; and &lt;em&gt;PUT&lt;/em&gt; could then be implemented separately using the reflection methods in NetCipher WebView.&lt;/p&gt;

&lt;h2 id=&#34;tests&#34;&gt;Tests!&lt;/h2&gt;

&lt;p&gt;This release also brings with it an extensive, new test suite.  These let us confirm that things are working on all the supporting Android versions, while also serving as simple example cases.  For example, the tests now confirm which Android releases support &lt;code&gt;WebView&lt;/code&gt; proxying, based on Cure53&amp;rsquo;s very useful &lt;a href=&#34;https://github.com/cure53/HTTPLeaks&#34;&gt;HTTPLeaks&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PanicKit 1.0: built-in panic button and full app wipes</title>
      <link>https://guardianproject.github.io/info/2019/06/04/panickit-1.0-built-in-panic-button-and-full-app-wipes/</link>
      <pubDate>Tue, 04 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2019/06/04/panickit-1.0-built-in-panic-button-and-full-app-wipes/</guid>
      <description>

&lt;p&gt;Panic Kit is 1.0!  After over three years of use, it is time to call
this stable and ready for widespread use.&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://guardianproject.github.io/info/css/jquery.fancybox-3.4.0.min.css&#34; /&gt;
&lt;script src=&#34;https://guardianproject.github.io/info/js/jquery-3.3.1.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://guardianproject.github.io/info/js/jquery.fancybox.min.js&#34;&gt;&lt;/script&gt;
&lt;div class=&#34;gallery&#34;&gt;
  
  
  &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://guardianproject.github.io/info/info/2019/06/04/panickit-1.0-built-in-panic-button-and-full-app-wipes/Screenshot_1559551039.png&#34;&gt;
    &lt;img src=&#34;https://guardianproject.github.io/info/info/2019/06/04/panickit-1.0-built-in-panic-button-and-full-app-wipes/Screenshot_1559551039.png&#34;&gt;  &lt;br/&gt;
  &lt;/a&gt;
  
  &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://guardianproject.github.io/info/info/2019/06/04/panickit-1.0-built-in-panic-button-and-full-app-wipes/Screenshot_1559551407.png&#34;&gt;
    &lt;img src=&#34;https://guardianproject.github.io/info/info/2019/06/04/panickit-1.0-built-in-panic-button-and-full-app-wipes/Screenshot_1559551407.png&#34;&gt;  &lt;br/&gt;
  &lt;/a&gt;
  
  &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://guardianproject.github.io/info/info/2019/06/04/panickit-1.0-built-in-panic-button-and-full-app-wipes/screenshot_fdroid_destructive0.png&#34;&gt;
    &lt;img src=&#34;https://guardianproject.github.io/info/info/2019/06/04/panickit-1.0-built-in-panic-button-and-full-app-wipes/screenshot_fdroid_destructive0.png&#34;&gt;  &lt;br/&gt;
  &lt;/a&gt;
  
  &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://guardianproject.github.io/info/info/2019/06/04/panickit-1.0-built-in-panic-button-and-full-app-wipes/screenshot_fdroid_destructive1.png.png&#34;&gt;
    &lt;img src=&#34;https://guardianproject.github.io/info/info/2019/06/04/panickit-1.0-built-in-panic-button-and-full-app-wipes/screenshot_fdroid_destructive1.png.png&#34;&gt;  &lt;br/&gt;
  &lt;/a&gt;
  
  &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://guardianproject.github.io/info/info/2019/06/04/panickit-1.0-built-in-panic-button-and-full-app-wipes/screenshot_ripple.png&#34;&gt;
    &lt;img src=&#34;https://guardianproject.github.io/info/info/2019/06/04/panickit-1.0-built-in-panic-button-and-full-app-wipes/screenshot_ripple.png&#34;&gt;  &lt;br/&gt;
  &lt;/a&gt;
  
  
&lt;/div&gt;


&lt;h2 id=&#34;built-in-panic-button&#34;&gt;Built-in panic button&lt;/h2&gt;

&lt;p&gt;This round of work includes a new prototype for embedding PanicKit
directly into Android.  Android 9.0 Pie introduced a new &amp;ldquo;lockdown&amp;rdquo;
mode which follows some of the patterns laid out by PanicKit.  There
is an &lt;em&gt;Enter lockdown&lt;/em&gt; button available on the power button menu, so
it is rapidly available.  This is a great panic trigger button, so we
made a prototype of a System Settings app that lets users connect the
full flexibility of PanicKit responses to this &lt;em&gt;Enter lockdown&lt;/em&gt;
button.  The functionality that Google links to this new button is
extremely limited, it seems to be a &lt;a href=&#34;https://www.androidpolice.com/2018/03/08/android-p-feature-spotlight-new-lockdown-option-power-menu-turns-off-fingerprint-unlocking-something-called-extended-access/&#34;&gt;one time restriction on how you
login&lt;/a&gt;.
The PanicKit responses are in addition to what Google
included. CalyxOS is
&lt;a href=&#34;https://gitlab.com/calyxos/calyxos/issues/72&#34;&gt;working&lt;/a&gt; to integrate
this, look for test releases soon!&lt;/p&gt;

&lt;h2 id=&#34;full-wipes-of-selected-apps&#34;&gt;Full wipes of selected apps&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://f-droid.org&#34;&gt;F-Droid v1.7-alpha1&lt;/a&gt; has alpha support for
uninstalling and wiping all data from selected apps in response to a
panic trigger, including Ripple and F-Droid.  So the whole panic setup
could be wiped as part of the response.  It is essential to have a
complete, tested backup before trying this new feature, since it will
delete all of the data for each app that is uninstalled.&lt;/p&gt;

&lt;p&gt;This requires &lt;a href=&#34;https://f-droid.org/packages/org.fdroid.fdroid.privileged.ota&#34;&gt;F-Droid Privileged
Extension&lt;/a&gt;
be installed on the device, in order to uninstall apps without a
prompt for each app.  Android ROMs like CalyxOS, CopperheadOS,
Fairphone Open, Replicant, and Lineage-for-microG all include F-Droid
Privileged Extension.&lt;/p&gt;

&lt;h2 id=&#34;ripple-is-polished-up&#34;&gt;Ripple is polished up&lt;/h2&gt;

&lt;p&gt;Ripple also received some modernization and polish.  Google has
reinstated the Ripple app in Google Play, so it is again widely
available.  Ripple was of course available the whole time via F-Droid.
Google suspended Ripple without explanation, then a long while later
reinstated it without explanation.&lt;/p&gt;

&lt;p&gt;This work was made possible in part from donations from Handshake Foundation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Exploring possibilities of Pluggable Transports on Android</title>
      <link>https://guardianproject.github.io/info/2019/04/16/exploring-possibilities-of-pluggable-transports-on-android/</link>
      <pubDate>Tue, 16 Apr 2019 15:00:00 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2019/04/16/exploring-possibilities-of-pluggable-transports-on-android/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.pluggabletransports.info&#34;&gt;Pluggable Transports&lt;/a&gt; (PT) give software developers the means
to establishing reliable connections in &lt;a href=&#34;https://en.wikipedia.org/wiki/Deep_packet_inspection&#34;&gt;DPI-filtered&lt;/a&gt; network scenarios.
A variety of techniques are supported, all available by implementing just one
standard.  We looked into how this can be put to work in Android Apps.
Hence we crafted 3 fully functional
&lt;a href=&#34;https://gitlab.com/uniqx/anynews-android#anynews-pt&#34;&gt;PT-enabled&lt;/a&gt;
&lt;a href=&#34;https://gitlab.com/uniqx/fdroidclient-pt#f-droid-pt&#34;&gt;prototype&lt;/a&gt;
&lt;a href=&#34;https://gitlab.com/uniqx/apps-android-wikipedia-pt#wikipedia-android-pt&#34;&gt;Apps&lt;/a&gt;
based on well known open source projects.&lt;/p&gt;

&lt;p&gt;All our prototypes rely on &lt;a href=&#34;https://github.com/Yawning/obfs4&#34;&gt;obfs4&lt;/a&gt; which is a stable
PT implementation widely deployed by Tor.  Guardian Project published
a library called &lt;a href=&#34;https://github.com/guardianproject/AndroidPluggableTransports&#34;&gt;AndroidPluggableTransports&lt;/a&gt; for giving Android
developers access easy access to PT.  Since we could not find any easily
accessible sample code, we created a &lt;a href=&#34;https://gitlab.com/uniqx/pt-obfs4proxy-minimal-demo&#34;&gt;minimal demo project&lt;/a&gt;,
illustrating a minimal setup for sending a HTTP-request through a OBFS4
connection.&lt;/p&gt;

&lt;p&gt;Conceptually, a PT establishes point to point connections between a PT client
and a PT server.  PT servers are also known as &amp;ldquo;bridges&amp;rdquo;.  Most app back-ends,
on the other hand, consist of multiple services and third party APIs.  We&amp;rsquo;re
using SOCKS5 for multiplexing several connections over a single PT connection.
A nice benefit to this approach is that client side integration looks similar
to integrating Tor.&lt;/p&gt;

&lt;p&gt;Every PT bridge generates an individual set of parameters. These are required
for establishing connections to that bridge. In the context of Tor, these
parameters are often referred to as a &amp;ldquo;bridge line&amp;rdquo;, which also implies a
quasi-standardized formatting of these parameters.&lt;/p&gt;

&lt;p&gt;Starting a PT connection involves several layers of proxying.  This diagram
should give you an idea of what&amp;rsquo;s really going on when we start a PT
connection:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;apt-setup-socks5.png&#34; alt=&#34;Schematic overview of establishing a PT connection used&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For many organizations it is not an option to run open proxies on the Internet
because the bandwidth bills would be too large, or the security risks too high.
This means we need to refine our SOCKS5 based approach a bit.  An obvious
solution is to restrict usage of a PT bridge for one specific app.  This can
be achieved simply by whitelisting outgoing connections on a bridge&amp;rsquo;s
SOCKS5 server.  Some SOCKS5 servers have built-in support for this, so we&amp;rsquo;re
covered.  We published the deployment script we&amp;rsquo;re using to set up our &lt;a href=&#34;https://gitlab.com/uniqx/pt-socks5-over-obfs4proxy&#34;&gt;SOCKS5-enabled bridges&lt;/a&gt; in our prototype environment.&lt;/p&gt;

&lt;p&gt;While SOCKS5 support is widespread these days, some apps might still need to
rely on HTTP-proxying.  That&amp;rsquo;s why we also included an embedded HTTP-proxy in
our prototype Apps.  This proxy is configured to transparently send requests
through the SOCK5 connection, which in turn runs through a PT connection.&lt;/p&gt;

&lt;p&gt;All that required from the app developer&amp;rsquo;s perspective is to configure APT
(and our soon-to-be upstreamed proxy helper library) with a bridge line,
then configure all network connections to use a either a SOCKS5 or HTTP proxy.&lt;/p&gt;

&lt;p&gt;We also looked into ways for distributing parameters for
&lt;a href=&#34;https://github.com/guardianproject/AndroidPluggableTransports/pull/15&#34;&gt;PT connections&lt;/a&gt;. We started out by supporting bridge-lines as
used in Tor browser and Orbot. Copy and pasting these is not very convenient
and probably looks arcane to most users. So we came up with the idea of
sharing bridge connection parameters as URLs.  HTTP(S) URLs are clickable in
most Android Apps which makes sharing a lot easier.  Apps can subscribe to
URL patterns.  This way it&amp;rsquo;s possible to intercept clicks on PT bridge
parameters and configure PT settings accordingly. While these URLs still
look somewhat arcane, they hopefully enable an improved user experience.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example of a bridge-line and how it looks like the in all URL formats:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Bridge obfs4 104.224.78.19:443 FD9DAEE45A2FDF70D462914A75ADE99A29957920 cert=LSOd9qOffpIFM4az+ueou7sY0eQRAsI/joW4QgCl/LSDo2ecQzAQHNu281oAivLDZuTQNA iat-mode=0
bridge://obfs4@104.224.78.19:443/FD9DAEE45A2FDF70D462914A75ADE99A29957920?cert=LSOd9qOffpIFM4az%2Bueou7sY0eQRAsI%2FjoW4QgCl/LSDo2ecQzAQHNu281oAivLDZuTQNA&amp;amp;iat-mode=0
http://bridge.onion/FD9DAEE45A2FDF70D462914A75ADE99A29957920?transport=obfs4&amp;amp;ip=104.224.78.19&amp;amp;port=443&amp;amp;cert=LSOd9qOffpIFM4az%2Bueou7sY0eQRAsI%2FjoW4QgCl/LSDo2ecQzAQHNu281oAivLDZuTQNA&amp;amp;iat-mode=0
https://bridges.torproject.org/FD9DAEE45A2FDF70D462914A75ADE99A29957920?transport=obfs4&amp;amp;ip=104.224.78.19&amp;amp;port=443&amp;amp;cert=LSOd9qOffpIFM4az%2Bueou7sY0eQRAsI%2FjoW4QgCl/LSDo2ecQzAQHNu281oAivLDZuTQNA&amp;amp;iat-mode=0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s still some room for refining this. Tor Browser, for example, will
happily accept but fail using our experimental SOCKS5 bridges.  Meanwhile our
prototype apps will accept but fail to connect to Tor bridges.  So it would
make sense to explore what metadata apps need to decide whether they are
capable of connecting to a specific bridge or not.&lt;/p&gt;

&lt;p&gt;An important missing puzzle piece in this regard also is to make sure DNS
queries can not get filtered.  &lt;a href=&#34;https://en.wikipedia.org/wiki/DNS_over_HTTPS&#34;&gt;DNS-over-HTTPS (DoH)&lt;/a&gt; could be
a suiteable mitigation. Further down the road, it certainly would make sense
to look into sending DNS requests over pluggable transports too.&lt;/p&gt;

&lt;p&gt;Many Android apps use &lt;code&gt;WebView&lt;/code&gt; for transparently embedding web content.
Sadly, proxy support of &lt;code&gt;WebView&lt;/code&gt; is not very developer friendly.  We are
shipping a well-tested helper library with &lt;a href=&#34;https://gitlab.com/guardianproject/NetCipher/#webview&#34;&gt;NetCipher&lt;/a&gt; to
ease this pain.&lt;/p&gt;

&lt;p&gt;We also explored an alternative approach to control the networking of
Android&amp;rsquo;s &lt;code&gt;WebView&lt;/code&gt;. It&amp;rsquo;s possible to replace all network requests
a &lt;code&gt;WebView&lt;/code&gt; sends by overriding &lt;code&gt;WebViewClient.shouldInterceptRequest()&lt;/code&gt;.
This technique will work well for read-only (HTTP GET) connections.  Sending
data (HTTP POST and PUT) is not feasible though. There is no interface,
either exposed or hidden, in Android&amp;rsquo;s API which would allow us to retrieve
a HTTP request&amp;rsquo;s body.&lt;/p&gt;

&lt;p&gt;Finally here&amp;rsquo;s a list of alternative scenarios we came up with for using PT
on Android.  They are not as generic as the approach we chose to implement in
the prototype Apps.  In some situations these might be easier to implement,
perform better or simply convey how PT can be put to use.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;apt-setup-scenarios.png&#34; alt=&#34;Schematic overview of establishing a PT connection used&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Orbot v16: a whole new look, and easier to use!</title>
      <link>https://guardianproject.github.io/info/2018/01/05/orbot-v16-a-whole-new-look-and-easier-to-use/</link>
      <pubDate>Fri, 05 Jan 2018 13:14:17 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2018/01/05/orbot-v16-a-whole-new-look-and-easier-to-use/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/apps/orbot/&#34;&gt;Orbot: Tor for Android&lt;/a&gt; has a new release (&lt;a href=&#34;https://gitweb.torproject.org/orbot.git/tag/?h=16.0.0-RC-2&#34;&gt;tag&lt;/a&gt; and &lt;a href=&#34;https://gitweb.torproject.org/orbot.git/diff/CHANGELOG?h=16.0.0-RC-1-CHANGELOG&amp;amp;id=5542e8e192fcff24284179e7fdb31cf877f79efd&#34;&gt;changelog&lt;/a&gt;), with a major update to the user experience and interface. This is the 16th major release of Orbot, since it was launched in late 2009.&lt;/p&gt;

&lt;p&gt;The main screen of the app now looks quite different, with all the major features and functions exposed for easy access. We have also added a new onboarding setup wizard for first time users, that assists with configuring connections to the Tor network for users in places where Tor itself is blocked. This release also continues to support users looking to use Orbot to unblock specific apps, that may not be available on their network or country. From the main screen, users can activate Orbot’s built-in VPN feature, and easily choose which specific apps they want to be routed over the Tor network. You can also refresh your Tor identity, rebuilding all circuit connections through the network, using the circular reload icon in the expanded notification provided by Orbot.&lt;/p&gt;

&lt;p&gt;The update is rolling out on &lt;a href=&#34;https://play.google.com/store/apps/details?id=org.torproject.android&#34;&gt;Google Play&lt;/a&gt;, and will also be available on &lt;a href=&#34;https://guardianproject.info/fdroid/&#34;&gt;Guardian Project’s F-Droid Repo&lt;/a&gt; soon. You can also find &lt;a href=&#34;https://github.com/n8fr8/orbot/releases&#34;&gt;Android APKs on Github&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;THANKS TO: pgerber, syphyr, Khsed4, BjarniRunar, Unpublished, igortoliveira, goapunk, SpotComms, AkshatAgrawal05, dixidroid, arrase and others for the bug reports and fixes on the Orbot app. Thanks to &lt;a href=&#34;https://twitter.com/wwwiretap&#34;&gt;Sina&lt;/a&gt; with Team Cymru for the extra infrastructure provided to help users in places where Tor itself is blocked. Also, &lt;a href=&#34;https://twitter.com/mrphs&#34;&gt;Nima&lt;/a&gt; for the guidance, support and motivation to get this release out sooner rather than later!&lt;/p&gt;

&lt;div id=&#39;gallery-13&#39; class=&#39;gallery galleryid-13934 gallery-columns-3 gallery-size-medium&#39;&gt;
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122015.png&#39;&gt;&lt;img width=&#34;169&#34; height=&#34;300&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122015-169x300.png&#34; class=&#34;attachment-medium size-medium&#34; alt=&#34;&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122015-169x300.png 169w, https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122015-768x1365.png 768w, https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122015-576x1024.png 576w, https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122015.png 1440w&#34; sizes=&#34;(max-width: 169px) 100vw, 169px&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122035.png&#39;&gt;&lt;img width=&#34;169&#34; height=&#34;300&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122035-169x300.png&#34; class=&#34;attachment-medium size-medium&#34; alt=&#34;&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122035-169x300.png 169w, https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122035-768x1365.png 768w, https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122035-576x1024.png 576w, https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122035.png 1440w&#34; sizes=&#34;(max-width: 169px) 100vw, 169px&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122111.png&#39;&gt;&lt;img width=&#34;169&#34; height=&#34;300&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122111-169x300.png&#34; class=&#34;attachment-medium size-medium&#34; alt=&#34;&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122111-169x300.png 169w, https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122111-768x1365.png 768w, https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122111-576x1024.png 576w, https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122111.png 1440w&#34; sizes=&#34;(max-width: 169px) 100vw, 169px&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;br style=&#34;clear: both&#34; /&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122301.png&#39;&gt;&lt;img width=&#34;169&#34; height=&#34;300&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122301-169x300.png&#34; class=&#34;attachment-medium size-medium&#34; alt=&#34;&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122301-169x300.png 169w, https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122301-768x1365.png 768w, https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122301-576x1024.png 576w, https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122301.png 1440w&#34; sizes=&#34;(max-width: 169px) 100vw, 169px&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122344.png&#39;&gt;&lt;img width=&#34;169&#34; height=&#34;300&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122344-169x300.png&#34; class=&#34;attachment-medium size-medium&#34; alt=&#34;&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122344-169x300.png 169w, https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122344-768x1365.png 768w, https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122344-576x1024.png 576w, https://guardianproject.info/wp-content/uploads/2018/01/device-2018-01-05-122344.png 1440w&#34; sizes=&#34;(max-width: 169px) 100vw, 169px&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;br style=&#39;clear: both&#39; /&gt;
&lt;/div&gt;

&lt;p&gt;/** v16.0.0 RC 1 / 5 Jan 2018 / 309c42be916d866a28adacb0a4f92d692cbd6009 **/&lt;/p&gt;

&lt;p&gt;7e9890e tweak default bridge behavior based on locale&lt;br /&gt;
fec853c updates to notification for Android O / SDK26&lt;br /&gt;
b161043 Merge pull request #106 from Unpublished/fix_binary_search&lt;br /&gt;
ab472d5 Merge branch ‘syphyr-master’&lt;br /&gt;
4fc3e7e Merge branch ‘master’ of &lt;a href=&#34;https://github.com/syphyr/orbot&#34;&gt;https://github.com/syphyr/orbot&lt;/a&gt; into syphyr-master&lt;br /&gt;
792ee2b Merge branch ‘BjarniRunar-master’&lt;br /&gt;
0d4a735 Merge branch ‘master’ of &lt;a href=&#34;https://github.com/BjarniRunar/orbot&#34;&gt;https://github.com/BjarniRunar/orbot&lt;/a&gt; into BjarniRunar-master&lt;br /&gt;
c7b1441 add comment about app updates URL&lt;br /&gt;
d21ff80 update strings and code for switching Locale in app&lt;br /&gt;
5c5790c fix binary search&lt;br /&gt;
38b0063 update build to &lt;sup&gt;16000005&lt;/sup&gt;&amp;frasl;&lt;sub&gt;6&lt;/sub&gt; for 16.0.0-BETA-2&lt;br /&gt;
7da26a3 update strings from transifex&lt;br /&gt;
ce714fa use the proper localized start/end params&lt;br /&gt;
38cc29c externalize more strings&lt;br /&gt;
8bcc9a4 update gitignore&lt;br /&gt;
6e3b6ba add onboarding strings localizatoin&lt;br /&gt;
154e373 ensure appupdater check starts up&lt;br /&gt;
703f8a1 move update back to older (reduce version code)&lt;br /&gt;
b556518 move update back to older version&lt;br /&gt;
680d108 update json for testing&lt;br /&gt;
e4f6348 test updating json&lt;br /&gt;
dafcdd7 enable AppUpdater notificatoins through Github&lt;br /&gt;
3b5a361 update handling of vpn enabled and app onclick&lt;br /&gt;
e21474c updates to layout and strings for bridge wizard&lt;br /&gt;
2a9691c make sure the back arrow works&lt;br /&gt;
244231c remove activity no longer used&lt;br /&gt;
0284130 remove out activity no longer used&lt;br /&gt;
e487f34 update strings&lt;br /&gt;
8fd0bd0 update tor-android to 0.3.19b (updated geoip databases)&lt;br /&gt;
ad51bed update transifex configuration&lt;br /&gt;
a08c707 update app store descriptions&lt;br /&gt;
2ced17a update build SDK targets to 26&lt;br /&gt;
5c22de2 manifest updates: remove superuser, enable chromebooks&lt;br /&gt;
b4aa9d8 more improvements for bridge wizard&lt;br /&gt;
df37b8c add bridge wizard testing code&lt;br /&gt;
14ce4f6 big update for new onboarding, bridge wizard&lt;br /&gt;
2ceacf6 move bridges to raw resources&lt;br /&gt;
938a740 improve vpn app enable view on main activity&lt;br /&gt;
ba358a4 add new orfox and settings icon&lt;br /&gt;
5bd5a56 VPN should be off by default&lt;br /&gt;
e464044 connection might be null&lt;br /&gt;
51216a4 Add new preference: pref_open_proxy_on_all_interfaces&lt;br /&gt;
21b4521 Update version strings in help-&amp;gt;about&lt;br /&gt;
5500b50 update spuport library version&lt;br /&gt;
546310a improve notifications, add refresh/newnym button&lt;br /&gt;
877406f tweak layout&lt;br /&gt;
b68132b fix title for tor app section&lt;br /&gt;
7210223 fix handling of intents&lt;br /&gt;
47e10e7 fix issues with bridge selection UI&lt;br /&gt;
e6bd23a more UI updates and small improvements&lt;br /&gt;
d9bd32a more UI updates&lt;br /&gt;
7303a33 work on the new UI update&lt;br /&gt;
6a19bf6 update UI tweaks for next release&lt;br /&gt;
3741434 don’t show app selection each time you turn VPN on/off&lt;br /&gt;
4df2fcf move “other” installer back to tor resource installer&lt;br /&gt;
f3f9162 don’t delete installed binaries&lt;br /&gt;
6493d8d Merge pull request #104 from igortoliveira/remove-java-file&lt;br /&gt;
fc4d6aa improve app loading time for VPN app dialog&lt;br /&gt;
fbeff25 Remove leftover Java file&lt;br /&gt;
544ea7b update build to use tor version constant from tor-android-binary&lt;br /&gt;
977167b ZMerge branch ‘master’ of github.com:n8fr8/orbot&lt;br /&gt;
b07d4fe removed unused submodules, moved to gradle tor-android&lt;br /&gt;
d392ecd remove unneeded external dirs for making tor&lt;br /&gt;
3d729fc switch to using tor-android binary in TorService&lt;br /&gt;
6f364de use the new tor-android gradle dependency &lt;a href=&#34;https://github.com/n8fr8/tor-android&#34;&gt;https://github.com/n8fr8/tor-android&lt;/a&gt;&lt;br /&gt;
c7f834b moving binary files, use tor-android gradle&lt;br /&gt;
3b5e27e removing external depends, moving to tor-android gradle&lt;br /&gt;
898f64a Merge pull request #99 from goapunk/update-BUILD-instructions&lt;br /&gt;
e14d647 update BUILD&lt;br /&gt;
fce5bde add autopoint to dependencies&lt;br /&gt;
72c7e04 Merge pull request #97 from SpotComms/padding&lt;br /&gt;
8cf412a Merge pull request #98 from goapunk/add-lzma-zstd-as-dependency&lt;br /&gt;
c1dfc29 Update BUILD instructions&lt;br /&gt;
9ca36e1 Add lzma and zstd&lt;br /&gt;
6e4b700 Expose *ConnectionPadding&lt;br /&gt;
71e3464 Merge pull request #94 from Unpublished/fix88&lt;br /&gt;
cbffc1d remove some transproxy left overs&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Repomaker Usability Trainers Worldwide, June 2017</title>
      <link>https://guardianproject.github.io/info/2017/06/29/repomaker-usability-trainers-worldwide-june-2017/</link>
      <pubDate>Thu, 29 Jun 2017 08:13:04 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2017/06/29/repomaker-usability-trainers-worldwide-june-2017/</guid>
      <description>

&lt;h1 id=&#34;repomaker-usability-trainers-worldwide-study-p&#34;&gt;Repomaker Usability, Trainers Worldwide Study&lt;/p&gt;&lt;/h1&gt;

&lt;p&gt;Prepared by Carrie Winfrey and Tiffany Robertson, Okthanks, in partnership with F-Droid and Guardian Project&lt;/p&gt;

&lt;div id=&#34;attachment_13844&#34; style=&#34;width: 310px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2017/06/okt-gp.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-13844&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/okt-gp-300x72.png&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;72&#34; class=&#34;size-medium wp-image-13844&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2017/06/okt-gp-300x72.png 300w, https://guardianproject.info/wp-content/uploads/2017/06/okt-gp-768x184.png 768w, https://guardianproject.info/wp-content/uploads/2017/06/okt-gp-1024x246.png 1024w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-13844&#34; class=&#34;wp-caption-text&#34;&gt;
    OK Thanks – Guardian Project
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;For more information, contact ca&amp;#x72;&amp;#x72;&amp;#x69;e@o&amp;#x6b;&amp;#x74;han&amp;#x6b;&amp;#x73;.co&amp;#x6d;.&lt;/p&gt;

&lt;h1 id=&#34;purpose&#34;&gt;Purpose&lt;/h1&gt;

&lt;p&gt;The purpose of this study was to understand the following things.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Are users able to complete basic tasks including, creating a repo, adding apps from other repos, removing apps, editing app details, and creating a second repo?&lt;/li&gt;
&lt;li&gt;Do participants understand how to get the apps from a repo installed on an Android phone?&lt;/li&gt;
&lt;li&gt;Word choice—Do people understand the word repo?&lt;/li&gt;
&lt;li&gt;Is repomaker a useful tool to participants?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;methodology&#34;&gt;Methodology&lt;/h1&gt;

&lt;p&gt;The study was hosted via video calls with potential users within our target audience. It was focused on the trainer use case. The narrative below describes the target use case.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Narrative.&lt;/strong&gt; You live or teach people in a location with poor internet quality. Your wifi and data connection are not reliable, and rarely can you use Google Play to get apps and app updates on your phone. This makes it difficult to do your job. As an instructor, your job is to train journalists how to stay safe while using their phones. You teach them ways to keep their communications and media private.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;The study consisted of 3 parts.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Usability study.&lt;/strong&gt; Participants were asked to use Repomaker to complete tasks as we prompted them to do so. After completing the tasks, participants were asked to rate its level of difficulty.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;task-list&#34;&gt;Task List:&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Login to the app. Create a repo and add three apps that are useful for the journalists you train.&lt;/li&gt;
&lt;li&gt;Add the Twitter app.&lt;/li&gt;
&lt;li&gt;Add the Courier app from the Guardian Project’s repo.&lt;/li&gt;
&lt;li&gt;Add a description to the Courier app.&lt;/li&gt;
&lt;li&gt;Remove an app from your repo.&lt;/li&gt;
&lt;li&gt;Create a second repo. You don’t need to add any apps.&lt;/li&gt;
&lt;li&gt;Reopen your first repo.&lt;/li&gt;
&lt;li&gt;Share your first repo with your journalists.&lt;/li&gt;
&lt;li&gt;Open the page you just shared.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Talk through how your journalists would add this repo to their android phone.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Debrief.&lt;/strong&gt; The following questions were discussed. &lt;ol type=&#34;a&#34;&gt;
&lt;li&gt;
Would the individuals you train feel comfortable downloading F-Droid in order to get access to the apps in a repo? (Note: F-droid cannot be downloaded from the Google Play store. It can be downloaded directly from the fdroid.org website or received over bluetooth from someone in the same room. Also, downloading F-Droid requires you to enable unknown sources on your phone.)
&lt;/li&gt;
&lt;li&gt;
Please tell me how Repomaker would be useful for you?
&lt;/li&gt;
&lt;/ol&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;Survey.&lt;/strong&gt; Users were asked to complete the survey immediately after the video call:&lt;a href=&#34;https://goo.gl/forms/Acq4zYB3KOtQPxBa2&#34;&gt;https://goo.gl/forms/Acq4zYB3KOtQPxBa2&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;what-was-tested-link-to-youtube-video-https-youtu-be-do9bxqsex4g-p&#34;&gt;What was tested: &lt;a href=&#34;https://youtu.be/do9bxqSeX4g&#34;&gt;Link to youtube video&lt;/a&gt;. &lt;/p&gt;&lt;/h4&gt;

&lt;h1 id=&#34;participants&#34;&gt;Participants&lt;/h1&gt;

&lt;p&gt;9 people participated in the study from countries including Guyana, India, Pakistan, United States and Zimbabwe. 50% of have experience training. View Demographic stats&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;Participants were thanked with a $20 gift card to Amazon or Google Play.&lt;/p&gt;&lt;/p&gt;

&lt;h1 id=&#34;main-takeaways&#34;&gt;Main Takeaways&lt;/h1&gt;

&lt;p&gt;In general, people are excited about this tool. A majority of the participants feel that the interface is straight-forward and easy to use. 8 of 9 participants felt that Repomaker is a useful tool and would use it. It is most useful for distributing apps in cases where there is no internet connection. See notable survey results &lt;a href=&#34;#heading=h.paz3gb4hmvya&#34;&gt;Biggest Challenge&lt;/a&gt;.&lt;/p&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Users need a core understanding of F-Droid and how it works&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The majority of participants felt that they would need to understand F-Droid first before using Repomaker. More info in task 10&lt;/li&gt; &lt;/ul&gt;&lt;/p&gt;

&lt;h4 id=&#34;suggested-improvements&#34;&gt;Suggested Improvements:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;We need to talk about F-Droid in a way that is familiar to non-technical users.

&lt;ul&gt;
&lt;li&gt;For example: F-Droid is an independent, community-sourced app store. You can customize it by adding repos, collections of apps shared by sources you trust.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Make a strong brand connection between Repomaker and F-Droid. Users need to understand that Repomaker is part of F-Droid.&lt;/li&gt;
&lt;li&gt;Provide step-by-step instructions for installing F-Droid and installing apps from a repo on an Android phone.&lt;/li&gt;
&lt;li&gt;Consider the touchpoints for a first time user—

&lt;ul&gt;
&lt;li&gt;Goes to the F-Droid website&lt;/li&gt;
&lt;li&gt;Views Repomaker page (on the F-Droid website)&lt;/li&gt;
&lt;li&gt;Launches Repomaker&lt;/li&gt;
&lt;li&gt;Opens in a new tab to Login/Signup view.&lt;/li&gt;
&lt;li&gt;Select Sign Up. Enter info. Action button says “Create my first repo”&lt;/li&gt;
&lt;li&gt;New repo view&lt;/li&gt;
&lt;li&gt;Single repo empty view
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;p&#34;&gt;&lt;/p&gt;&lt;/h2&gt;

&lt;h2 id=&#34;2-repo-is-an-abstract-concept&#34;&gt;2. Repo is an abstract concept&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Most participants understood this after they started using the app. Link to survey result&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Though, upon first use, many participants tapped the ‘Add’ button instead of ‘Add from repos’ because they were unsure what ‘Add from repos’ meant. More info in task 1&lt;/li&gt; &lt;/ul&gt;&lt;/p&gt;

&lt;h4 id=&#34;suggested-improvements-1&#34;&gt;Suggested Improvements:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Use the wording “Browse gallery” instead of “Add from repos”.&lt;/li&gt;
&lt;li&gt;Indicate how much stuff is there (2,000 apps, …)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Use less words in the single repo empty state view. **TICKET #120&lt;/li&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provide blurbs about what a repo and and what they can be used for.&lt;/ul&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-participants-had-questions-and-concerns-about-editing&#34;&gt;3. Participants had questions and concerns about editing&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Many participants were surprised they could edit apps from other people and commented that they wouldn’t have known they could do it if we hadn’t asked them to do so.&lt;/li&gt;
&lt;li&gt;One participant was unsure if the editing function worked like a Wiki and would update everywhere, or if it would only appear in her repo.&lt;/li&gt;
&lt;li&gt;One participant commented that liked that she could add her own translations.&lt;/li&gt;
&lt;li&gt;Some participants expressed their concern about the security of this feature.&lt;/li&gt;
&lt;li&gt;UI for editing is confusing. Description box takes a long time to load and requires scrolling to see.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#heading=h.om0y9gk1w74z&#34;&gt;More info in task 4&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;suggested-improvements-2&#34;&gt;Suggested Improvements:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Address questions and concerns in a FAQ page&lt;/li&gt;
&lt;li&gt;Show bar on editing page, when editing a file from another repo. Ticket ..&lt;/li&gt;
&lt;li&gt;Allow the name and developer to be entered only when the first version of a file is added. Do not allow this to be changed afterward.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add hints to summary and description field. **TICKET #103&lt;/li&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Provide ‘save’ buttons under text sections rather than one ‘done’ button for the entire page.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Offer translation option within Repomaker **TICKET #58&lt;/li&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If it comes from a remote repository AND there is text in the field, then make it read-only.&lt;/li&gt;
&lt;li&gt;Hook into FAQ about why you can edit things.&lt;/ul&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;4-people-have-concerns-about-the-security-of-repomaker&#34;&gt;4. People have concerns about the security of Repomaker&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Some participants shared concern about people being able to masquerade an app with the editing feature.&lt;/li&gt;
&lt;li&gt;One participant was unsure how public the repo was when she was creating it, and was hesitant about how she named it.&lt;/li&gt;
&lt;li&gt;One participant commented that she didn’t want to be responsible for sharing non-secure apps.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;suggested-improvements-3&#34;&gt;Suggested Improvements:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Allow the name and developer to be entered only when the first version of a file is added. Do not allow this to be changed afterward.&lt;/li&gt;
&lt;li&gt;Provide clear information when a repo is created about who has access to the repo.&lt;/li&gt;
&lt;li&gt;Provide a clear ‘publish’ step, so that users know when I repo is made visible to others.&lt;/li&gt;
&lt;li&gt;Address concerns in a FAQ.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;5-ui-for-search-and-filters-in-the-other-repo-browse-view-is-unclear&#34;&gt;5. UI for search and filters in the ‘Other Repo/Browse’ view is unclear&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;It’s unclear that you’re searching within a category if you have one selected.&lt;/li&gt;
&lt;li&gt;Most participants commented that they wanted a clear way to go back from this view. Some would tap back in the browser and changes wouldn’t be saved.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#heading=h.iximbencraon&#34;&gt;More info in task 2&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;suggested-improvements-4&#34;&gt;Suggested Improvements:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Redesign how search and filters work together in the UI **TICKET #119&lt;/li&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Add apps immediately once selected. Offer the option to remove rather than being able to ‘uncheck’.&lt;/li&gt;
&lt;li&gt;Count apps when added.&lt;/ul&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;****&lt;/p&gt; &lt;/p&gt;&lt;/p&gt;

&lt;h1 id=&#34;page-break-pagebreak&#34;&gt;PAGE_BREAK: PageBreak&lt;/h1&gt;

&lt;h1 id=&#34;usability-metrics&#34;&gt;Usability Metrics&lt;/h1&gt;

&lt;p&gt;Usability metrics refers to participant performance when completing the assigned tasks. This is includes completion success rates, error rates, time to task completion and subjective evaluations/interviews. &lt;/p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Critical Errors&lt;/strong&gt;: Critical errors are reported as errors that result in failure to complete the task. Participants may or may not be aware that the task goal is incorrect or incomplete. Independent completion of the task is the goal; help from the test facilitator or others is to be marked as a critical error.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Non-critical Errors&lt;/strong&gt;: Non-critical errors are errors that the participant recovers from alone and are not such that the participant can no longer complete the task. They can include errors such as excessive steps taken to complete a task or initially using an incorrect function but recovering from that incorrect step.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No Problem&lt;/strong&gt;: A qualitative analysis of users ability to complete the task with seemingly ‘no problems’. However, this does not mean that non-critical errors were &lt;em&gt;not&lt;/em&gt; made while completing the task. &lt;/p&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Level of Difficulty:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The participants were asked to rate the level of difficulty per task as they completed them.&lt;/p&gt; &lt;/p&gt;&lt;/p&gt;

&lt;p style=&#34;text-align:center;&#34;&gt;
  &lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null2.png&#34; width=&#34;624&#34; height=&#34;393&#34; alt=&#34;&#34; title=&#34;&#34; /&gt;
&lt;/p&gt;
                            

&lt;ul&gt;
&lt;li&gt;Task 1: Create a repo and add 3 apps.

&lt;ul&gt;
&lt;li&gt;Users becoming familiar with interface also many believed once they hit ‘add’ and saw the blue button their app had been added or saved to their repo.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Task 3: Add the Courier app from the Guardian Project’s repo.

&lt;ul&gt;
&lt;li&gt;Rated lowest level of difficulty because users have become familiar with the interface.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Task 5: Remove an app.

&lt;ul&gt;
&lt;li&gt;Rated highest level of difficulty because users felt there were too many steps involved and most expected to be able to remove an app from the repos view.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Task 6: Create a second repo.&lt;/li&gt;
&lt;li&gt;Task 8: Share your first repo with the journalist you train.
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Average Critical Error Rate:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Critical errors are reported as errors that result in failure to complete the task. Participants may or may not be aware that the task goal is incorrect or incomplete. Independent completion of the task is the goal. Help from the test facilitator or others is to be marked as a critical error. &lt;/p&gt;&lt;/p&gt;

&lt;p style=&#34;text-align:center;&#34;&gt;
  &lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null3.png&#34; width=&#34;624&#34; height=&#34;390&#34; alt=&#34;&#34; title=&#34;&#34; /&gt;
&lt;/p&gt;
                            

&lt;p style=&#34;text-align:center;&#34;&gt;
  &lt;p style=&#34;text-align:center;&#34;&gt;
    &lt;ul&gt;
      &lt;li&gt;
        Task 1: One participant unable to complete the task without help from the facilitator. &lt;ul&gt;
          &lt;li&gt;
            Participant thought she could add anything from her applications folder on her computer. 
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
                                  
      &lt;li&gt;
        Task 3: One participant unable to compete the task without her from the facilitator. &lt;ul&gt;
          &lt;li&gt;
            The Courier app was already in their repo and they didn’t see the error so when clicking the ‘done’ button they were not brought back to their repo.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
                                  
      &lt;li&gt;
        Task 4: Two participants unable to complete the task. &lt;ul&gt;
          &lt;li&gt;
            Added the description to the summary field only (instead of the correct text box).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
                                  
      &lt;li&gt;
        Task 5: One participant unable to complete the task. &lt;ul&gt;
          &lt;li&gt;
            Opened and closed app index and app details twice.
          &lt;/li&gt;
          &lt;li&gt;
            Couldn’t figure it out from the repo view and didn’t choose ‘edit’ in the app details view because they weren’t making edits to the app just the repo.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
                                  
      &lt;li&gt;
        Task 8: One person was unable to complete the task. &lt;ul&gt;
          &lt;li&gt;
            They tried to get the repo added to their phone first, but was technically unable to do so because of storage limitations.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
                                
    &lt;p&gt;
      &lt;b&gt;&lt;/b&gt;
    &lt;/p&gt;
                                

&lt;pre&gt;&lt;code&gt;&amp;lt;p&amp;gt;
  &amp;lt;b&amp;gt;Average Non-critical Error Rate:&amp;lt;/b&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;p&amp;gt;
  Non-critical errors are errors that the participant recovers from alone and are not such that the participant can no longer complete the task. They can include errors such as excessive steps taken to complete a task or initially using an incorrect function but recovering from that incorrect step. 
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p style=&#34;text-align:center;&#34;&gt;
    &lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null4.png&#34; width=&#34;612&#34; height=&#34;354&#34; alt=&#34;&#34; title=&#34;&#34; /&gt;
  &lt;/p&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Task 1 &amp;amp; 2: Participants learning the interface and multiple steps required to complete the task.

&lt;ul&gt;
&lt;li&gt;Unfamiliar with the word repo.&lt;/li&gt;
&lt;li&gt;Were distracted by the ‘add’ button on repo page.&lt;/li&gt;
&lt;li&gt;Issues with adding from other repos-See details in tasks 1 &amp;amp; 2.&lt;/li&gt;
&lt;li&gt;Blue check didn’t conform to their expectations.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Task 5: Too many steps involved. Many thought this action would be found within the repo view.&lt;/li&gt;
&lt;li&gt;Task 8: Participants tapped the ‘copy link’ button and after seeing the blue check thought they were finished, but not confident in what just happened. Afterwards, copying and pasting the link in a new tab.&lt;/p&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;page-break-pagebreak-1&#34;&gt;PAGE_BREAK: PageBreak&lt;/h1&gt;

&lt;h1 id=&#34;task-specific-findings-p&#34;&gt;Task Specific Findings&lt;/p&gt;&lt;/h1&gt;

&lt;h2 id=&#34;task-1-login-to-the-app-create-a-repo-and-add-three-apps-that-are-useful-for-the-journalists-you-train&#34;&gt;Task 1: Login to the app. Create a repo and add three apps that are useful for the journalists you train.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Average Difficulty&lt;/strong&gt;: 1.83&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Number of Participants with Critical Errors&lt;/strong&gt;: 1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No problem&lt;/strong&gt; – &lt;sup&gt;4&lt;/sup&gt;&amp;frasl;&lt;sub&gt;9&lt;/sub&gt; (44%)&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/image.png&#34; width=&#34;693&#34; height=&#34;381&#34; alt=&#34;&#34; title=&#34;&#34; /&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;__&lt;/p&gt;

&lt;p&gt;__&lt;/p&gt;

&lt;p style=&#34;text-align:center;&#34;&gt;
  &lt;i&gt;“I wouldn’t actually put the country name, because I’m not sure how public this is.” (Participant 9)&lt;/i&gt;
&lt;/p&gt;
                            

&lt;p style=&#34;text-align:center;&#34;&gt;
  &lt;i&gt;&lt;/i&gt;
&lt;/p&gt;
                            

&lt;p style=&#34;text-align:center;&#34;&gt;
  &lt;i&gt;“I don’t want to be responsible for sending out non-secure apps.” &lt;/i&gt;
&lt;/p&gt;
                            

&lt;p style=&#34;text-align:center;&#34;&gt;
  (Participant 5)
&lt;/p&gt;
                            

&lt;h4 id=&#34;observations&#34;&gt;Observations:&lt;/h4&gt;

&lt;p&gt;Apps Index View – Before Apps are Added&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Clicked ‘add’ first – &lt;sup&gt;4&lt;/sup&gt;&amp;frasl;&lt;sub&gt;9&lt;/sub&gt; (44%)&lt;/li&gt;
&lt;li&gt;Thought the ‘+’ in the nav bar was to add apps – &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;9&lt;/sub&gt; (22%)&lt;/li&gt;
&lt;li&gt;Unclear that this was only for Android apps; Was confused about which apps could be added; thought she could add things from her applications folder on her computer – &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;9&lt;/sub&gt; (11%)&lt;/li&gt;
&lt;li&gt;Confused about adding .apk files – &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;9&lt;/sub&gt; (11%)&lt;/p&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add from Repos View&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Thought when they tapped ‘add’ it would add the app, but it didn’t until they tapped done&lt;/li&gt;
&lt;li&gt;The problem was that people went to the next page or changed the filter and their selections were cleared- &lt;sup&gt;3&lt;/sup&gt;&amp;frasl;&lt;sub&gt;9&lt;/sub&gt; (33%)&lt;/li&gt;
&lt;li&gt;Users noticed that some apps showed up multiple times – &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;9&lt;/sub&gt; (22%)&lt;/li&gt;
&lt;li&gt;Some left the page without hitting done (ie. used the back button in the browser) – &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;9&lt;/sub&gt; (11%)
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;participant-feedback&#34;&gt;Participant Feedback:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Wanted to sign up using a google account – &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;9&lt;/sub&gt; (11%)&lt;/li&gt;
&lt;li&gt;Participants glad to see the apps they wanted are available&lt;/li&gt;
&lt;li&gt;Be specific about what file types can be added&lt;/li&gt;
&lt;li&gt;&lt;em&gt;“Can I add my own files?” (Participant 9)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Create buttons appears to ‘lag’ – &lt;sup&gt;7&lt;/sup&gt;&amp;frasl;&lt;sub&gt;9&lt;/sub&gt; or (77%)&lt;/li&gt;
&lt;li&gt;How do I ensure my repo is private?&lt;/p&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;task-2-add-the-twitter-app&#34;&gt;Task 2: Add the Twitter app.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Average Difficulty&lt;/strong&gt;: 1.55&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Number of Participants with Critical Errors&lt;/strong&gt;: 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No problem&lt;/strong&gt; – &lt;sup&gt;4&lt;/sup&gt;&amp;frasl;&lt;sub&gt;9&lt;/sub&gt; (44%)
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/image1.png&#34; width=&#34;702&#34; height=&#34;356&#34; alt=&#34;&#34; title=&#34;&#34; /&gt; &lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                        &amp;lt;p style=&amp;quot;text-align:center;&amp;quot;&amp;gt;
                          &amp;lt;i&amp;gt;“I don’t know what ‘other repos’ means.” &amp;lt;/i&amp;gt;
                        &amp;lt;/p&amp;gt;

                        &amp;lt;p style=&amp;quot;text-align:center;&amp;quot;&amp;gt;
                          &amp;lt;i&amp;gt;(Participant 9)&amp;lt;/i&amp;gt;
                        &amp;lt;/p&amp;gt;

                        &amp;lt;p style=&amp;quot;text-align:center;&amp;quot;&amp;gt;
                          &amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;
                        &amp;lt;/p&amp;gt;

                        #### Observations:

                        Apps Index View – After (task 2)

                          * Big shiny add button was distracting; thought they would click there to add more apps – 2/9 (22%)
                          * Were confused or didn’t like that the initial action cards merged – 4/9 (44%)

                        #### Participant Feedback:

                          * ‘Add from repos’ button needs to be more visual and bigger
                          * Thought the explore icon looked like an eyeball

                        &amp;lt;p style=&amp;quot;text-align:center;&amp;quot;&amp;gt;
                          &amp;lt;p style=&amp;quot;text-align:center;&amp;quot;&amp;gt;
                            &amp;lt;i&amp;gt;“I wasn’t sure how to get back to the page I was on.” &amp;lt;/i&amp;gt;
                          &amp;lt;/p&amp;gt;

                          &amp;lt;p style=&amp;quot;text-align:center;&amp;quot;&amp;gt;
                            &amp;lt;i&amp;gt;(22% of Participants)&amp;lt;/i&amp;gt;
                          &amp;lt;/p&amp;gt;

                          &amp;lt;p style=&amp;quot;text-align:center;&amp;quot;&amp;gt;
                            &amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;
                          &amp;lt;/p&amp;gt;

                          &amp;lt;p style=&amp;quot;text-align:center;&amp;quot;&amp;gt;
                            &amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;
                          &amp;lt;/p&amp;gt;

                          &amp;lt;p style=&amp;quot;text-align:center;&amp;quot;&amp;gt;
                            &amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;
                          &amp;lt;/p&amp;gt;
                        &amp;lt;/p&amp;gt;

                        Add from Repos View

                          * Need better categories (ex: ‘internet’ category is a little abstract – includes browser’s, privacy twitter and facebook) A social media category would be more relevant __– 2/9 (22%)
                          * It’s not immediately clear that categories filter – 2/9 (22%) 
                              * Participant chose a category filter, then searched. The app didn’t show up, because it was searching within the category.
                          * Search was not easy to find- 1/9 (11%) 

                        #### Participant Feedback:

                          * “Categories aren’t specifically clear.” (Participant 1)
                          * _“I’m used to finding search on the right side.” (Participant 7)_

                        #### Bugs:

                          * Bug filed for adding an app that is already in your repo #108 &amp;lt;/p&amp;gt; 

                        ## 

                        ## PAGE_BREAK: PageBreak

                        ## Task 3: Add the Courier app from the Guardian Project’s repo.

                          * **Average Difficulty**: 1.22
                          * **Number of Participants with Critical Errors**: 1
                          * **No problem** – 8/9 (88%)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/image2.png&#34; width=&#34;714&#34; height=&#34;340&#34; alt=&#34;&#34; title=&#34;&#34; /&gt; &lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                        #### Observations:

                          * Participants familiar enough with interface to easily complete task

                        #### Participant Feedback:

                          * One participant made 7 redundant taps on the ‘done’ button during this task. They assumed the page was stalling or the internet connection was unreliable. When in fact, they already had the app in their repo and didn’t see the error/warning message at the top of the page. Wasn’t able to get out of this view unless they reloaded the page or unchecked the blue check mark. &amp;lt;/p&amp;gt; 

                        ## 

                        ## PAGE_BREAK: PageBreak

                        ## Task 4: Add a description to the Courier app.

                          * **Average Difficulty**: 1.5
                          * **Number of Participants with Critical Errors**: 2
                          * **No problem**– 5/9 (55%)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/image3.png&#34; width=&#34;692&#34; height=&#34;348&#34; alt=&#34;&#34; title=&#34;&#34; /&gt; &lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                        &amp;lt;p style=&amp;quot;text-align:center;&amp;quot;&amp;gt;
                          &amp;lt;i&amp;gt;“It seems really strange to be able to edit someone else’s app. I’m really concerned about the security feature of publishing repos. People putting out virtually similar apps, but changing just slightly. Because I can edit almost everything except for the icon. I can upload my own app file but still use their icon. Suggest ways to have warnings about masquerading.” &amp;lt;/i&amp;gt;
                        &amp;lt;/p&amp;gt;

                        &amp;lt;p style=&amp;quot;text-align:center;&amp;quot;&amp;gt;
                          &amp;lt;i&amp;gt;(Participant 1) &amp;lt;/i&amp;gt;
                        &amp;lt;/p&amp;gt;

                        &amp;lt;p style=&amp;quot;text-align:center;&amp;quot;&amp;gt;
                          &amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;
                        &amp;lt;/p&amp;gt;

                        &amp;lt;p style=&amp;quot;text-align:center;&amp;quot;&amp;gt;
                          &amp;lt;i&amp;gt;“Does it work like a wiki when I make changes, or does it only change it in my repo?” &amp;lt;/i&amp;gt;
                        &amp;lt;/p&amp;gt;

                        &amp;lt;p style=&amp;quot;text-align:center;&amp;quot;&amp;gt;
                          &amp;lt;i&amp;gt;(Participant 5)&amp;lt;/i&amp;gt;
                        &amp;lt;/p&amp;gt;

                        &amp;lt;p style=&amp;quot;text-align:center;&amp;quot;&amp;gt;
                          &amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;
                        &amp;lt;/p&amp;gt;

                        #### Observations:

                          * Added description to the summary field – 3/9 (33%)
                          * Commented that they wouldn’t have known they could edit an app, unless we asked them to do it – 3/9 (33%)
                          * Description view takes too long to load – 2/9 (22%)
                          * No indication in the description text box that this is where you add a description – 2/9 (22%)
                          * Want a ‘save’ button with the description box – 2/9 (22%)
                          * Want a back button on this page (wants it to say ‘back to repo’) – 2/9 (22%)

                        __

                        #### Participant Feedback:

                          * If you tap back in the browser, your changes are not saved.
                          * Attach save buttons to sections that are edited, rather than having 1 ‘done’ button
                          * Talk about editing in the FAQ or overview of the app
                          * Simplify edit view&amp;lt;/p&amp;gt; 

                        ## Task 5: Remove an app from your repo.

                          * **Average Difficulty**: 2.16
                          * **Number of Participants with Critical Errors**: 1
                          * **No problem** – 4/9 (44%)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/image4.png&#34; width=&#34;713&#34; height=&#34;328&#34; alt=&#34;&#34; title=&#34;&#34; /&gt; &lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                        &amp;lt;p style=&amp;quot;text-align:center;&amp;quot;&amp;gt;
                          &amp;lt;i&amp;gt;“Edit makes me think that I would edit something within it, rather than removing it.” &amp;lt;/i&amp;gt;
                        &amp;lt;/p&amp;gt;

                        &amp;lt;p style=&amp;quot;text-align:center;&amp;quot;&amp;gt;
                          (Participant 3)
                        &amp;lt;/p&amp;gt;

                        #### Observations

                          * Expected to be able to remove apps from the main apps index view – 7/9 (77%) 
                              * Most people searched main page, but remembered that they had seen something in the edit view previously.
                              * _I’m not making any changes to the app._ 
                              * _Wasn’t immediately apparent_ 
                              * _Not difficult, just requires a lot of clicks_
                              * I would expect to hover over or long press an app and get the option to remove
                              * I want a ‘remove app’ button on the app page
                          * Likes confirmation to remove the app – 1/9 (11%)&amp;lt;/p&amp;gt; 

                        ## Task 6: Create a second repo. You don’t need to add any apps.

                          * **Average Difficulty**: 1.72
                          * **Number of Participants with Critical Errors**: 0
                          * **No problem**– 6/9 (66%)

                        ####&amp;lt;img src=&amp;quot;https://guardianproject.info/wp-content/uploads/2017/06/image5.png&amp;quot; width=&amp;quot;740&amp;quot; height=&amp;quot;333&amp;quot; alt=&amp;quot;&amp;quot; title=&amp;quot;&amp;quot; /&amp;gt; 

                        #### Observations:

                          * Not completely clear, but figured it out – 3/9 (33%)
                          * Trying to find empty state of My Repo view – 2/9 (22%)
                          * Many had tapped + by mistake already (thought it was to add apps)- 2/9 (22%)
                          * Wanted to tap on the name of the repo or near it – 1/9 (11%)

                        Participant Feedback:

                          * Would help to have the option in the My Repos home view
                          * Hover label for new repo (near +)
                          * “Add button says it all.” (Participant 4)
                          * Would like a visual notification that the first repo was saved

                        ## 

                        ## Task 7: Reopen your first repo.

                          * **Average Difficulty**: 1.44
                          * **Number of Participants with Critical Errors**: 0
                          * **No problem** – 8/9 (88%)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/image6.png&#34; width=&#34;709&#34; height=&#34;324&#34; alt=&#34;&#34; title=&#34;&#34; /&gt; &lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                        &amp;lt;p style=&amp;quot;text-align:center;&amp;quot;&amp;gt;
                          &amp;lt;i&amp;gt;“Home conformed to my expectations.” &amp;lt;/i&amp;gt;
                        &amp;lt;/p&amp;gt;

                        &amp;lt;p style=&amp;quot;text-align:center;&amp;quot;&amp;gt;
                          (Paricipant 5)
                        &amp;lt;/p&amp;gt;

                        #### Observations:

                          * Had figured out how to do it in a previous task – 1/9 (11%)
                          * Tapped back in browser – 1/9 (11%)

                        #### Bug:

                          * Bug with duplicate repos appearing in home screen 1/9 (11%)&amp;lt;/p&amp;gt; 

                        ## 

                        ## Task 8: Share your first repo with your journalists.

                          * **Average Difficulty**: 1.72
                          * **Number of Participants with Critical Errors**: 1
                          * **No problem**– 3/9 (33%)&amp;lt;img src=&amp;quot;https://guardianproject.info/wp-content/uploads/2017/06/image7.png&amp;quot; width=&amp;quot;716&amp;quot; height=&amp;quot;305&amp;quot; alt=&amp;quot;&amp;quot; title=&amp;quot;&amp;quot; /&amp;gt;

                        #### 

                        #### Observations:

                          * Copy and pasted the link in a new tab (without prompting) – 4/9 (44%)
                          * Went to share right away – most everyone
                          * Participants tapped ‘copy link,’ saw a blue check and did nothing else – 2/9 (22%)
                          * Used Facebook – 1/9 (11%) 
                          * Used Twitter – 1/9 (11%)
                          * Opened the public link right away. Was going to add it to F-Droid then share with people from there 1/9 (11%)
                          * Not clear how to publish the repo – 1/9 (11%)

                        #### Participant Feedback:

                          * Wants to make sure the link is secure
                          * Don’t want to make it public (Password protection, unlisted?)
                          * Check doesn’t go away after copying link
                          * _“Sending a QR or link doesn’t do anything.” (Participant 1)_
                          * “What does the blue check mean?” (22% of Participants)
                          * Would be nice to be able to email from this page, maybe linkedin
                          * Like the QR code, because very familiar using these
                          * Steps aren’t extremely clear
                          * Likes that it shows how many apps are in your repo
                          * Step by step — this is how you share it with journalists (3 step process)
                          * Having the QR code and link on the same page is helpful
                          * Would like to see a reminder about F-Droid on the share screen
                          * Need to have a clear understanding about F-Droid and how it works

                        ## 

                        ## Task 9: Open the page you just shared.

                          * **Average Difficulty**: 1
                          * **Number of Participants with Critical Errors**: 0
                          * **No problem**– 9/9 (100%)&amp;lt;img src=&amp;quot;https://guardianproject.info/wp-content/uploads/2017/06/image8.png&amp;quot; width=&amp;quot;704&amp;quot; height=&amp;quot;320&amp;quot; alt=&amp;quot;&amp;quot; title=&amp;quot;&amp;quot; /&amp;gt;

                        #### Observations:

                          * Everyone highlighted link, copied and pasted it in a new tab to view &amp;lt;/p&amp;gt; 

                        ## 

                        ## PAGE_BREAK: PageBreak

                        ## Task 10: Talk through how your journalists would add this repo to their android phone.

                        #### Main Takeaways:&amp;lt;/p&amp;gt; 

                          1. **The majority of participants felt that they needed a core understanding of F-Droid first**

                        __

                        _“Most people wouldn’t have a problem installing F-Droid. The biggest challenge is knowing how F-Droid works.” (Participant 3)_

                        __

                        _“The concept of a repo is very abstract – the hardest part would be understanding what it is.” (Participant 6)_

                        __

                          * First need to understand F-Droid in order to install a repo
                          * Understood that you need F-Droid first, but believe you would need to spend time explaining FDroid to someone before setting up a repo
                          * Relationship between F-Droid and repomaker is unclear
                          * Might be a challenge if F-Droid is not already adopted into their workflow
                          * People need to be comfortable and familiar with F-Droid first in trainings
                          * If they are educated about F-Droid and info comes from a trusted source, they will be likely to use it
                          * How do I get it if I only have one device

                          1. **Step-by-step instructions needed (beginning with F-Droid installation)**

                        __

                        “Most of the journalists I work with are lazy. They would need step by step instructions.” (Participant 8)&amp;lt;/p&amp;gt; 

                          * Step-by- step instructions would help
                          * If I share it on Facebook, they will have it on their phone. 
                          * Provide info up front that you need F-Droid for it to work
                          * QR code scanner in F-Droid would be helpful. Participant didn’t have a QR code scanner or room to download it
                          * The Pakistani testers liked QR code option for sharing
                          * Wants to make sure the link is secure &amp;lt;/p&amp;gt; 

                        # 

                        # PAGE_BREAK: PageBreak

                        # Is it Useful?

                        &amp;lt;p style=&amp;quot;text-align:center;&amp;quot;&amp;gt;
                          8 out of 9 participants agreed Repomaker is a useful tool and would utilize it
                        &amp;lt;/p&amp;gt;

                        ##### YES 

                          * Yes! Participant does multiple trainings in rural areas with students who couldn’t download apps prior to trainings, making talking about the specific apps during the actual trainings too abstract. 
                          * Repomaker is a great idea! Very, very useful! 
                          * See this being a very useful tool for trainings. Easily send a link to trainees prior to the training/conference ask them to install FDroid and download this repo with all the materials needed for our training. 
                          * In a context where people don’t have Google Play, F-Droid makes a lot of sense. 
                          * Yes, because when teaching labs (at university) we must download a few network simulators and apps, but because of the proxies network (restrictions on the internet, sites or apps being blocked) we aren’t able to use wifi in this way, making it difficult or impossible to get the needed materials for lab. Therefore, we could utilize Repomaker in these instances (Nearby tool or bluetooth)
                          * Some people would find it very useful! 
                          * Very useful to host trainings, give people a landing page with a customized repo!
                          * If there is some prior education about FDroid and Repomaker and this education/introduction comes from a trusted source, believes many people would not hesitate to use the tool.
                          * Participant is really struggling with the problem of unreliable internet connectivity, so they are very interested in this app specifically for training purposes and the ability to share repos with people whenever needed.

                        ##### NO OR MAYBE

                          * Not sure, I’m not an Android user. 
                          * How does this make my use case easier? 
                          * Want to know more about F-Droid

                        ##### COUNTRY-SPECIFIC POINTS

                        #### Pakistan

                          * In Pakistan everyone uses Android.
                          * In Pakistan mobile data is expensive and not all areas have good coverage, however, about 70-90% of people have mobile phones with airdrop being a very familiar sharing tool. 
                          * In big cities within Pakistan people are very familiar and comfortable using QR scanners and codes, however, within the smaller, rural areas people are skeptical. 
                          * Access to mobile phones ubiquitous, so mobile platforms really useful.

                        #### Sri Lanka

                          * In Sri Lanka, physical and device checks (army checkpoints) are very common. The guards will check your phone apps and photos, but people would be storing these repos in F-Droid, so apps wouldn’t appear on their home screen. 
                          * F-Droid doesn’t look attractive, so it won’t attract officials attention. 
                          * The galaxy y doesn’t have very much capacity. Storage space is an issue.
                          * If there’s patchy network, people use bluetooth, to save data, because data is money and also to save data.
                          * Most people are using phones that are given by organizations—like World Vision. Some organizations feel that it can be used as a personal device, so they block things so they won’t use data (ex: some block facebook or IMO apps). Sometimes they come with their own apps (like World Nation); blocking other apps. 

                        #### Zimbabwe

                          * Challenge of internet very real in Zimbabwe. Repomaker is very practical and useful. Being able to store apps all in one location. 
                              * Too many people using Google Play at once.

                        #### Participant Feedback:

                          * Could offer a FAQ’s section
                          * On home screen have a few quick questions and answers regarding Repomaker– _What’s a repo? What would I use repomaker for? Learn more here.&amp;lt;/li&amp;gt; 

                              * Additional verification step?
                              * How much will it cost to run the apps? 
                              * How much data will repomaker require?
                              * What about storage? Will repos be able to store on external storage devices?&amp;lt;/ul&amp;gt; &amp;lt;/p&amp;gt; 

                            # 

                            # PAGE_BREAK: PageBreak

                            # Survey Results&amp;lt;/p&amp;gt; 

                            ## Follow-Up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null5.png&#34; width=&#34;624&#34; height=&#34;316&#34; alt=&#34;&#34; title=&#34;&#34; /&gt; &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null6.png&#34; width=&#34;624&#34; height=&#34;357&#34; alt=&#34;&#34; title=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null7.png&#34; width=&#34;624&#34; height=&#34;356&#34; alt=&#34;&#34; title=&#34;&#34; /&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null8.png&#34; width=&#34;624&#34; height=&#34;404&#34; alt=&#34;&#34; title=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null9.png&#34; width=&#34;624&#34; height=&#34;312&#34; alt=&#34;&#34; title=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null10.png&#34; width=&#34;624&#34; height=&#34;410&#34; alt=&#34;&#34; title=&#34;&#34; /&gt; &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null11.png&#34; width=&#34;624&#34; height=&#34;404&#34; alt=&#34;&#34; title=&#34;&#34; /&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null12.png&#34; width=&#34;624&#34; height=&#34;310&#34; alt=&#34;&#34; title=&#34;&#34; /&gt; &lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                            ## 

                            ## PAGE_BREAK: PageBreak

                            ## App Distribution&amp;lt;/p&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null13.png&#34; width=&#34;624&#34; height=&#34;309&#34; alt=&#34;&#34; title=&#34;&#34; /&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null14.png&#34; width=&#34;624&#34; height=&#34;469&#34; alt=&#34;&#34; title=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null15.png&#34; width=&#34;624&#34; height=&#34;300&#34; alt=&#34;&#34; title=&#34;&#34; /&gt; &lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                            #### Notable: How many app?

                            From our responses, a majority of trainers share 2-5 apps during trainings.&amp;lt;/p&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null16.png&#34; width=&#34;624&#34; height=&#34;345&#34; alt=&#34;&#34; title=&#34;&#34; /&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null17.png&#34; width=&#34;624&#34; height=&#34;330&#34; alt=&#34;&#34; title=&#34;&#34; /&gt; &lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                            ####&amp;lt;img src=&amp;quot;https://guardianproject.info/wp-content/uploads/2017/06/null18.png&amp;quot; width=&amp;quot;624&amp;quot; height=&amp;quot;340&amp;quot; alt=&amp;quot;&amp;quot; title=&amp;quot;&amp;quot; /&amp;gt; 

                            #### Notable: Biggest challenge?

                            _**The biggest challenge this set of trainers face is that ‘Participants can’t connect to the internet during a training (75%).&amp;lt;/i&amp;gt;**&amp;lt;/p&amp;gt; 

                            _**Second to that (50%), ‘Participants can’t connect to the internet before the training’ and ‘Sharing an app requires unknown sources to be turned on in the phone settings’.&amp;lt;/i&amp;gt;**&amp;lt;/p&amp;gt; 

                            _**&amp;lt;/i&amp;gt;**&amp;lt;/p&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null19.png&#34; width=&#34;624&#34; height=&#34;313&#34; alt=&#34;&#34; title=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                            ## 

                            ## PAGE_BREAK: PageBreak

                            ## Basic Info&amp;lt;/p&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null20.png&#34; width=&#34;624&#34; height=&#34;304&#34; alt=&#34;&#34; title=&#34;&#34; /&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null21.png&#34; width=&#34;624&#34; height=&#34;294&#34; alt=&#34;&#34; title=&#34;&#34; /&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null22.png&#34; width=&#34;624&#34; height=&#34;313&#34; alt=&#34;&#34; title=&#34;&#34; /&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null23.png&#34; width=&#34;624&#34; height=&#34;352&#34; alt=&#34;&#34; title=&#34;&#34; /&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null24.png&#34; width=&#34;624&#34; height=&#34;317&#34; alt=&#34;&#34; title=&#34;&#34; /&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null25.png&#34; width=&#34;624&#34; height=&#34;325&#34; alt=&#34;&#34; title=&#34;&#34; /&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null26.png&#34; width=&#34;613&#34; height=&#34;329&#34; alt=&#34;&#34; title=&#34;&#34; /&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null27.png&#34; width=&#34;624&#34; height=&#34;422&#34; alt=&#34;&#34; title=&#34;&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                            ## 

                            ## PAGE_BREAK: PageBreak

                            ## Would you do it again?&amp;lt;img src=&amp;quot;https://guardianproject.info/wp-content/uploads/2017/06/null28.png&amp;quot; width=&amp;quot;624&amp;quot; height=&amp;quot;324&amp;quot; alt=&amp;quot;&amp;quot; title=&amp;quot;&amp;quot; /&amp;gt;

                            ###&amp;lt;img src=&amp;quot;https://guardianproject.info/wp-content/uploads/2017/06/null29.png&amp;quot; width=&amp;quot;624&amp;quot; height=&amp;quot;278&amp;quot; alt=&amp;quot;&amp;quot; title=&amp;quot;&amp;quot; /&amp;gt; PAGE_BREAK: PageBreak

                            # Possible FQA’s&amp;lt;/p&amp;gt; 

                            How much data will repomaker require?

                            How much data is required to install F-Droid?

                            How much storage needed?

                            Will repos be able to store on external storage devices?

                            What is F-Droid?

                            What is a repo?

                            What files can I add to my repo?

                            Can apps be downloaded directly from the public repo view?

                            Why do I need F-droid?

                            Can I edit any app?

                            Can others edit my apps?

                            Can others edit my personal repo?

                            How can I customize to a specific training?

                            How public is my repo? Who has access to my repo?

                            How secure is my repo?

                            How do I verify the apps I’m adding to my repo?

                            How do I know apps are coming from the original source?

                            How do I guard against malware?

                            If there are two of the same app, how do I know which one to trust?

                            Can other people masquerade my apps?

                            Is it safe to enable unknown sources?

                            How do I install apps from my repo?

                            Is this a secure tool? Is it safe to use?

                            How much storage will Repomaker and F-Droid need?

                            Can the apps from my repo be downloaded onto an external storage device?&amp;lt;/p&amp;gt; 

                            **How to use F-Droid Repos**

                            – how to add one / how to get a repo on your phone

                            – how to get a repo from the desktop computer to your phone

                            – how to share a repo link

                            – how to share a repo from F-Droid when there’s no internet; how to share one offline / how to share apps with peers when there’s no internet.

                            – how to remove one

                            – how do I update files and apps I add?
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>fdroidserver UX Testing Report</title>
      <link>https://guardianproject.github.io/info/2017/06/01/fdroidserver-ux-testing-report/</link>
      <pubDate>Thu, 01 Jun 2017 04:36:14 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2017/06/01/fdroidserver-ux-testing-report/</guid>
      <description>

&lt;p&gt;We ran user tests of &lt;a href=&#34;https://gitlab.com/fdroid/fdroidserver&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;fdroidserver&lt;/em&gt;&lt;/a&gt;, the tools for developers to create and manage F-Droid repositories of apps and media. This test was set up to gather usability feedback about the tools themselves and the related documentation. These tests were put together and run by Seamus Tuohy/Prudent Innovation.&lt;/p&gt;

&lt;h1 id=&#34;methodology&#34;&gt;Methodology&lt;/h1&gt;

&lt;p&gt;Participants completed a pretest demographic/background information questionnaire. The facilitator then explained that the amount of time taken to complete the test task will be measured and that exploratory behavior within the app should take place after the tasks are completed. &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;The participant was then provided a laptop with a browser window open to the F-Droid documentation. The facilitator let the participant know that if they felt they need anything external that they could ask the facilitator for that. &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;At the start of each task, the participant was provided the task, and shown the resources that were available for them to use on a USB stick provided by the facilitator. The participant was then instructed to read the task description from the printed copy and begin the task. Time-on-task measurement began when the participant started the task. &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;The facilitator instructed the participant to ‘think aloud’ so that they could capture their otherwise internal thoughts about interactions with the F-Droid server software. The facilitator observed and entered participant behavior, participant comments, and system actions into their record of the event. &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;After each task, the participant spoke with the facilitator about the task. After all task scenarios were attempted, the participant completed a post-test satisfaction questionnaire.&lt;/p&gt;&lt;/p&gt;

&lt;h1 id=&#34;task-completion-p&#34;&gt;Task Completion&lt;/p&gt;&lt;/h1&gt;

&lt;p&gt;Each participant was asked to complete six specific tasks. At the start of each task, the participant was read the task, and shown the resources that are available for them to use. The participant was then instructed to read the task description from the printed copy and begin the task. &lt;/p&gt;&lt;/p&gt;

&lt;h2 id=&#34;tasks&#34;&gt;Tasks&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Set Up an F-Droid application repository with the applications on this USB Drive.&lt;/li&gt;
&lt;li&gt;Connect to that repository using the F-Droid client.&lt;/li&gt;
&lt;li&gt;Group the applications under your repositories name in the F-Droid interface.&lt;/li&gt;
&lt;li&gt;Download the barcode scanner application using the F-Droid client.&lt;/li&gt;
&lt;li&gt;Update your F-Droid repository with an update to the barcode scanner app.&lt;/li&gt;
&lt;li&gt;Download the update using the phone.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Tasks are marked as “complete” after the participant says they have completed the task or after the test facilitator has enough evidence that the task has been completed. Tasks are marked as “uncompleted” after the participant says they cannot complete the task and requests assistance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://annoyingtechnicaldetails.files.wordpress.com/2017/06/null2.png&#34; width=&#34;574&#34; height=&#34;353&#34; alt=&#34;&#34; title=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;task-completion-time&#34;&gt;Task Completion Time&lt;/h1&gt;

&lt;p&gt;Test time will begin after the participant says they have understood the task and will begin. Testing time will end after the participant says they have completed the task or after the test facilitator has enough evidence that the task has been completed. In the case of a critical error, test time will stop after the participant says they cannot complete the task and request assistance.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null3.png&#34; width=&#34;577&#34; height=&#34;356&#34; alt=&#34;&#34; title=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;usability-metrics&#34;&gt;Usability Metrics&lt;/h2&gt;

&lt;p&gt;Usability metrics refers to participant performance when completing the assigned tasks. This is includes completion success rates, error rates, time to task completion and subjective evaluations/interviews. &lt;/p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Critical Errors&lt;/strong&gt;: Critical errors are reported as errors that result in failure to complete the task. Participants may or may not be aware that the task goal is incorrect or incomplete. Independent completion of the task is the goal; help from the test facilitator or others is to be marked as a critical error.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Non-critical Errors&lt;/strong&gt;: Non-critical errors are errors that the participant recovers from alone and are not such that the participant can no longer complete the task. They can include errors such as excessive steps taken to complete a task or initially using an incorrect function but recovering from that incorrect step.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exploratory Behavior&lt;/strong&gt;: Errors that are off task from the main task attempting to be completed will be marked as exploratory behavior.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null4.png&#34; width=&#34;600&#34; height=&#34;370&#34; alt=&#34;&#34; title=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It should be noted that many of the errors that were encountered in tasks two, four, and six were the result of configuration decisions and non-critical errors in tasks one and five. More information about why this is the case can be found in the “Task Specific Findings.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null5.png&#34; width=&#34;600&#34; height=&#34;370&#34; alt=&#34;&#34; title=&#34;&#34; /&gt; &lt;/p&gt;&lt;/p&gt;

&lt;h1 id=&#34;task-specific-findings-p&#34;&gt;Task Specific Findings&lt;/p&gt;&lt;/h1&gt;

&lt;h2 id=&#34;task-1-set-up-an-f-droid-application-repository-with-the-applications-on-this-usb-drive&#34;&gt;Task 1: Set Up an F-Droid application repository with the applications on this USB Drive.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Average Time&lt;/strong&gt;: 53 Minutes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Number of Participants with Critical Errors&lt;/strong&gt;: 1&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;docs-needed-for-configuring-the-remote-server&#34;&gt;Docs needed for configuring the remote server&lt;/h3&gt;

&lt;p&gt;The participants were provided a remote server that was pre-configured to host F-Droid applications. The research team did this because setting up a web-server to host an F-Droid repository seemed out of scope, and it would increase the length of the UX session to an unacceptable length.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;During this activity the participants were consistently confused by the documentation related to setting up the F-Droid host server (even though the server was pre-configured for them.) Documentation around file permissions on the remote server were especially troublesome.FOOTNOTE: Footnote&lt;/p&gt;

&lt;h4 id=&#34;feedback&#34;&gt;Feedback:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The participant was confused about where the documentation begins to start deploying the server.&lt;/li&gt;
&lt;li&gt;The participant stated that there is not enough information on how to configure the remote server.&lt;/li&gt;
&lt;li&gt;It is missing in the documentation that before doing “fdroid server update” the permissions of the files to be served can be changed locally since they are transmitted to the remote server with the same local permissions.&lt;/li&gt;
&lt;li&gt;In the documentation, the information about the file permissions and configuration of the server at Fdroid level is missing. The documentation should say what permissions contain the generated files, (or what permissions they should contain).&lt;/li&gt;
&lt;li&gt;It is missing in the documentation that before doing “fdroid server update” the permissions of the files to be served can be changed locally since they are transmitted to the remote server with the same local permissions.&lt;/li&gt;
&lt;li&gt;The participant did not use the command fdroid server update to push the apps to the remote server, instead of that, he used the command SCP to send the data of manually.&lt;/li&gt;
&lt;li&gt;The participant was confused about the location of the files hosted on the web server. Doubt resolved after reviewing the documentation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;confusing-ordering-of-documentation&#34;&gt;Confusing ordering of documentation&lt;/h3&gt;

&lt;p&gt;The participants felt that the documentation was confusingly ordered. While a few noted that the individual pieces of documentation were correct, and even clear once a participant is familiar with themFOOTNOTE: Footnote, the overall organization and ordering of documentation made it made it difficult to use.&lt;/p&gt;

&lt;h4 id=&#34;feedback-1&#34;&gt;Feedback:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;There were many doubts regarding the order of the steps, there was also a sensation of ordered list of steps when in practice the information were related to different activities (eg. Local Demo and Real World setup)&lt;/li&gt;
&lt;li&gt;The documentation is not understandable, not in terms of language but in the way of explaining, it should be more detailed. It feels difficult to understand for entry level people.&lt;/li&gt;
&lt;li&gt;The way information is presented and how it is structured seems to be disconcerting and overloaded.&lt;/li&gt;
&lt;li&gt;In outlines, poorly structured, getting started should have the section “set repo” and “install”, should not make emphasis on FAQs.&lt;/li&gt;
&lt;li&gt;The participant considers that documentation is confusing as to the step by step, he ends up diverting from the task received.&lt;/li&gt;
&lt;li&gt;The participant said that the content of the list in the overview section is not detailed in subsequent sections in the Setup an Fdroid App Repo page.&lt;/li&gt;
&lt;li&gt;It seems more logical for him if in the main page of the documentation are placed first the tutorials and in the end the FAQs.&lt;/li&gt;
&lt;li&gt;The participant had to use the Ctrl + F function several times to find keywords in the index file of the documentation. It seemed unclear and messy to him.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;metadata&#34;&gt;MetaData&lt;/h3&gt;

&lt;p&gt;All but one of the participants left their app and repository metadata empty during this task. There is a possibility that this is because it was not explicitly stated in the tasks requirements, because it is not clearly marked in the instructions, or because the overall difficulty of the other components of this task distracted them from this component of the task.&lt;/p&gt;

&lt;h4 id=&#34;feedback-2&#34;&gt;Feedback:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The participant did not complete the repository or application metadata.&lt;/li&gt;
&lt;li&gt;The metadata of the apps and the server was not configured, however the server was running with the given applications.&lt;/li&gt;
&lt;li&gt;The participant did not place the metadata of applications or repository.&lt;/li&gt;
&lt;li&gt;The participant generated the skeleton metadata and did not update the information.&lt;/li&gt;
&lt;li&gt;The participant modifies the metadata files in the visual environment of the local machine (Nautilus and Gedit) because it was more comfortable.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;docs-to-help-address-errors&#34;&gt;Docs to help address errors&lt;/h3&gt;

&lt;p&gt;When participants did encounter errors there was little assistance to be found in the existing documentation. The current documentation assumes success. Participants who encountered errors desired that the documentation also included guidance about what could have gone wrong when they encounter errors.&lt;/p&gt;

&lt;h4 id=&#34;feedback-3&#34;&gt;Feedback&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The participant felt frustrated because he did not find a place in the documentation where he could consult errors.In many times, he wanted to use Google to help with the debug process but would not find relevant information there either. The participant wanted a section in the documentation showing how to validate the steps of the process and again a section with common problems in the implementation and configuration.&lt;/li&gt;
&lt;li&gt;Documentation should have a guide of error messages which can be received, e.g. those related to the metadata.&lt;/li&gt;
&lt;li&gt;The participant says that it could be useful a section in the documentation for Troubleshooting&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;android-dependencies&#34;&gt;Android Dependencies&lt;/h3&gt;

&lt;p&gt;Multiple participants were unclear about what android related dependencies were required and how to obtain them.&lt;/p&gt;

&lt;h4 id=&#34;feedback-4&#34;&gt;Feedback:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The participant seeks for information on how to download Android Studio&lt;/li&gt;
&lt;li&gt;The participant was confused about the need to install the dependencies related to Android in order to complete the task. After reviewing the documentation, the participant decided not to install these dependencies.&lt;/li&gt;
&lt;li&gt;Documentation should be more evident regarding to dependency management. e.g. If the binary installation includes Android dependencies.&lt;/li&gt;
&lt;li&gt;The participant doubts whether to do the setup to create app builds, and if the installation of the corresponding dependencies is covered with the installation itself of Fdroid server.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;task-2-connect-to-that-repository-using-the-f-droid-client&#34;&gt;Task 2: Connect to that repository using the F-Droid client.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Average Time&lt;/strong&gt;: 13 Minutes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Number of Participants with Critical Errors&lt;/strong&gt;: 2&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;https-defaults-on-repository-address&#34;&gt;HTTPS Defaults on Repository Address&lt;/h3&gt;

&lt;p&gt;Even though the developers thought the client was relatively easy to use some encountered issues related to the assumptions that F-Droid makes around the security of a repository. &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;When adding a new repository to the client application if the participant leaves the protocol blank (e.g. no HTTP or HTTPS) the client defaults to using HTTPS. If the server does not support HTTPS the repository will fail to set up. A repository that does not support HTTPS is clearly undesirable. But, even so, F-Droid’s implicit assumption, without accompanying documentation and/or errors to alert the developer and participant, caused issues for participants.&lt;/p&gt;

&lt;h4 id=&#34;feedback-5&#34;&gt;Feedback:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The error the participant was experiencing was that the client by default adds the HTTPS protocol to URLs that don’t explicitly state HTTP(s), and the server used for the task did not support HTTPS.&lt;/li&gt;
&lt;li&gt;It should have had documentation on how to input the URL of the repository to be properly recognized.&lt;/li&gt;
&lt;li&gt;The participant received errors when setting the repository address incorrectly with HTTPS as was suggested by default on the client application on the android phone. Then the participant noticed the situation and changed the address to HTTP.&lt;/li&gt;
&lt;li&gt;The client is intuitive to use.&lt;/li&gt;
&lt;li&gt;The solution to the issue presented does not seem complex to the participant but is not documented and is liable to make mistakes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;interconnected-documentation-needed&#34;&gt;Interconnected Documentation Needed&lt;/h3&gt;

&lt;p&gt;When switching from building a repository to using the repository the participants had to search for client documentation in other parts of the F-Droid website and online. Multiple participants suggested that client documentation related to the use of the F-Droid server being set up should be more easily accessed from the server setup documentation. &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;It should be noted that the participants were using a development build of the new documentation, and, as such it was not directly linked to the F-Droid website where the client documentation is available.&lt;/p&gt;

&lt;h4 id=&#34;feedback-6&#34;&gt;Feedback:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;In the documentation, there was no information about how setup the client’s app.&lt;/li&gt;
&lt;li&gt;The client documentation should be accessible in the server-setup documentation. For example, including how to install and setup the client.&lt;/li&gt;
&lt;li&gt;The participant claimed the task was completed, however the connection was not successful because he wrongly placed the URL repository in the Android client (root@1xx.1xx.1xx.1xx:/var/www/html /). The participant was then assisted to move on to the next activity.He explains that in the client FAQ does not appear how to fill the URL of new repositories in the client&lt;/li&gt;
&lt;li&gt;Very confused about how to get started.&lt;/li&gt;
&lt;li&gt;Within the app was easy to complete the task, since it is an intuitive application. It becomes necessary to have a step-by-step list of how to set the repositories in the client, especially the URLs.&lt;/li&gt;
&lt;li&gt;A link to home of fdroid.org could be placed in the documentation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;task-3-group-the-applications-under-your-repositories-name-in-the-f-droid-interface&#34;&gt;Task 3: Group the applications under your repositories name in the F-Droid interface.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Average Time&lt;/strong&gt;: 1 Minute&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Number of Participants with Critical Errors&lt;/strong&gt;: 0&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;metadata-1&#34;&gt;MetaData&lt;/h3&gt;

&lt;p&gt;Participants had quick success and no critical errors during this task. But, the participants achieved this by circumventing the aim of the test. Instead of appropriately setting the metadata of their app, and searching for it within the Client, they disabled all other repositories to make it so that only their apps showed in the client. This rapid and common adoption of this specific method of circumventing the need to set, and use, metadata is specifically troubling.&lt;/p&gt;

&lt;h4 id=&#34;feedback-7&#34;&gt;Feedback:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The participant felt confused about what was expected in the task. However, he thought that disabling other repositories on the client list could be enough.&lt;/li&gt;
&lt;li&gt;There should be an option to disable all repositories included in the software.&lt;/li&gt;
&lt;li&gt;At the beginning, it was confusing to understand which switches had to be disabled and which ones to enabled in order to see the applications of the own repository. It was simple a few seconds later but it should be specified in the documentation.&lt;/li&gt;
&lt;li&gt;There should be in the documentation an instructive manual on the use of the client to manage repositories.&lt;/li&gt;
&lt;li&gt;The participant found very easy to disable other repositories in order to see only the applications of the server used&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;task-4-download-the-barcode-scanner-application-using-the-f-droid-client&#34;&gt;Task 4: Download the barcode scanner application using the F-Droid client.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Average Time&lt;/strong&gt;: 15 Minutes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Number of Participants with Critical Errors&lt;/strong&gt;: 2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The issues that the participants faced in this task were actually related to earlier tasks with “critical issues” that were undetectable until this point. Without the file permission issues, described below, downloading apps was seen as a very easy task. This highlights the overall feeling by the developer participants that the client is generally easy and intuitive to use.&lt;/p&gt;&lt;/p&gt;

&lt;h3 id=&#34;server-permissions&#34;&gt;Server Permissions&lt;/h3&gt;

&lt;p&gt;The participants encountered multiple difficult to diagnose issues related to file permissions on the remote server. These issues only appear once a participant is attempting to download an application from a F-Droid repository. As such, permission issues can easily slip past a repo maker who merely updates their repository and checks to ensure that it can be connected to.&lt;/p&gt;

&lt;h4 id=&#34;feedback-8&#34;&gt;Feedback:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The participant received in the Android client the error “Unsuccessful Non-critical error download”, understood at the time as a permissions error on the (min 1) remote server, which he modified directly at the time by accessing through SSH before re-testing the download.&lt;/li&gt;
&lt;li&gt;Extremely comfortable and fast if the operation of permissions on the Subjective remote server is known. The participant works with this permissions evaluation management every day and says that’s why it became so easy, but perhaps for another person without such familiarity on web servers could be more complicated.&lt;/li&gt;
&lt;li&gt;“It’s easy once you know how to configure file permissions.”&lt;/li&gt;
&lt;li&gt;The participant did not locate any documentation about remote server configuration, especially related to file permissions on the web server. The participant suggests that for many people this would be necessary.&lt;/li&gt;
&lt;li&gt;In the documentation, the information about the file permissions and configuration of the server at Fdroid level is missing. The documentation should say what permissions contain the generated files, (or what permissions they should contain).&lt;/li&gt;
&lt;li&gt;The participant understood how to resolve the permissions problem on the remote server and corrected it by placing 775 permissions on the remote server’s files. However other actions meant that the activity could not be completed successfully.&lt;/li&gt;
&lt;li&gt;The client displayed the error “Connection refused”, the participant concluded that it was due to a problem of permissions on the remote server, however decided to address it by modifying the nginx configuration file, resulting in the inability to read and download files from the remote server.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;task-5-update-the-f-droid-repository-with-an-update-to-the-barcode-scanner-app&#34;&gt;Task 5: Update the F-Droid repository with an update to the barcode scanner app.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Average Time&lt;/strong&gt;: 9 Minutes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Number of Participants with Critical Errors&lt;/strong&gt;: 0&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;updating-the-server&#34;&gt;Updating the Server&lt;/h3&gt;

&lt;p&gt;Some participants had continued difficulty working with the server during updates. While some of this was related to difficulty differentiating tasks that should be conducted on the client vs. those that should be conducted on the server when reading the documentation, others were related to the behavior of the software.&lt;/p&gt;

&lt;h4 id=&#34;feedback-9&#34;&gt;Feedback:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The upgrade process is better documented compared to other parts of the documentation, but still could be more detailed.&lt;/li&gt;
&lt;li&gt;The terminal was giving an error on the local machine when running the update command saying “CRITICAL: Failed to get repo pubkey!”, later the participant discovered that the update was pushed anyway to the server saying that the task was completed.&lt;/li&gt;
&lt;li&gt;The participant felt confused about which commands must be executed in the local machine and which commands in the remote evaluation server. The participant says that if he needs to configure an exclusively local instance he would not know how to do it. The participant says that it could be useful a section in the documentation for Troubleshooting&lt;/li&gt;
&lt;li&gt;The participant does not know exactly where to place the update files.&lt;/li&gt;
&lt;li&gt;The participant is not clear whether it is necessary to run the command fdroid update and then fdroid server update, or just by running fdroid server update would both of the commands run automatically.&lt;/li&gt;
&lt;li&gt;The participant cannot read the update from the client and doubts whether to run a command on the remote server as part of the update process, then he solves by doing update of the local repository before pushing the remote server.&lt;/li&gt;
&lt;li&gt;The participant was not clear if Fdroid update, actually updates the remote server, then after running it he was able to access via SSH to the remote server in order to check if the updated application was present, when seeing that it was not updated, the participant understood that he also had to run Fdroid server update&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;documentation-is-intuitive-once-understood&#34;&gt;Documentation is Intuitive Once Understood&lt;/h3&gt;

&lt;p&gt;Once participants got comfortable with the documentation, server setup, and/or updating process they felt that it was relatively easy to use.&lt;/p&gt;

&lt;h4 id=&#34;feedback-10&#34;&gt;Feedback:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Very well designed software to handle the updates, it ends up being very easy to use.&lt;/li&gt;
&lt;li&gt;The task was easy once you understand the file structure in the repository.&lt;/li&gt;
&lt;li&gt;The task was very pleasant to complete at the software level.&lt;/li&gt;
&lt;li&gt;Documentation is clear but yet confusing at first reading.&lt;/li&gt;
&lt;li&gt;The upgrade process is better documented compared to other parts of the documentation, but still could be more detailed.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;task-6-download-the-update-using-the-phone&#34;&gt;Task 6: Download the update using the phone.&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Average Time&lt;/strong&gt;: 7 Minutes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Number of Participants with Critical Errors&lt;/strong&gt;: 1&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;permissions-cont&#34;&gt;Permissions Cont.&lt;/h3&gt;

&lt;p&gt;Permissions issues that went unaddressed in task 5 caused issues during the, otherwise very easy task, of downloading updates to an application.&lt;/p&gt;

&lt;h4 id=&#34;feedback-11&#34;&gt;Feedback:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Once understood the issue of file permissions on the remote server, is easy to address the download of the update.&lt;/li&gt;
&lt;li&gt;It’s easy once you know how to configure file permissions.&lt;/li&gt;
&lt;li&gt;Replaying of the same issue of permissions and the error “Download unsuccessful”, then resolved by knowing how permissions are handled on the remote server.&lt;/li&gt;
&lt;li&gt;It is missing in the documentation that before doing “fdroid server update” the permissions of the files to be served can be changed locally since they are transmitted to the remote server with the same local permissions.&lt;/li&gt;
&lt;li&gt;Very pleasant on the Android client side, but it should be documented the type of permissions that the files on the remote server should contain.&lt;/li&gt;
&lt;li&gt;The update is loaded in the remote repo but it does not show on the&lt;/li&gt;
&lt;li&gt;Fdroid client, then the participant suspects it is because of the file permissions. After 12 minutes the participant says that he does not know how to fix the issue and stopped the task. The participant suspects before notifying the failure in the task completion that the issue could be related to some commands and files created as root that creating conflicts with the tasks triggered by the server update command.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;miscellaneous-feedback-and-requests&#34;&gt;Miscellaneous Feedback and Requests&lt;/h2&gt;

&lt;h3 id=&#34;complexity-of-language-in-the-documentation&#34;&gt;Complexity of Language in the Documentation&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;One participant used Google Translator for a better understanding of some terms within the documentation. This participant was also the only participant who speaks English as their primary language. All other participants speak Spanish as their primary language.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;documentation-requests&#34;&gt;Documentation requests&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;One participant wanted example configuration files in the Gitlab repository of F-Droid-server.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;more-explicit-documentation&#34;&gt;More explicit documentation&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;The documentation must specify that a set of files has been created when fdroid init runs&lt;/li&gt;
&lt;li&gt;It should have specified that commands with Fdroid should be executed in the main directory of the repository (e.g. ~/fdroid) and not in other directories within it (e.g. ~/fdroid /repo).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Announcing new libraries: F-Droid Update Channels</title>
      <link>https://guardianproject.github.io/info/2017/05/31/announcing-new-libraries-f-droid-update-channels/</link>
      <pubDate>Wed, 31 May 2017 11:40:27 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2017/05/31/announcing-new-libraries-f-droid-update-channels/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2017/05/refresh-525698_640.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/05/refresh-525698_640-150x150.png&#34; alt=&#34;&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignleft size-thumbnail wp-image-13626&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2017/05/refresh-525698_640-150x150.png 150w, https://guardianproject.info/wp-content/uploads/2017/05/refresh-525698_640-300x297.png 300w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;&lt;br /&gt;
In many places in the world, it is very common to find Android apps via a multitude of sources: third party app stores, Bluetooth transfers, swapping SD cards, or directly downloaded from websites. As developers, we want to make sure that our users get secure and timely update no matter how they got our apps. We still recommend that people get apps from trusted sources like F-Droid or Google Play.&lt;/p&gt;

&lt;p&gt;Building upon the F-Droid distribution ecosystem, there is a new suite of libraries: “&lt;a href=&#34;https://gitlab.com/fdroid/update-channels/&#34; target=&#34;_blank&#34;&gt;F-Droid Update Channels&lt;/a&gt;“. It is a suite of libraries for making sure your that your app can always find updates, no matter where someone got it from. Currently, there are two specific libraries: “Get F-Droid” and “App Updater”.&lt;/p&gt;

&lt;h4 id=&#34;get-f-droid-aka-org-fdroid-getfdroid&#34;&gt;“Get F-Droid” aka &lt;code&gt;org.fdroid.getfdroid&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Checks whether F-Droid is installed. If not, it will help the user to download and install F-Droid. F-Droid then provides the update channel. This is the preferred method of getting updates since F-Droid provides strong privacy protection and lets the user control when and where updates happen. Also, if F-Droid came pre-installed on the device or was “flashed” onto it as part of a custom Android ROM, then F-Droid does not need “Unknown Sources” enabled.&lt;/p&gt;

&lt;h4 id=&#34;app-updater-aka-org-fdroid-appupdater&#34;&gt;“App Updater” aka &lt;code&gt;org.fdroid.appupdater&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Keeps the app current by checking the hard-coded app repository set up by the developer. This is similar to the popular “App Updater” library, but is secure due to the F-Droid signed metadata. The _&lt;a href=&#34;https://gitlab.com/fdroid/fdroidserver&#34; target=&#34;_blank&#34;&gt;fdroidserver&lt;/a&gt;_ tools handle the creation and maintenance of the app repository.&lt;/p&gt;

&lt;p&gt;Both of these libraries also check whether Google Play is installed, if so, will disable itself. This allows apps to include this library in APKs that are uploaded to Google Play since it will not violate the Google Play Terms of Service.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New research report on the challenges developers face</title>
      <link>https://guardianproject.github.io/info/2017/05/15/new-research-report-on-the-challenges-developers-face/</link>
      <pubDate>Mon, 15 May 2017 05:07:17 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2017/05/15/new-research-report-on-the-challenges-developers-face/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2017/06/tccw.png&#34;&gt;&lt;img class=&#34;aligncenter size-full wp-image-13792&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/tccw.png&#34; alt=&#34;&#34; width=&#34;845&#34; height=&#34;375&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2017/06/tccw.png 845w, https://guardianproject.info/wp-content/uploads/2017/06/tccw-300x133.png 300w, https://guardianproject.info/wp-content/uploads/2017/06/tccw-768x341.png 768w&#34; sizes=&#34;(max-width: 845px) 100vw, 845px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Guardian Project has been working with the &lt;a href=&#34;https://f-droid.org&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;F-Droid&lt;/a&gt; community to make it a secure, streamlined, and verifiable app distribution channel for high-risk environments. While doing this we have started to become more aware of the challenges and risks facing software developers who build software in closed and closing spaces around the world.&lt;/p&gt;

&lt;p&gt;There are a wealth of resources available on how to support and collaborate with high-risk users. Surprisingly, we could not find any guidance on how to support and collaborate with developers where the internet is heavily monitored and/or filtered, let alone developers who might be at risk because of the software they develop.&lt;/p&gt;

&lt;p&gt;This report explores some key challenges that developers in closed and closing spaces face when collaborating with international groups who support Human Rights and freedom (IHRFG). These groups include privacy and security software projects, civil society focused donors, and non-governmental organizations (NGOs).&lt;/p&gt;

&lt;p&gt;IHRFG can benefit greatly from collaborations with local developers. IHRFGs who are trying to design or localize software for a specific region often have difficulty&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;understanding the types of technologies that are needed to address the problems IHRDGs are trying to solve,&lt;/li&gt;
&lt;li&gt;addressing the local economic, social, infrastructural, and/or legal challenges that software of its type often faces in the local context,&lt;/li&gt;
&lt;li&gt;identifying the interaction and design patterns that will drive initial adoption,&lt;/li&gt;
&lt;li&gt;evaluating the quality of the translations of software into the local language,&lt;/li&gt;
&lt;li&gt;finding local individuals for focus groups, and testing, and&lt;/li&gt;
&lt;li&gt;conducting testing and troubleshooting to identify and address issues caused by the speed, availability, and/or censoring of local fixed or mobile networks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Local developers, on the other hand, are often more than able to accomplish these tasks.&lt;/p&gt;

&lt;p&gt;Beyond identifying these challenges this report provides guidance on how to take these challenges into account when IHRFGs collaborate with local developers. To do this the report also contains a set of developer user-personas. These personas can be used by IHRFGs as an aid when they are designing collaborating with local developers.&lt;/p&gt;

&lt;p&gt;We hope that the results of this research will help international privacy and security focused software projects and NGOs better understand and respond to the unique needs of different international developer communities so that their collaborations with these developers will be safer, more strategic, and sustainable.&lt;/p&gt;

&lt;h2 id=&#34;research-methodology&#34;&gt;Research Methodology&lt;/h2&gt;

&lt;p&gt;This report is the result of two interconnected streams of research. The initial themes were identified in a series of in-depth interviews. These themes were further explored in an online “developer challenges survey.” The challenges and user personas found in this report were refined from the combined results of these research efforts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interviews&lt;/strong&gt;: interviews with 14 developers, technologists, and digital defenders from 11 different countries where the internet is heavily monitored and filtered as well as 5 interviews with IHRFGs who work in similar regions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Surveys&lt;/strong&gt;: an &lt;a href=&#34;https://challenges.tech/&#34;&gt;online developer survey&lt;/a&gt; in Chinese, Spanish, Farsi, Russian, French, and English that received 118 responses from developers in 28 countries around the world.&lt;/p&gt;

&lt;h2 id=&#34;user-personas&#34;&gt;User Personas&lt;/h2&gt;

&lt;p&gt;The user personas created for this report were developed to allow readers to think more concretely about the motivations and challenges that were identified during this project. In an effort to combat the inclusion of possible implicit biases the author might hold based upon the nationality, race, or gender of the personas the nationality, names, genders, and photos used for all the personas were generated at random.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/seamustuohy/user_profile_randomizer&#34;&gt;source code of the &lt;strong&gt;User Profile Randomizer&lt;/strong&gt;&lt;/a&gt; is available and permissively licensed under the &lt;a href=&#34;https://github.com/seamustuohy/user_profile_randomizer/blob/master/LICENSE&#34;&gt;GNU Lesser General Public License v3.0&lt;/a&gt;. It randomizes the gender pronoun, name (chosen from a random language family), and photo on a set of markdown based user personas.&lt;/p&gt;

&lt;h3 id=&#34;the-full-report&#34;&gt;The Full Report&lt;/h3&gt;

&lt;p&gt;Download the full report, including developer profiles, here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2017/06/Technological-Collaboration-in-a-Closing-World-1.pdf&#34;&gt;Technological Collaboration in a Closing World.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>F-Droid User Testing, Round 2</title>
      <link>https://guardianproject.github.io/info/2017/05/01/f-droid-user-testing-round-2/</link>
      <pubDate>Mon, 01 May 2017 04:51:24 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2017/05/01/f-droid-user-testing-round-2/</guid>
      <description>

&lt;p&gt;#&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null14.png&#34; width=&#34;624&#34; height=&#34;164&#34; alt=&#34;&#34; title=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;by Hailey Still and Carrie Winfrey&lt;/p&gt;&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;****&lt;/h1&gt;

&lt;p&gt;Here we outline the User Testing process and plan for the &lt;a href=&#34;https://f-droid.org&#34; target=&#34;_blank&#34;&gt;F-Droid&lt;/a&gt; app store for Android. The key aims of F-Droid are to provide users with a) a comprehensive catalogue of open-source apps, as well as b) provide users with the the ability to transfer any app from their phone to someone in close physical proximity. With this User Test, we are hoping to gain insights into where the product design is successful and what aspects need to be further improved. Main goals are obtaining a baseline user performance and identifying potential design concerns regarding ease of use. An additional goal is to promote F-Droid as an alternative to the Google Play app store.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;The usability test objectives are to determine usability problem areas within the user interface and content areas. Key focus points include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;App navigation: failure to locate functions, excessive clicks to complete a task or failure to complete task&lt;/li&gt;
&lt;li&gt;Presentation errors: selection errors due to labeling ambiguities&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The usability test also aims to gain a deeper understanding of our users, what needs they are hoping to meet by using F-Droid, and a basic user-satisfaction level. Our participants for this round of testing will represent a range of ages, backgrounds and technological literacy levels. All tests will be performed with guidance and support of a test facilitator.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;methodology&#34;&gt;Methodology&lt;/h2&gt;

&lt;p&gt;Users will be tested with the assistance of screen and audio recordings, which are to be analyzed post-test. A pre-test questionnaire will record basic demographic data and a post-test survey will gather insight on overall usability experience. The test will include a standard task completion portion as well as a desirability card sorting (to capture qualitative data on user experience).&lt;/p&gt;

&lt;p&gt;Participants will be asked to fill out a demographic and background information survey. The facilitator will explain that the amount of time taken to complete the task will be measured and that they should remain focused on the task. The participant will read the task description, ask any questions they may have and begin the task. Measurement begins when the participant begins the task.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;Participants will be encouraged to think aloud. The facilitator will minimally assist the participants during task completion. The facilitator will observe and enter user behavior, comments, and actions.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;After all task scenarios are attempted, the participant will complete the post-test desirability card activity and survey. This activity will comprise of asking participants to choose 5 cards they feel reflect their overall experience and elaborate on their choices. &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Usability Tasks:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The tasks were randomly administered, with the exception of the “Last Task” which was always administered last.&lt;/p&gt;

&lt;p&gt;TASK A. Search for an app that you would like to download. Install the app you have selected.&lt;/p&gt;

&lt;p&gt;TASK B. There is an app that needs to be updated. Find the app and install the update.&lt;/p&gt;

&lt;p&gt;TASK C. Find a game app that looks interesting to you. Install the app.&lt;/p&gt;

&lt;p&gt;TASK D. Search for a crossword puzzle app within the games category.&lt;/p&gt;

&lt;p&gt;TASK E. If you had no internet, how would you download an app?&lt;/p&gt;

&lt;p&gt;TASK F. Your friend emails you a link to a collection of their favorite apps. Open gmail and click on the link they have sent you. Add the collection of apps that your friend emailed to you to F-Droid. Locate an app called Habitica from the collection you just downloaded.&lt;/p&gt;

&lt;p&gt;LAST TASK. Add the collection of apps displayed on the computer to F-Droid.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Desirability Cards:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null15.png&#34; width=&#34;624&#34; height=&#34;213&#34; alt=&#34;&#34; title=&#34;&#34; /&gt; &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;Metrics&lt;/p&gt;

&lt;p&gt;Tests hosted in two locations, Vienna, Austria and Lubbock, Texas. These charts represent the combined metrics for all tests at both locations.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Level of Difficulty:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The participants were asked to rate the level of difficulty per task as they completed them.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null16.png&#34; width=&#34;624&#34; height=&#34;457&#34; alt=&#34;&#34; title=&#34;&#34; /&gt; &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Average Critical Error Rate:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Critical errors are reported as errors that result in failure to complete the task. Participants may or may not be aware that the task goal is incorrect or incomplete. Independent completion of the task is the goal. Help from the test facilitator or others is to be marked as a critical error. &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null17.png&#34; width=&#34;624&#34; height=&#34;420&#34; alt=&#34;&#34; title=&#34;&#34; /&gt; &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Average Non-critical Error Rate:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Non-critical errors are errors that the participant recovers from alone and are not such that the participant can no longer complete the task. They can include errors such as excessive steps taken to complete a task or initially using an incorrect function but recovering from that incorrect step. &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;Non-critical errors do not include exploratory behavior. Exploratory behavior includes errors that are&lt;/p&gt;

&lt;p&gt;off task from the main task attempting to be completed.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null18.png&#34; width=&#34;624&#34; height=&#34;440&#34; alt=&#34;&#34; title=&#34;&#34; /&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt; &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Desirability Toolkit Responses&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Vienna:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null19.png&#34; width=&#34;624&#34; height=&#34;194&#34; alt=&#34;&#34; title=&#34;&#34; /&gt; &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;Lubbock:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/null20.png&#34; width=&#34;624&#34; height=&#34;160&#34; alt=&#34;&#34; title=&#34;&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;detailed-testing-reports&#34;&gt;Detailed Testing Reports&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1Y7AV3N8cmqm7yMPFuK6_qbyO86IXYoAJuTuhwCHmnK4/?ts=5905d383#heading=h.sz9pxldla478&#34; target=&#34;_blank&#34;&gt;Detailed Report from Vienna&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/document/d/1Wavy1Kce7WAmrM277e6QV6ziTvM05uMCsvGSdzi-Uzg&#34; target=&#34;_blank&#34;&gt;Detailed Report from Lubbock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/forms/d/1wbAoganpj9KpE00qQj0uOAPETkV9xodV4ubA2UZxbn8/#responses&#34; target=&#34;_blank&#34;&gt;Demographic Survey Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/forms/d/1jflue3U1mV-ht55gfkdHPYvOjVernCmdbUdXn26DikU#responses&#34; target=&#34;_blank&#34;&gt;Follow-up Survey Results&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>F-Droid: A new UX 6 years in the making</title>
      <link>https://guardianproject.github.io/info/2017/04/17/f-droid-a-new-ux-6-years-in-the-making/</link>
      <pubDate>Mon, 17 Apr 2017 10:19:19 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2017/04/17/f-droid-a-new-ux-6-years-in-the-making/</guid>
      <description>&lt;p&gt;_(post by &lt;a href=&#34;http://peter.serwylo.com/&#34; target=&#34;_blank&#34;&gt;Peter Serwylo&lt;/a&gt;)_&lt;/p&gt;

&lt;p&gt;F-Droid has been a part of the Android ecosystem for over 6 years now.&lt;br /&gt;
Since then, over 2000 apps have been built for the main repository,&lt;br /&gt;
many &lt;a href=&#34;https://gitlab.com/fdroid/fdroidclient/blob/master/CHANGELOG.md&#34; target=&#34;_blank&#34;&gt;great features have been added&lt;/a&gt;, the client has been translated into over 40 different languages, and much more.&lt;/p&gt;

&lt;p&gt;However, the F-Droid UX has never changed much from &lt;a href=&#34;https://f-droid.org/posts/f-droid-repository-alpha&#34; target=&#34;_blank&#34;&gt;the original three tab layout&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2017/04/0.11.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/04/0.11.png&#34; alt=&#34;&#34; width=&#34;320&#34; height=&#34;427&#34; class=&#34;size-full wp-image-13585&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2017/04/0.11.png 320w, https://guardianproject.info/wp-content/uploads/2017/04/0.11-225x300.png 225w&#34; sizes=&#34;(max-width: 320px) 100vw, 320px&#34; /&gt;&lt;/a&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2017/04/0.102.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/04/0.102.png&#34; alt=&#34;&#34; width=&#34;323&#34; height=&#34;427&#34; class=&#34;size-full wp-image-13584&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2017/04/0.102.png 323w, https://guardianproject.info/wp-content/uploads/2017/04/0.102-227x300.png 227w&#34; sizes=&#34;(max-width: 323px) 100vw, 323px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This will change with the coming release of F-Droid client v0.103.&lt;/p&gt;

&lt;p&gt;Over the past 6 months, the F-Droid team has been busy redesigning a modern UX which will help bring F-Droid into the present.&lt;br /&gt;
Some of the big ticket items include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Screenshots and feature graphics&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Bulk download and install&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Offline “queue for download”&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Ability to translate apps metadata&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Improved notifications for downloads and pending updates&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2017/04/appdetails-b.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/04/appdetails-b.png&#34; alt=&#34;&#34; width=&#34;318&#34; height=&#34;570&#34; class=&#34;size-full wp-image-13593&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2017/04/appdetails-b.png 318w, https://guardianproject.info/wp-content/uploads/2017/04/appdetails-b-167x300.png 167w&#34; sizes=&#34;(max-width: 318px) 100vw, 318px&#34; /&gt;&lt;/a&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2017/04/appdetails-a.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/04/appdetails-a.png&#34; alt=&#34;&#34; width=&#34;318&#34; height=&#34;570&#34; class=&#34;size-full wp-image-13594&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2017/04/appdetails-a.png 318w, https://guardianproject.info/wp-content/uploads/2017/04/appdetails-a-167x300.png 167w&#34; sizes=&#34;(max-width: 318px) 100vw, 318px&#34; /&gt;&lt;/a&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2017/04/updates.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/04/updates.png&#34; alt=&#34;&#34; width=&#34;318&#34; height=&#34;570&#34; class=&#34;size-full wp-image-13595&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2017/04/updates.png 318w, https://guardianproject.info/wp-content/uploads/2017/04/updates-167x300.png 167w&#34; sizes=&#34;(max-width: 318px) 100vw, 318px&#34; /&gt;&lt;/a&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2017/04/nearby.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/04/nearby.png&#34; alt=&#34;&#34; width=&#34;318&#34; height=&#34;570&#34; class=&#34;size-full wp-image-13596&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2017/04/nearby.png 318w, https://guardianproject.info/wp-content/uploads/2017/04/nearby-167x300.png 167w&#34; sizes=&#34;(max-width: 318px) 100vw, 318px&#34; /&gt;&lt;/a&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2017/04/categories.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/04/categories.png&#34; alt=&#34;&#34; width=&#34;318&#34; height=&#34;570&#34; class=&#34;size-full wp-image-13597&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2017/04/categories.png 318w, https://guardianproject.info/wp-content/uploads/2017/04/categories-167x300.png 167w&#34; sizes=&#34;(max-width: 318px) 100vw, 318px&#34; /&gt;&lt;/a&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2017/04/latest.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/04/latest.png&#34; alt=&#34;&#34; width=&#34;318&#34; height=&#34;570&#34; class=&#34;size-full wp-image-13598&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2017/04/latest.png 318w, https://guardianproject.info/wp-content/uploads/2017/04/latest-167x300.png 167w&#34; sizes=&#34;(max-width: 318px) 100vw, 318px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In addition, we have been redesigning some of the smaller, but equally as important parts of the app, such as better support for visually impaired users who make use of tools such as Talkback, and better support for donating to open source app developers.&lt;/p&gt;

&lt;p&gt;This has involved extensive design input from UX designers and the community.&lt;br /&gt;
In addition to the user tests that were conducted early on in the design process, further field tests are currently being conducted to ensure that usability issues with the new design are identified and resolved.&lt;/p&gt;

&lt;p&gt;Over the coming weeks you will see alpha releases for v0.103. We encourage your feedback and suggestions about how to continually improve the F-Droid client. This is one of the many improvements happening to the broader F-Droid ecosystem in 2017, so keep an eye out for more!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>F-Droid Lubbock Report – What We Want to Know</title>
      <link>https://guardianproject.github.io/info/2017/04/17/f-droid-lubbock-report-what-we-want-to-know/</link>
      <pubDate>Mon, 17 Apr 2017 08:07:47 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2017/04/17/f-droid-lubbock-report-what-we-want-to-know/</guid>
      <description>

&lt;hr /&gt;

&lt;h1 id=&#34;f-droid-lbk-usability-study-report-what-we-want-to-know-p&#34;&gt;F-Droid LBK Usability Study Report – What We Want to Know&lt;/p&gt;&lt;/h1&gt;

&lt;p&gt;Prepared by Carrie Winfrey&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Preliminary Version – April 17, 2017&lt;/em&gt;&lt;/p&gt;&lt;/p&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;When planning this user test, the team outlined features and flows within the app on which we wanted feedback. From there, we created tasks for participants to complete that would access these areas, and produce insights related to our inquires.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;This document is organized by the tasks participants completed. Initial inquiry questions are outlined under each task, followed by the feedback and observations gained from the test. Last, within each section, I’ve listed suggestions for improvement related to the task.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;In the Lubbock sessions, 11 people participated in this focused usability study. More information on participant demographics, test methodology, metrics, and follow-up activities and insights will be provided soon.&lt;/p&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;PAGE_BREAK: PageBreak&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;task-a-search-for-an-app-that-you-would-like-to-download-install-the-app-you-have-selected&#34;&gt;TASK A – Search for an app that you would like to download. Install the app you have selected.&lt;/h1&gt;

&lt;p&gt;Average difficulty: 1.9&lt;/p&gt;

&lt;p&gt;Number of participants with critical errors: 0&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;PARTICIPANT QUOTES&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“App won’t install. Found the game easily, though.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;__&lt;/p&gt;

&lt;p&gt;__&lt;/p&gt;

&lt;p&gt;&lt;u&gt;What we want feedback on&lt;/u&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Are users able to locate the search button?

&lt;ul&gt;
&lt;li&gt;Yes. Most users found the search button right away.&lt;/li&gt;
&lt;li&gt;Some (3 out of 10) browsed through the latest or category view to find an app instead of using search.&lt;/li&gt;
&lt;li&gt;One participant said he never saw the search button.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Are they able to effectively use search?

&lt;ul&gt;
&lt;li&gt;Yes.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Are they able to find what they’re looking for?

&lt;ul&gt;
&lt;li&gt;Not always. Searching for mainstream apps like Gmail, ESPN, Facebook and Twitter returns no relevant results.&lt;/li&gt;
&lt;li&gt;“It took about 10 tries to find an app I searched for. It might be difficult for users to find the app they have an interest in.”&lt;/li&gt;
&lt;li&gt;One participant searched for recipes, but misspelled it, so no relevant results were displayed.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Other insights:&lt;/li&gt;
&lt;li&gt;Many users expressed that it was difficult to know if and app had installed.

&lt;ul&gt;
&lt;li&gt;“I found it difficult to figure out if the apps had installed. No notification?”&lt;/li&gt;
&lt;li&gt;Some participants searched on the home screen of the phone, then in the apps on their phone to see if the app had installed.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;4 participants were unable to install apps all together due to a bug in the app version being tested.&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;u&gt;Suggestions for improvement:&lt;/u&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Location of search&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Though most people didn’t have trouble locating search, a majority are most familiar with finding it at the top of the screen.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Search results&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Display more relevant search results. Ex: If someone searches for Gmail and we don’t have it, offer alternative email apps.&lt;/li&gt;
&lt;li&gt;Use suggestive results to help users avoid spelling errors and to make the action of searching quicker.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Feedback once installed&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Provide better feedback once an app is installed for views within the app (installed from list view, app details and updates views).&lt;/li&gt;
&lt;li&gt;Show a system notification when an app is installed.&lt;/li&gt;
&lt;li&gt;Give the option to add installed apps to the home screen of the phone.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fix bugs&lt;/strong&gt; Fix bugs with installing apps.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;PAGE_BREAK: PageBreak&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;task-b-there-is-an-app-that-needs-to-be-updated-find-the-app-and-install-the-update&#34;&gt;TASK B – There is an app that needs to be updated. Find the app and install the update.&lt;/h1&gt;

&lt;p&gt;Average difficulty: 2.3&lt;/p&gt;

&lt;p&gt;Number of participants with critical errors: 0&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;PARTICIPANT QUOTES&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“The update icon at the bottom with red number notifications was easy to find.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“It took me multiple attempts to update the applications.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;__&lt;/p&gt;

&lt;p&gt;__&lt;/p&gt;

&lt;p&gt;&lt;u&gt;What we want feedback on&lt;/u&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Is it clear where to go to find updates?

&lt;ul&gt;
&lt;li&gt;Yes. Every participant easily located the updates tab.&lt;/li&gt;
&lt;li&gt;“It was very easy to spot apps that need updating.”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Can users successfully update an app?

&lt;ul&gt;
&lt;li&gt;No.&lt;/li&gt;
&lt;li&gt;The difference in word choice on app details than in updates view confused multiple users.

&lt;ul&gt;
&lt;li&gt;“The update icon at the bottom with red number notifications was easy to find. Once I clicked on the specific app to update it gave the option to uninstall or upgrade. I wasn’t sure if upgrade was the same as update or not – it sounded like something I’d have to pay for.”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Every participant that tried to update an app from the updates view had problems.

&lt;ul&gt;
&lt;li&gt;“Took me multiple attempts to update the applications. Not positive the update occurred. There was no indication of completion.”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;It was unclear if an app had successfully updated. Participants were not confident that they had updated the app.&lt;/li&gt;
&lt;li&gt;We need to provide better feedback once an update is complete and successful.&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;u&gt;Suggestions for improvement:&lt;/u&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Word Choice&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Change ‘upgrade’ to updates in app details.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Feedback&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Provide better feedback once an update is complete and successful within the updates view.&lt;/li&gt;
&lt;li&gt;Give a system notification when an update is successful.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fix bugs&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;I’ve shared a screen record that reveals the problems.&lt;/li&gt;
&lt;li&gt;For some users, the red badge indicator didn’t change after they updated the app. This behavior needs to be tested internally.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PAGE_BREAK: PageBreak&lt;/p&gt;

&lt;h1 id=&#34;task-c-find-a-game-app-that-looks-interesting-to-you-install-the-app&#34;&gt;TASK C – Find a game app that looks interesting to you. Install the app.&lt;/h1&gt;

&lt;p&gt;Average difficulty: 1.7&lt;/p&gt;

&lt;p&gt;Number of participants with critical errors: 0&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;u&gt;What we want feedback on&lt;/u&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;How do users browse when looking for a specific kind of app, like a game? Do they search, look in categories, browse, etc.

&lt;ul&gt;
&lt;li&gt;Most participants looked through the games category. Some browsed latest. Some used search.&lt;/li&gt;
&lt;li&gt;Many people found the categories view appealing, and spent more time there than on the latest view, when looking for apps. One participant compared it to the iTunes Store, but commented that it was even easier.&lt;/ul&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;task-d-search-for-a-crossword-puzzle-app-within-the-games-category&#34;&gt;TASK D – Search for a crossword puzzle app within the games category.&lt;/h1&gt;

&lt;p&gt;Average difficulty: 1.1&lt;/p&gt;

&lt;p&gt;Number of participants with critical errors: 0&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;u&gt;What we want feedback on&lt;/u&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Are users able to effectively search within categories?

&lt;ul&gt;
&lt;li&gt;We saw a variety of behaviors with this task. But, overall, people were able to do this without problems.

&lt;ul&gt;
&lt;li&gt;4 participants searched in within categories&lt;/li&gt;
&lt;li&gt;2 participants searched from search&lt;/li&gt;
&lt;li&gt;2 participants browsed in horizontal view of the category&lt;/li&gt;
&lt;li&gt;2 participants opened category and scrolled down to find &lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;u&gt;Suggestions for improvement:&lt;/u&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Easier use of chip&lt;/strong&gt; Once you clear a chip, there’s no easy way to get it back if you want to search within that category.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;PAGE_BREAK: PageBreak&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;task-e-if-you-had-no-internet-how-would-you-download-an-app&#34;&gt;TASK E – If you had no internet, how would you download an app?&lt;/h1&gt;

&lt;p&gt;Average difficulty: 3.1&lt;/p&gt;

&lt;p&gt;Number of participants with critical errors: 7 of 10 that attempted the task were unable to identify the nearby feature as the place to download apps without internet.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;PARTICIPANT QUOTES&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Nearby didn’t give me the idea of downloading while offline.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;__&lt;/p&gt;

&lt;p&gt;__&lt;/p&gt;

&lt;p&gt;&lt;u&gt;What we want feedback on&lt;/u&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Are users able to discover how to download apps offline?

&lt;ul&gt;
&lt;li&gt;A few. But not the majority.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Is it clear that you use they nearby feature to do this?

&lt;ul&gt;
&lt;li&gt;No.&lt;/li&gt;
&lt;li&gt;70% of participants never identified the nearby feature as the means for doing this.&lt;/li&gt;
&lt;li&gt;“Nearby didn’t give me the idea of downloading while offline.”&lt;/li&gt;
&lt;li&gt;30% successfully identified nearby. Though, most after looking several other places?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;What other behaviors are observed?

&lt;ul&gt;
&lt;li&gt;Turning WiFi off to see if the interface changed&lt;/li&gt;
&lt;li&gt;Going into airplane mode&lt;/li&gt;
&lt;li&gt;Downloading an airplane mode app&lt;/li&gt;
&lt;li&gt;Opening settings and looking in WiFi options&lt;/li&gt;
&lt;li&gt;Searching google.&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;u&gt;Additional Observations&lt;/u&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;People did not make the connection between ‘nearby’ and downloading apps offline.&lt;/li&gt;
&lt;li&gt;Not one participant read the text on the Nearby view when they initially tapped on it.&lt;/li&gt;
&lt;li&gt;Multiple people compared nearby to Air Drop on iOS&lt;/li&gt;
&lt;li&gt;“It’s going to airdrop a virus to your phone.”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;u&gt;Suggestions for improvement:&lt;/u&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Word choice&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Reconsider the word choice.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Offline mode&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The experience of the app should be obviously different when there’s no internet connection.&lt;/li&gt;
&lt;li&gt;Guide users toward the nearby feature if there’s no connection.&lt;/li&gt;
&lt;li&gt;Consider providing info in settings&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;More engaging visuals&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;If we want people to pay attention to the Nearby view, it needs to be more engaging.&lt;/li&gt;
&lt;li&gt;If we keep the language about offline, consider using iconography that communicates that.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;PAGE_BREAK: PageBreak&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;task-f-your-friend-emails-you-a-link-to-a-collection-of-their-favorite-apps-open-gmail-and-click-on-the-link-they-have-sent-you-add-the-collection-of-apps-that-your-friend-emailed-to-you-to-f-droid-locate-an-app-called-habitica-from-the-collection-you-just-downloaded&#34;&gt;TASK F – Your friend emails you a link to a collection of their favorite apps. Open gmail and click on the link they have sent you. Add the collection of apps that your friend emailed to you to F-Droid. Locate an app called Habitica from the collection you just downloaded.&lt;/h1&gt;

&lt;p&gt;Average difficulty: 2.2&lt;/p&gt;

&lt;p&gt;Number of participants with critical errors: Every participant was able to add add the repo. 4 of 11 participants were unable to locate the Habitica app that was added from the repo.&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;PARTICIPANT QUOTES&lt;/p&gt;

&lt;p&gt;“I was able to find the link the email and accept the apps, but have no idea where to find the collection from my friend in F-Droid.”&lt;/p&gt;

&lt;p&gt;__&lt;/p&gt;

&lt;p&gt;__&lt;/p&gt;

&lt;p&gt;&lt;u&gt;What we want feedback on&lt;/u&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Are users able to add a repo from a link opened on mobile?

&lt;ul&gt;
&lt;li&gt;Yes. No one had problems with this.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Is the webpage for adding a repo clear?

&lt;ul&gt;
&lt;li&gt;Yes.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Are users able to find the apps from a repo they have added?

&lt;ul&gt;
&lt;li&gt;No. Participants were very confused.&lt;/li&gt;
&lt;li&gt;100% participants didn’t know if they had added the repo successfully after completing the steps.&lt;/li&gt;
&lt;li&gt;“I was able to find the link in the email and accept the apps, but I have no idea where to find the collection from my friend in F-Droid.”&lt;/li&gt;
&lt;li&gt;Some were able to find one app by searching for it.&lt;/li&gt;
&lt;li&gt;Average non-critical errors for finding the app—2

&lt;ul&gt;
&lt;li&gt;5 users were able to locate the app; most after multiple attempts&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Average critical errors for finding the app—3.73

&lt;ul&gt;
&lt;li&gt;3 users were unable to locate the app added from the repo&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Other places people looked

&lt;ul&gt;
&lt;li&gt;In categories thinking the latest apps added would be shown first&lt;/li&gt;
&lt;li&gt;In the latest view&lt;/li&gt;
&lt;li&gt;In settings &amp;gt; Manage installed apps&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Do users understand that the apps added from a repo are only made available to them, and not auto-downloaded and installed?

&lt;ul&gt;
&lt;li&gt;Not really. It was hard to know for sure since the users never saw a list of those apps on the phone once they added the repo.&lt;/li&gt;
&lt;li&gt;It seemed that some participants were surprised to see that they still had to download the app Habitica after finding it via search.&lt;/li&gt;
&lt;li&gt;Many participants assumed the apps from a repo would download.&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;u&gt;Suggestions for improvement:&lt;/u&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Feedback&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Currently, there’s no indication of completion.&lt;/li&gt;
&lt;li&gt;The experience of adding an app cannot end after they tap add. People are way too confused. Also, currently after tapping add, the app returns to the screen they were previously on within the app, which could be anything.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make apps accessible&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;The user needs to immediately be able to see the apps they just added to their phone. Note: it should be clear that these are made available, but not downloaded automatically.&lt;/li&gt;
&lt;li&gt;The user needs to be able to access the apps within a repo later on.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Handle delay&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Is there a delay in the repo updating? We noticed that some people tried to search for an app that was within a repo they added, but even then, it didn’t show up.&lt;/li&gt;
&lt;li&gt;Update only the repo that was added instead of all. Not sure what the current behavior is.&lt;/p&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;PAGE_BREAK: PageBreak&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;task-g-last-task-add-the-collection-of-apps-displayed-on-the-computer-to-f-droid&#34;&gt;TASK G (Last Task) – Add the collection of apps displayed on the computer to F-Droid.&lt;/h1&gt;

&lt;p&gt;Average difficulty: 2.6&lt;/p&gt;

&lt;p&gt;Number of participants with critical errors: 0&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;PARTICIPANT QUOTES&lt;/p&gt;

&lt;p&gt;“I followed the steps on the computer but wasn’t sure where the code from the QR scanner went. I added a new repository and there was a link already in it so I just clicked add, but have no idea what it did.”&lt;/p&gt;

&lt;p&gt;__&lt;/p&gt;

&lt;p&gt;__&lt;/p&gt;

&lt;p&gt;&lt;u&gt;What we want feedback on&lt;/u&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Are users able to add a repo from a collection they view on desktop?

&lt;ul&gt;
&lt;li&gt;Yes. Surprisingly, the majority of participants did not have trouble scanned the QR code and adding the repo.&lt;/li&gt;
&lt;li&gt;Same confusions as mentioned above about knowing if it worked and locating the repo.&lt;/li&gt;
&lt;li&gt;“I don’t know if it worked. How do I know if it worked?”&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Is the word choice clear?

&lt;ul&gt;
&lt;li&gt;Somewhat. It didn’t trip people up from completing the task.&lt;/li&gt;
&lt;li&gt;Multiple people commented that the word repository didn’t resonate with them. They preferred the word Collections.&lt;/ul&gt; &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;u&gt;Suggestions for improvement:&lt;/u&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fix bugs&lt;/strong&gt; F-Droid crashed a lot after people scanned the code, opened F-Droid and tapped add. I think this was due to the phone being in landscape then portrait mode.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrate QR code scanner&lt;/strong&gt; within the add repo view.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Word choice&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;PAGE_BREAK: PageBreak&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;additional-observations&#34;&gt;Additional Observations&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Concerns of Malware&lt;/strong&gt; While most participants were not keen on security and the potential risk of downloading apps from a source other than Google Play, one participant was keenly aware. He made multiple comments about how the app is an open door for malware.

&lt;ul&gt;
&lt;li&gt;**We need to address the security risks, and what F-Droid does to mitigate those risks. We need to be open and transparent in our communications to build trust.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tablet&lt;/strong&gt; Optimize the latest view for tablet. Show more grid tiles horizontally (i.e. display 3 instead of 2 in portrait mode) and increase font size.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;more-information-coming-soon&#34;&gt;More information coming soon!&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Methodology (Note: All tasks were completed in different orders by the participants with the exception of Task G, which was always completed last.)&lt;/li&gt;
&lt;li&gt;Participant demographic&lt;/li&gt;
&lt;li&gt;Desirability toolkit&lt;/li&gt;
&lt;li&gt;Follow-up survey results&lt;/li&gt;
&lt;li&gt;Usability metrics &amp;amp; stats&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Build Android apps with Debian: apt install android-sdk</title>
      <link>https://guardianproject.github.io/info/2017/03/13/build-android-apps-with-debian-apt-install-android-sdk/</link>
      <pubDate>Mon, 13 Mar 2017 10:03:30 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2017/03/13/build-android-apps-with-debian-apt-install-android-sdk/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2015/04/debian.jpg&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2015/04/debian-150x150.jpg&#34; alt=&#34;&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignright size-thumbnail wp-image-12920&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2015/04/debian-150x150.jpg 150w, https://guardianproject.info/wp-content/uploads/2015/04/debian-300x300.jpg 300w, https://guardianproject.info/wp-content/uploads/2015/04/debian-270x270.jpg 270w, https://guardianproject.info/wp-content/uploads/2015/04/debian-230x230.jpg 230w, https://guardianproject.info/wp-content/uploads/2015/04/debian.jpg 600w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;&lt;br /&gt;
In Debian stretch, the upcoming new release, it is now possible to build Android apps using only packages from Debian. This will provide all of the tools needed to build an Android app targeting the “platform” &lt;tt&gt;android-23&lt;/tt&gt; using the SDK &lt;tt&gt;build-tools&lt;/tt&gt; 24.0.0. Those two are the only versions of “platform” and “build-tools” currently in Debian, but it is possible to use the Google binaries by installing them into &lt;tt&gt;/usr/lib/android-sdk&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;This doesn’t cover yet all of the libraries that are used in the app, like the Android Support libraries, or all of the other myriad libraries that are usually fetched from jCenter or Maven Central. One big question for us is whether and how libraries should be included in Debian. All the Java libraries in Debian can be used in an Android app, but including something like Android Support in Debian would be strange since they are only useful in an Android app, never for a Debian app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Building apps with these packages&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here are the steps for building Android apps using Debian’s Android SDK on Stretch.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sudo apt install android-sdk android-sdk-platform-23&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export ANDROID_HOME=/usr/lib/android-sdk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In &lt;em&gt;build.gradle&lt;/em&gt;, set &lt;em&gt;compileSdkVersion&lt;/em&gt; to 23 and &lt;em&gt;buildToolsVersion&lt;/em&gt; to 24.0.0&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;gradle assembleDebug&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The Gradle Android Plugin is also packaged. Using the Debian package instead of the one from online Maven repositories requires a little configuration before running Gradle. In the &lt;em&gt;buildscript&lt;/em&gt; block:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add &lt;tt&gt;maven { url &amp;lsquo;file:///usr/share/maven-repo&amp;rsquo; }&lt;/tt&gt; to repositories&lt;/li&gt;
&lt;li&gt;use &lt;tt&gt;compile &amp;lsquo;com.android.tools.build:gradle:debian&amp;rsquo;&lt;/tt&gt; to load the plugin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Currently there is only the target platform of API Level 23 packaged, so only apps targeted at &lt;em&gt;android-23&lt;/em&gt; can be built with only Debian packages. We will add more API platform packages via backports. Only &lt;em&gt;build-tools&lt;/em&gt; 24.0.0 is available, so in order to use the SDK, build scripts need to be modified. Beware that the Lint in this version of Gradle Android Plugin is still problematic, so running the :lint tasks might not work. They can be turned off with &lt;tt&gt;lintOptions.abortOnError&lt;/tt&gt; in &lt;em&gt;build.gradle&lt;/em&gt;. Google binaries can be combined with the Debian packages, for example to use a different version of the platform or build-tools.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why include the Android SDK in Debian?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While Android developers could develop and ship apps right now using these Debian packages, this is not very flexible since only &lt;tt&gt;build-tools-24.0.0&lt;/tt&gt; and &lt;tt&gt;android-23&lt;/tt&gt; platform are available. Currently, we are not aiming to cover the most common use cases. Those are pretty well covered by Google’s binaries (except for the proprietary license on the Google binaries), and are probably the most work for the Debian Android Tools Team to cover. We are first working on use cases that are poorly covered by the Google binaries, for example, like where only specific parts of the whole SDK are used. Here are some we have in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tools for security researchers, forensics, reverse engineering, etc. which can then be included in live CDs and distros like Kali Linux&lt;/li&gt;
&lt;li&gt;a hardened APK signing server using &lt;em&gt;apksigner&lt;/em&gt; that uses a standard, audited, public configuration of all reproducibly built packages&lt;/li&gt;
&lt;li&gt;Replicant is a 100% free software Android distribution, so of course &lt;a href=&#34;http://blog.replicant.us/2017/02/replicant-6-0-development-updates/&#34; target=&#34;_blank&#34;&gt;they want to have a 100% free software SDK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;high security apps need a build environment that matches their level of security, the Debian Android Tools packages are &lt;a href=&#34;https://reproducible-builds.org&#34; target=&#34;_blank&#34;&gt;reproducibly built&lt;/a&gt; only from publicly available sources&lt;/li&gt;
&lt;li&gt;dead simple install with strong trust path with mirrors all over the world&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the long run, the &lt;a href=&#34;https://wiki.debian.org/AndroidTools&#34; target=&#34;_blank&#34;&gt;Debian Android Tools Team&lt;/a&gt; aims to cover more use cases well, and also building the Android NDK. This all will happen more quickly if we have more contributors! Android is the most popular mobile OS, and can be 100% free software like Debian. Debian and its derivatives are one of the most popular platforms for Android development.&lt;/p&gt;

&lt;p&gt;Last but not least, we want feedback on how this should all work. For example, we need ideas for how to nicely integrate Debian’s Java libraries into the Android &lt;em&gt;gradle&lt;/em&gt; workflow. And ideally, the Android Support libraries would also be reproducibly built and packaged somewhere that enforces only free software.&lt;/p&gt;

&lt;p&gt;For anyone interested in tools for working with Android apps and APKs, including for reverse engineering, inspection, auditing, etc. there are quite a few tools included now in Debian:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apt install android-sdk androguard apktool diffoscope dummydroid enjarify gplaycli libsmali-java libscout repo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>F-Droid now supports APK Expansion Files aka OBB</title>
      <link>https://guardianproject.github.io/info/2017/02/22/f-droid-now-supports-apk-expansion-files-aka-obb/</link>
      <pubDate>Wed, 22 Feb 2017 10:24:53 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2017/02/22/f-droid-now-supports-apk-expansion-files-aka-obb/</guid>
      <description>&lt;p&gt;Many games, mapping, and other apps require a large amount of data to work. The APK file of an Android app is limited to 100MB in size, yet it is common for a single country map file to be well over 100MB. Also, in order to get users running as quickly as possible, they should not have to wait for huge amounts of data to download in order to just start the app for the first time.&lt;/p&gt;

&lt;p&gt;Google created OBB aka “&lt;a href=&#34;https://developer.android.com/google/play/expansion-files.html&#34; target=&#34;_blank&#34;&gt;APK Expansion&lt;/a&gt;” files to provide a flexible means of delivering large amounts of data. This arragement also saves lots of bandwidth since app updates since the APK file and the OBB file can be updated separately. For example, a game’s assets do not need to change often, so they can be shipped as an OBB. Then when the app itself is updated (i.e. the APK), it does not need to include all those assets that are in the OBB file.&lt;/p&gt;

&lt;p&gt;OBB files are used by lots of apps like games and MAPS.ME. F-Droid supports OBB by downloading and installing the OBB before the APK, so that once the APK is installed, the OBB files are already in place and ready to use. F-Droid also provides an &lt;em&gt;Intent&lt;/em&gt; method for apps to fetch the OBB download URLs in case the app itself needs to handle the OBB download/update. That is similar to how it works in Google Play.&lt;/p&gt;

&lt;p&gt;In order to use the OBB support, users need at least F-Droid v0.102, and the repo must use &lt;em&gt;fdroidserver&lt;/em&gt; v0.7.0 or newer. Adding OBB files to a repo is very easy: just copy them to the same folder where the APKs go, i.e. &lt;em&gt;/path/to/fdroid/repo/&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developer Usage&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One of the details about using OBB files in apps is that OBB files are not guaranteed to be installed by the app store. That means the app could start, and the expected OBB files will not be there. In that case, the app must download and install the OBB file itself. Google Play recommends using their proprietary &lt;a href=&#34;https://developer.android.com/google/play/licensing/index.html&#34; target=&#34;_blank&#34;&gt;Application Licensing&lt;/a&gt; service for this, F-Droid provides a simple method that is all free software.&lt;/p&gt;

&lt;p&gt;To get the URL for the two possible OBB files, send an &lt;code&gt;Intent&lt;/code&gt; to F-Droid using these &lt;em&gt;Actions&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;org.fdroid.fdroid.action.GET_OBB_MAIN_URL&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org.fdroid.fdroid.action.GET_OBB_PATCH_URL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Then download that URL using your favorite method, and make sure that the file ultimately ends up in &lt;em&gt;Android/obb/&amp;lt;packageName&amp;gt;&lt;/em&gt; on the device’s External Storage.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building the most private app store</title>
      <link>https://guardianproject.github.io/info/2016/06/02/building-the-most-private-app-store/</link>
      <pubDate>Thu, 02 Jun 2016 11:08:52 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2016/06/02/building-the-most-private-app-store/</guid>
      <description>&lt;p&gt;&lt;em&gt;App stores can work well without any tracking at all&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2016/06/whichdoor.jpg&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2016/06/whichdoor-150x150.jpg&#34; alt=&#34;whichdoor&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignright size-thumbnail wp-image-13337&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Attackers are increasingly seeing app stores as a prime &lt;a href=&#34;https://guardianproject.info/2015/02/24/phishing-for-developers/&#34; target=&#34;_blank&#34;&gt;attack&lt;/a&gt; vector, whether it is aimed at the masses like &lt;a href=&#34;http://researchcenter.paloaltonetworks.com/2015/09/more-details-on-the-xcodeghost-malware-and-affected-ios-apps/&#34;&gt;XCodeGhost&lt;/a&gt; or very targeted like in FBI vs Apple. When we install software from an app store, we are placing a lot of trust in a lot of different parties involved in getting the source code from the original developer delivered to our device in a useful form. Most people are entirely unaware of how much trust they are putting into this system, which they are entrusting with their personal data. Even for people who do understand the technical details involved, figuring out whether the people and the system itself is trustworthy is difficult to do.&lt;/p&gt;

&lt;p&gt;We are building an app store that requires the bare minimum of trust: only the software developers themselves and the code they produce. We consider the app store operators and servers a threat. Building an ecosystem that enables automated, effective auditing lets the computers verify to make trust decisions easier. Effective external auditing requires an ecosystem that cannot deliver targeted content to just the auditing system, while feeding users something else (aka “binary transparency”).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Most app stores track as much as possible&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The vast majority of apps stores track their users actions in detail. Some is necessary when using the business model of the app store operator taking a percentage of sales, but none of the tracking is inherent to running an app store. For example, payment verification can be handled in the app itself like shareware. A software delivery system that tracks its users makes it simple to hide malware delivery since it can target any auditing system. Most app stores know a lot about their users:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;account name&lt;/li&gt;
&lt;li&gt;identity&lt;/li&gt;
&lt;li&gt;payment methods&lt;/li&gt;
&lt;li&gt;everything you search for in the app store&lt;/li&gt;
&lt;li&gt;everything you look at in the app store&lt;/li&gt;
&lt;li&gt;everything you download, install, uninstall&lt;/li&gt;
&lt;li&gt;which apps you actually run&lt;/li&gt;
&lt;li&gt;where you are, based on IP, declared preference, etc.&lt;/li&gt;
&lt;li&gt;your preferred language&lt;/li&gt;
&lt;li&gt;and more…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apps stores need to know very little in order to function: how to give you the files you request. That means indexes, descriptions, icons, apps, and install/delete requests (for “push” install/delete). Given that information, the client can do everything needed to provide a full app store user experience. For this work, we chose to build upon &lt;a href=&#34;https://f-droid.org&#34; target=&#34;_blank&#34;&gt;F-Droid&lt;/a&gt;, a community-run Android app store that distributes verified Free Software. The community has had an interest in privacy all along, and has always worked to avoid tracking. The security architecture is based on models proven by &lt;a href=&#34;https://wiki.debian.org/SecureApt&#34; target=&#34;_blank&#34;&gt;Debian&lt;/a&gt;, &lt;a href=&#34;https://github.com/theupdateframework/tuf/blob/develop/docs/tuf-spec.txt&#34; target=&#34;_blank&#34;&gt;The Update Framework&lt;/a&gt; , and others:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTPS connections by default&lt;/li&gt;
&lt;li&gt;pinned TLS certificate built into the client app&lt;/li&gt;
&lt;li&gt;updates verified based on the signature on the app itself&lt;/li&gt;
&lt;li&gt;file integrity protected by signed metadata&lt;/li&gt;
&lt;li&gt;signed metadata includes hashes of the app and its signing key&lt;/li&gt;
&lt;li&gt;signed metadata generated on a separate machine, which can be fully offline&lt;/li&gt;
&lt;li&gt;public key for verifying metadata signatures built into F-Droid client app&lt;/li&gt;
&lt;li&gt;signed metadata includes timestamp and expiry&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While the current setup is already a solid platform, we are implementing a number of improvements. The signed metadata will include list of official mirrors, then the client chooses mirrors based on availability and freshness based on local criteria like whether Tor is in use, closest on the internet, etc. We are also moving the standard HTTP “etag” cache check from the server to the client so it cannot be abused to track users.&lt;/p&gt;

&lt;p&gt;In order to defend against an attacker that holds the signing keys for the app repository, there must be a trustworthy source of information to compare against. Reproducible builds means that anyone with the same source code will produce the exact same binary. When paired with an auditing system, it is easy to catch malware inserted in the build process, rather than the source code, like XCodeGhost. Reproducible builds also makes it possible to have all builds of a release binary have the exact same hash. Then any app repository can build apps only from source code, and have a source of verification data from any other app repository building the same app. Building software from source has become cheap enough that many companies like gitlab.com and Travis CI are offering free, automated build services in the cloud. Since the whole F-Droid toolset is free software and designed to be easy to setup, the barriers to setting up automatic auditing are quite low. People in separate areas of the world with different risk profiles can run verification servers to provide more trustworthy information.&lt;/p&gt;

&lt;p&gt;Another key aspect of the F-Droid project is to provide the complete toolset needed to run an app store. This enables a more decentralized ecosystem. Therefore, one key goal is to lower the risks of running the services, so that more people can run their own app stores. If the app store does not track its users, then that removes the hassle of protecting personal data from any attacker. These services can be run without fear of responding to secret orders for personal information. It also means that the server setup is a lot simpler because it does not need dynamic content. The app store serve only needs to serve files (e.g. indexes, apps, etc.). The app repository is generated on a secure machine, or even a fully offline machine, and posted to the server. The main server is purely a mirror of the offline machine where the signed repository is generated. Mirrors just shuffle bits from place to place, they are no longer an attack vector.&lt;/p&gt;

&lt;p&gt;Putting all these pieces together provides a system where users need only audit the source code in order to verify a trustworthy app delivery. The file pipeline provides redundantly secure data transmission, the apps can be reproducibly from source code, the app repositories can be automatically audited. Of course, this system relies not only on the power of cryptography, but also the power of transparency. Debian provides a great example of the power of transparency: Debian gives a thousand volunteers root access to every Debian install (by virtue of their ability to upload signed packages that get installed as root). Yet this system has been proven over the past 20+ years to provide solid security. Ultimately we hope that this will de-emphasize the signing key as the sole protection against abuse. If malware has a decent change of being spotted, it makes it much less likely to be used since malware authors either rigorously defend their exploits, or use well known exploits that are not difficult to automatically detect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Future Work&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One attack vector that is not well covered is malware that installable by everyone, that then uses data on the local device to target specific users. That would be a way to target individuals using an app store that does not track its users. We are starting to implement automated dynamic analysis of every app using tools like &lt;a href=&#34;https://labs.mwrinfosecurity.com/tools/drozer&#34; target=&#34;_blank&#34;&gt;Drozer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We are also working towards making as many apps as possible build reproducibly. Some of our quick checks show that a large number of the apps in f-droid.org already will build reproducibly, given the right build environment. We are working on making the process of setting up that build environment as automated as possible.&lt;/p&gt;

&lt;p&gt;The F-Droid “verification server” has been prototyped, and it will be further developed with the aim of making it dead simple to run in common cloud services.&lt;/p&gt;

&lt;p&gt;We already have the infrastructure in place to do verified double-signing, where the developer first signs the release bulid, then once f-droid.org reproduces that build, it adds its signature. Then Android would enforce that both signatures need to be present in order for it to be a valid update.&lt;/p&gt;

&lt;p&gt;As the full localization support is built out, the language that a user is using will not be reported to the server. While speaking Spanish in Spain does not provide much information, speaking Quechua in Uzbekistan can narrow it down to a single user. Instead of dividing the index metadata by language, it will instead be grouped by app. We will then group apps so that it is difficult to tell which app in the group is the one people are interested in. For example, if one very popular app is only grouped with apps that are rarely downloaded, then it is an easy assumption that someone getting info about that block of apps is most likely looking for that popular app.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PanicKit: making your whole phone respond to a panic button</title>
      <link>https://guardianproject.github.io/info/2016/01/12/panickit-making-your-whole-phone-respond-to-a-panic-button/</link>
      <pubDate>Tue, 12 Jan 2016 08:59:41 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2016/01/12/panickit-making-your-whole-phone-respond-to-a-panic-button/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2016/01/round-button-hazard.png&#34; rel=&#34;attachment wp-att-13221&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2016/01/round-button-hazard-150x150.png&#34; alt=&#34;round hazard button&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignright size-thumbnail wp-image-13221&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2016/01/round-button-hazard-150x150.png 150w, https://guardianproject.info/wp-content/uploads/2016/01/round-button-hazard-300x300.png 300w, https://guardianproject.info/wp-content/uploads/2016/01/round-button-hazard-200x200.png 200w, https://guardianproject.info/wp-content/uploads/2016/01/round-button-hazard.png 512w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;Our mobile devices do so many things for us, making it easy to communicate with people in all manners while giving us access to all sorts of information wherever we are. But in times of anxiety and panic, it is difficult to quickly use them. Will you be too shaky to type in your PIN or lock pattern? Will you have enough time to find your trusted contacts and send them a message? On top of that, our mobile devices carry massive amounts of private information in them: banking details, pictures, all of our messages and call logs.&lt;/p&gt;

&lt;p&gt;The kinds of data that we worry about vary widely based on where we are. In many places in the world, the stuff you are reading or the music you are listening to can get you arrested, or the people you are communicating with is enough to send you to jail. We have been adding “panic buttons” to our apps for 5 years now, and now we want to create an ecosystem of apps to create flexible and system-wide responses when we are unfortunate enough to require pressing the personal panic button.&lt;/p&gt;

&lt;p&gt;This work seeks to establish a new level of awareness, understanding and capability for providing specific mobile software features for users who are in a “panic” situations. We define “panic” as at risk of having their mobile device physically compromised or removed from their body, being physically detained themselves, or facing an immediate threat of violence, injury, kidnapping or death. This is not to say we are are building a global “911” system. We seek to explore how software that is explicitly designed for these situations, can provide some amount of assistance to the user, by either protecting their privacy, ensuring that sensitive data is hidden or unrecoverable, or that their support networks are notified of the panic event, and provided with the necessary information to take action.&lt;/p&gt;

&lt;p&gt;Over the past year, we have developed user experience design patterns, an Android library, a new panic button app, and example projects to communicate how a system-wide panic should look. For a quick introduction, check out this video demonstrating a very simple panic setup of &lt;a href=&#34;https://play.google.com/store/apps/details?id=info.guardianproject.ripple&#34; target=&#34;_blank&#34;&gt;Ripple&lt;/a&gt;, a panic button, triggering &lt;a href=&#34;https://play.google.com/store/apps/details?id=info.guardianproject.browser&#34; target=&#34;_blank&#34;&gt;Orweb&lt;/a&gt;, a private browser:&lt;/p&gt;

&lt;h2 id=&#34;make-your-app-respond-in-times-of-panic&#34;&gt;Make your app respond in times of panic&lt;/h2&gt;

&lt;p&gt;The ultimate goal of PanicKit is of course to make apps respond with actions that help protect the user. This can be as simple as locking the app when it has a passphrase, or the response can combine a number of actions into a coherent response: a messaging app locks its data and disguises itself as a game while sending out the panic message that includes the user’s location. There is a lot of complexity in all this, especially with many apps involved, so it is essential to always simplify the experience as much as possible. Thinking about panic situations is stressful, setting up the panic response should not add to that stress. Towards that end, it is better to sacrifice some flexibility if that means solid gains in simplicity.&lt;/p&gt;

&lt;p&gt;The first key design pattern is the default, non-destructive response. If all apps that support PanicKit include sensible defaults, then pressing the panic button can have a useful response without the user having to setup anything at all. In order to achieve this, we divide possible responses into two categories: non-destructive vs destructive. An app that has a PIN lock can be locked without destroying anything, the user just needs to unlock it. A browser that wipes the cache can always just download the files again next time the user goes to that website. If an app only has a default, non-destructive response, then there is no need to have a configuration interface; it can be represented purely in the trigger app’s list of responders, where it will be marked “App hides when triggered”.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2016/01/02.0.png&#34; rel=&#34;attachment wp-att-13212&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2016/01/02.0-939x1024.png&#34; alt=&#34;panic responder setup&#34; width=&#34;780&#34; height=&#34;851&#34; class=&#34;alignnone size-large wp-image-13212&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2016/01/02.0-939x1024.png 939w, https://guardianproject.info/wp-content/uploads/2016/01/02.0-275x300.png 275w, https://guardianproject.info/wp-content/uploads/2016/01/02.0-768x838.png 768w&#34; sizes=&#34;(max-width: 780px) 100vw, 780px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Many of the most valuable panic responses require doing something that can not be undone, so we classify these as destructive. Deleting data is exactly what is needed in a panic situation, but the user must opt-in to enable this kind of response in order to prevent data from being mistakenly deleted. Sending a message can also be a very valuable panic response. But sending a message to the wrong person can cause harm, sending it at the wrong time can destroy people’s expectations: if you cry wolf too often, then people will stop hearing it. Disguising an app can also save people a lot of trouble. But if the user does not know this is going to happen, their experience will be that the app was deleted. So these are all destructive responses and require the user to enable them via a panic setup screen.&lt;/p&gt;

&lt;p&gt;For apps that offer configurable responses, it is essential to present those options clearly with as little clutter as possible. The panic setup should be on a devoted screen, not mixed in with other settings, and takes up the full screen. Panic is a time of stress, the panic response should strive to avoid adding any stress on top of that. When an app offers a few options for responses, then even the devoted screen can quickly get complicated: a list of possibilities, a text field for a message, and a way to manage the contacts to send to. It is important that the entire response is easily visible in one screen so that the user can quickly and easily tell how that app will respond. The entire panic setup should be on a single screen with as little scrolling as possible. Large widgets like a message text field should be placed at the bottom, and be collapsed if not active.&lt;/p&gt;

&lt;p&gt;To get started, add the PanicKit library to your &lt;em&gt;build.gradle&lt;/em&gt;: &lt;code&gt;info.guardianproject.panic:panic:0.5&lt;/code&gt;, then check out the FakePanicResponder example app, as well as how it is implemented in real apps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/SMSSecure/SMSSecure/blob/8b2d61161716dcae33c7ae2fd9540931b632030a/src/org/smssecure/smssecure/PanicResponderActivity.java&#34; target=&#34;_blank&#34;&gt;SMSSecure lock as default response&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/theScrabi/NewPipe/pull/133&#34; target=&#34;_blank&#34;&gt;NewPipe clear search history as default response&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zom/Zom-Android/blob/master/app/src/main/java/org/awesomeapp/messenger/ui/PanicSetupActivity.java&#34; target=&#34;_blank&#34;&gt;Zom with multiple destructive responses and a default lock response&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;make-your-own-panic-button-app&#34;&gt;Make your own panic button app&lt;/h2&gt;

&lt;p&gt;One key reason why we took on this project is to spur more innovation in what a “panic button” can look like. There are currently two solid panic trigger apps that use PanicKit: &lt;a href=&#34;https://panicbutton.io&#34; target=&#34;_blank&#34;&gt;PanicButton&lt;/a&gt; and &lt;a href=&#34;https://play.google.com/store/apps/details?id=info.guardianproject.ripple&#34; target=&#34;_blank&#34;&gt;Ripple&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are many ideas for what a panic button can look like, now it is easy to make one that will actually trigger real things. A custom panic button app only needs to send the trigger message (technically an &lt;code&gt;ACTION_TRIGGER Intent&lt;/code&gt;), which will make apps lock, hide, delete private data, send a message, etc. Here are some ideas for panic button apps that we would love to see:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a “&lt;a href=&#34;https://en.wikipedia.org/wiki/Dead_man%27s_switch&#34; target=&#34;_blank&#34;&gt;dead man’s switch&lt;/a&gt;” that triggers if the user has not checked in within the last hour&lt;/li&gt;
&lt;li&gt;a “geo-fence” that triggers if the device comes too close to a known detention center&lt;/li&gt;
&lt;li&gt;a sensor monitor that triggers on absence of movement&lt;/li&gt;
&lt;li&gt;a custom Bluetooth button that looks like a belt buckle, &lt;a href=&#34;http://news.discovery.com/tech/gear-and-gadgets/sleek-jewelry-hides-a-panic-button-140220.htm&#34; target=&#34;_blank&#34;&gt;brooch&lt;/a&gt;, or other innocuous object&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2016/01/01.3.png&#34; rel=&#34;attachment wp-att-13207&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2016/01/01.3-149x300.png&#34; alt=&#34;Ripple&#39;s responders&#34; width=&#34;149&#34; height=&#34;300&#34; class=&#34;alignright size-medium wp-image-13207&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2016/01/01.3-149x300.png 149w, https://guardianproject.info/wp-content/uploads/2016/01/01.3-768x1544.png 768w, https://guardianproject.info/wp-content/uploads/2016/01/01.3-509x1024.png 509w, https://guardianproject.info/wp-content/uploads/2016/01/01.3.png 1006w&#34; sizes=&#34;(max-width: 149px) 100vw, 149px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An important part of the user experience of the panic button app is how it represents what the trigger will do. For that, we paid careful attention to the design of the list of “panic responder” apps. It should quickly and clearly show which apps are enabled. In our pattern, enabled apps should be sorted to the top of the list and disabled apps should be greyed out including the app icon. There should also be a standard switch to both allow the user to enable/disable an app as well as provide extra feedback on whether an app is enabled or not. That provides three visual channels that communicate what will respond (top of the list, in full color, and with the shape of a switch that is turned on). For a thorough overview of design patterns, see &lt;a href=&#34;https://dev.guardianproject.info/boards/21/topics/390&#34; target=&#34;_blank&#34;&gt;Panic Design Patterns&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Panic responders can have both non-destructive and destructive responses, and some are only appropriate for a full on panic. If you are just feeling anxious, and are worried that the situation is getting dangerous, then deleting files is not appropriate but locking and hiding is. An app could instead be an “anxious trigger” app, and be limited to only non-destructive responses. A trigger app can only send one kind of trigger message (the &lt;code&gt;ACTION_TRIGGER Intent&lt;/code&gt;), to keep the inter-app interaction simple. So the anxious trigger app would instead not offer the “EDIT” option (implemented with an &lt;code&gt;ACTION_CONNECT Intent&lt;/code&gt;), and that limits the responses to the default, non-destructive responses in all the apps that receive a trigger from the anxious trigger app.&lt;/p&gt;

&lt;p&gt;To get started, add the panickit library to your build.gradle &lt;code&gt;info.guardianproject.panic:panic:0.5&lt;/code&gt;, then check out the &lt;code&gt;PanicTrigger&lt;/code&gt; class. You can see how it is implemented in these example apps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/guardianproject/Ripple&#34; target=&#34;_blank&#34;&gt;Ripple&lt;/a&gt; – &lt;em&gt;a real panic button that is simple enough to be an example&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/guardianproject/FakePanicButton&#34; target=&#34;_blank&#34;&gt;FakePanicButton&lt;/a&gt; – &lt;em&gt;a fake app that is only meant to be an example&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;more-work-and-open-questions&#34;&gt;More work and open questions&lt;/h2&gt;

&lt;p&gt;There is a lot of potential for making our mobile devices help us in anxious and panicked moments. PanicKit has established that a system-wide panic response can be simple, approachable, and effective. But there is definitely much work to be done. There is an organization forming around this work, The &lt;a href=&#34;https://github.com/PanicInitiative&#34; target=&#34;_blank&#34;&gt;Panic Initiative&lt;/a&gt;, that will build upon the work done by Amnesty International, &lt;a href=&#34;https://iilab.org/&#34; target=&#34;_blank&#34;&gt;iilab&lt;/a&gt;, and our PanicKit work.&lt;/p&gt;

&lt;p&gt;There are of course still many open questions that we are very interested in, and hope to see more people working on this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Should this be handled on the system level?&lt;/li&gt;
&lt;li&gt;How the trigger app query the responder for its action without leaking private data like contacts or location?&lt;/li&gt;
&lt;li&gt;How can panic and anxiety be represented graphically, using colors, iconography, UI, etc.?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more discussion and resources, check out the &lt;a href=&#34;https://dev.guardianproject.info/projects/panic/wiki&#34; target=&#34;_blank&#34;&gt;PanicKit wiki&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Migrate Your Android App’s Signing Key</title>
      <link>https://guardianproject.github.io/info/2015/12/29/how-to-migrate-your-android-apps-signing-key/</link>
      <pubDate>Tue, 29 Dec 2015 12:03:54 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2015/12/29/how-to-migrate-your-android-apps-signing-key/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;It is time to update to a stronger signing key for your Android app! The old default RSA 1024-bit key is weak and officially deprecated.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;what&#34;&gt;What?&lt;/h2&gt;

&lt;p&gt;The Android OS requires that every application installed be signed by a digital key. The purpose behind this signature is to identify the author of the application, allow this author and this author alone to make updates to the app, as well as provide a mechanism to establish inter-application trust. The Android security model defines an app by two things: the package name (aka &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#getPackageName%28%29&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;packageName&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://sites.google.com/a/android.com/tools/tech-docs/new-build-system/applicationid-vs-packagename&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ApplicationID&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://developer.android.com/guide/topics/manifest/manifest-element.html#package&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;package&lt;/code&gt;&lt;/a&gt;) and the signing key. If either of those are different, then Android considers it a different app. When the package name and signing key of one APK match an installed app, then the APK is considered an update and Android will replace the installed app with the APK. If the APK is signed by a different key, then Android will prevent installing and updating.&lt;/p&gt;

&lt;p&gt;First thing is to see what the current signing key is. Check any app’s signing key using our free utility app &lt;a href=&#34;https://play.google.com/store/apps/details?id=info.guardianproject.checkey&#34; target=&#34;_blank&#34;&gt;Checkey&lt;/a&gt;:&lt;/p&gt;

&lt;div id=&#34;attachment_13170&#34; style=&#34;width: 790px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2015/12/checkey-1.png&#34; rel=&#34;attachment wp-att-13170&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-13170&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2015/12/checkey-1-1024x576.png&#34; alt=&#34;Lookout needs to generate a new key!&#34; width=&#34;780&#34; height=&#34;439&#34; class=&#34;size-large wp-image-13170&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2015/12/checkey-1-1024x576.png 1024w, https://guardianproject.info/wp-content/uploads/2015/12/checkey-1-300x169.png 300w, https://guardianproject.info/wp-content/uploads/2015/12/checkey-1-768x432.png 768w, https://guardianproject.info/wp-content/uploads/2015/12/checkey-1-350x197.png 350w, https://guardianproject.info/wp-content/uploads/2015/12/checkey-1-860x484.png 860w, https://guardianproject.info/wp-content/uploads/2015/12/checkey-1.png 1280w&#34; sizes=&#34;(max-width: 780px) 100vw, 780px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-13170&#34; class=&#34;wp-caption-text&#34;&gt;
    Lookout needs to generate a new key!
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;The official Android docs have tons of useful information about what the signing keys are good for, how to generate them, and how to use them. Unfortunately, it doesn’t provide any instructions for migrating, and for many years, 1024-bit RSA was the default. But first, why would you want or need to migrate?&lt;/p&gt;

&lt;h2 id=&#34;why&#34;&gt;Why?&lt;/h2&gt;

&lt;p&gt;Depending on when you created your signing key, you might have a particularly weak key. The primary danger of a weak key is that an adversary could break your key in order to generate fake APK signatures. Then those malicious APKs can be installed as updates to your app. There are other nefarious purposes depending on how you use the signing key in your apps. Or if you are unfortunate enough to have suffered a loss of your private key material, then it is definitely time for a new signing key.&lt;/p&gt;

&lt;p&gt;According to our friends at the &lt;a href=&#34;https://androidobservatory.org/stats&#34; title=&#34;Android Observatory&#34;&gt;Android Observatory&lt;/a&gt;, over 64% of Android apps in their data store use 1024-bit signing keys (RSA or DSA).&lt;/p&gt;

&lt;div id=&#34;visualization&#34; style=&#34;width: 600px; height: 400px;&#34;&gt;
&lt;/div&gt;

&lt;p&gt;There are several good reasons to migrate off of 1024-bit RSA keys, even though there is no &lt;em&gt;public&lt;/em&gt; proof of a 1024 prime factorization required to generate any 1024-bit key at will. The evidence has been mounting for a decade.&lt;/p&gt;

&lt;p&gt;NIST’s &lt;a href=&#34;http://csrc.nist.gov/publications/nistpubs/800-57/sp800-57_part1_rev3_general.pdf&#34;&gt;official guidelines&lt;/a&gt; (PDF, page 64 and 67) deprecated 1024-bit RSA keys at the end of 2013. This deprecation by NIST isn’t an indication that 1024-bit RSA is compromised, instead it is a preemptive move to stay ahead of attacks. Confidence in NIST might be shaken in light of &lt;a href=&#34;http://blog.cryptographyengineering.com/2013/09/on-nsa.html&#34;&gt;recent revelations&lt;/a&gt;, but in this case increasing the RSA key size is unlikely to trigger any secret NSA backdoors. If anything, the deprecation year could have been extended slightly to allow the NSA a window where they had the capacity to factor 1024-bit keys and everyone was still using them. So, it’s time to move on.&lt;/p&gt;

&lt;p&gt;For an example, a decade ago the cost of building special purpose hardware capable of breaking a single 1024-bit RSA key in one year was estimated at $10 million (&lt;a href=&#34;http://tau.ac.il/~tromer/papers/cbtwirl.pdf&#34;&gt;Adi Shamir, Eran Tromer, On the cost of factoring RSA-1024&lt;/a&gt;, 2003). Presumably the techniques have improved by orders of magnatude, and the hardware value depreciated. It is conceivable the cost has fallen enough to be affordable not only by nation-state actors, but by large criminal enterprises too.&lt;/p&gt;

&lt;p&gt;For a comprehensive talk on the state of the art (as of December 2012) when it comes to breaking 1024-bit RSA, check out the 29C3 talk &lt;a href=&#34;http://events.ccc.de/congress/2012/Fahrplan/events/5275.en.html&#34; title=&#34;FactHacks: RSA factorization in the real world&#34;&gt;FactHacks: RSA factorization in the real world&lt;/a&gt; with the cryptographers Daniel J. Bernstein, Nadia Heninger, and Tanja Lange (&lt;a href=&#34;http://events.ccc.de/congress/2012/wiki/Documentation#Recordings&#34; title=&#34;29C3 Recordings&#34;&gt;watch recording&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;how&#34;&gt;How?&lt;/h2&gt;

&lt;p&gt;Migrating to a strong key for an Android app is, unfortunately, not so simple. If you are publishing a &lt;em&gt;new&lt;/em&gt; app to the app store, then simply generate a new strong signing key and you’re done. Congratulations! However, there exists no easy way to update your signing key for an existing application, because an installed application can only take updates from an APK signed with &lt;em&gt;the same&lt;/em&gt; key.&lt;/p&gt;

&lt;p&gt;Here we outline a basic method with which you can use to fake an update to your signing key. This is not as user friendly as we would like. Some of the hard facts of performing this process is that for most app stores including Google Play, you will lose ratings and reviews since the app will show up with a new package name, and the app store will treat it like an entirely new app. Also, the user will have to manually uninstall the original app once they finish the procedure. Here is a rough outline of the process:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;generate the new signing key, &lt;em&gt;RSA 4096&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Update the first app, &lt;em&gt;App1&lt;/em&gt;, with a mechanism for exporting private data, using &lt;a href=&#34;https://github.com/guardianproject/TrustedIntents&#34; target=&#34;_blank&#34;&gt;TrustedIntents&lt;/a&gt; with a signature pin of the new key, &lt;em&gt;RSA 4096&lt;/em&gt;, which &lt;a href=&#34;https://guardianproject.info/2014/07/30/introducing-trustedintents-for-android/&#34; target=&#34;_blank&#34;&gt;Checkey will generate for you&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create a new version of the app with a different package name, &lt;em&gt;App2&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;sign &lt;em&gt;App2&lt;/em&gt; with new key, &lt;em&gt;RSA 4096&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Add method to &lt;em&gt;App2&lt;/em&gt; for receiving user data from &lt;em&gt;App1&lt;/em&gt;, including a signature pin of the old signing key, &lt;em&gt;RSA 1024&lt;/em&gt;, for use with TrustedIntents&lt;/li&gt;
&lt;li&gt;Publish &lt;em&gt;App2&lt;/em&gt; to the app stores&lt;/li&gt;
&lt;li&gt;From &lt;em&gt;App1&lt;/em&gt;, prompt user to install &lt;em&gt;App2&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;runs and imports data from &lt;em&gt;App1&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;App2&lt;/em&gt; prompts user to uninstall &lt;em&gt;App1&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For &lt;a href=&#34;https://f-droid.org&#34; target=&#34;_blank&#34;&gt;F-Droid&lt;/a&gt;, there will be some easier tools for handling this. The F-Droid system is already used to multiple signing keys per app since F-Droid uses its own signing key for many of the apps it releases, and that F-Droid signing key is different from the signing key that the original developer used in their Google Play uploads. F-Droid will likely be able to support APKs with the same package name but with multiple signing keys.&lt;/p&gt;

&lt;h3 id=&#34;a-note-on-compatibility&#34;&gt;A Note on Compatibility&lt;/h3&gt;

&lt;p&gt;There is security vs compatibility trade off a few might be interested in. Pre-4.3, Android did not support any signature algorithms except SHA1. With Android &amp;gt;= 4.3, SHA256 support was fixed, and SHA384, SHA512, and ECDSA were added (&lt;a href=&#34;https://code.google.com/p/android/issues/detail?id=38321&#34;&gt;source&lt;/a&gt;). There are still android 2.3.3 (&lt;code&gt;android-10&lt;/code&gt;) devices being sold, so anyone interested in backwards compatibility will have to heed this.&lt;/p&gt;

&lt;p&gt;Also, the larger the keysize and hashsize used, the longer it takes to install and update the application. So extremely large values might be unsuitable for slower hardware. The following probably doesn’t buy you a tremendous amount of additional security but cranks the paranoia to 11. It does so at the cost of compatibility and performance.&lt;br /&gt;
&lt;code&gt;&amp;lt;br /&amp;gt;
Gen with:&amp;lt;br /&amp;gt;
  keytool -genkey -v -keystore test.keystore -alias testkey -keyalg RSA -keysize 4096 -sigalg SHA512withRSA -dname &amp;quot;cn=Test,ou=Test,c=CA&amp;quot; -validity 10000&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Sign with:&amp;lt;br /&amp;gt;
  jarsigner -verbose -sigalg SHA512withRSA -digestalg SHA512 -keystore test.keystore test.apk testkey&amp;lt;br /&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We have some scripts that we use to generate keys in our &lt;a href=&#34;https://github.com/guardianproject/smartcard-apk-signing&#34; target=&#34;_blank&#34;&gt;smartcard-apk-signing&lt;/a&gt; repo. It is also possible to generate an Android signing key using openssl or other libraries. It is often wise to use different software than standard for doing things like generating keys. Since the Java &lt;code&gt;keytool&lt;/code&gt; approach that is the standard, recommended method for Android, that makes it a target for adversaries that are interested in breaking keys. If a key was generated using &lt;code&gt;openssl&lt;/code&gt; or GNU TLS instead, for example, then that key would not be affected if &lt;code&gt;keytool&lt;/code&gt; had &lt;a href=&#34;https://freedom-to-tinker.com/blog/kroll/software-transparency-debian-openssl-bug/&#34; target=&#34;_blank&#34;&gt;a bug like Debian’s&lt;/a&gt; &lt;a href=&#34;https://security-tracker.debian.org/tracker/CVE-2008-0166&#34; target=&#34;_blank&#34;&gt;CVE-2008-0166&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>First Reproducible Builds Summit</title>
      <link>https://guardianproject.github.io/info/2015/12/09/first-reproducible-builds-summit/</link>
      <pubDate>Wed, 09 Dec 2015 05:02:48 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2015/12/09/first-reproducible-builds-summit/</guid>
      <description>&lt;p&gt;I was just in Athens for the “&lt;a href=&#34;https://reproducible-builds.org/events/athens2015/&#34;&gt;Reproducible Builds Summit&lt;/a&gt;“, an &lt;a href=&#34;https://aspirationtech.org/&#34; target=&#34;_blank&#34;&gt;Aspiration&lt;/a&gt;-run meeting focused on the issues of getting all software builds to be reproducible. This means that anyone starting with the same source code can build the &lt;em&gt;exact&lt;/em&gt; same binary, bit-for-bit. At first glance, it sounds like this horrible, arcane detail, which it is really. But it provides tons on real benefits that can save lots of time. And in terms of programming, it can actually be quite fun, like doing a puzzle or sudoku, since there is a very clear point where you have “won”.&lt;/p&gt;

&lt;p&gt;Here are some examples of real benefits:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;makes it easy to ensure no malware was inserted into software during the build process (e.g. the &lt;a href=&#34;https://en.wikipedia.org/wiki/XcodeGhost&#34; target=&#34;_blank&#34;&gt;XCodeGhost&lt;/a&gt; malware we just saw)&lt;/li&gt;
&lt;li&gt;provides a QA tool to make sure that changes in the source code of a project produce only the expected results&lt;/li&gt;
&lt;li&gt;allows F-Droid to use the developer’s APK signature while still verifying that apps build from 100% free software&lt;/li&gt;
&lt;li&gt;make it possible to optimize and profile build processes while guaranteeing the results are exactly the same&lt;/li&gt;
&lt;li&gt;for large projects, it can greatly speed up the build process (think rebuilding Gmail)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Represented there was: &lt;a href=&#34;http://https//www.debian.org&#34; target=&#34;_blank&#34;&gt;Debian&lt;/a&gt;, Google, &lt;a href=&#34;https://www.freebsd.org/&#34; target=&#34;_blank&#34;&gt;FreeBSD&lt;/a&gt;, &lt;a href=&#34;https://getfedora.org/&#34; target=&#34;_blank&#34;&gt;Fedora&lt;/a&gt;, &lt;a href=&#34;https://f-droid.org&#34; target=&#34;_blank&#34;&gt;F-Droid&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&#34;http://brew.sh/&#34; target=&#34;_blank&#34;&gt;Homebrew&lt;/a&gt;, &lt;a href=&#34;https://www.macports.org/&#34; target=&#34;_blank&#34;&gt;MacPorts&lt;/a&gt;, &lt;a href=&#34;https://www.netbsd.org/&#34; target=&#34;_blank&#34;&gt;NetBSD&lt;/a&gt;, &lt;a href=&#34;https://www.archlinux.org/&#34; target=&#34;_blank&#34;&gt;Arch Linux&lt;/a&gt;, &lt;a href=&#34;https://www.coreboot.org/&#34; target=&#34;_blank&#34;&gt;Coreboot&lt;/a&gt;, &lt;a href=&#34;https://openwrt.org/&#34; target=&#34;_blank&#34;&gt;OpenWRT&lt;/a&gt;, and a bunch of other&lt;br /&gt;
projects like an automotive Linux distro called &lt;a href=&#34;https://wiki.baserock.org/&#34; target=&#34;_blank&#34;&gt;Baserock&lt;/a&gt;, the &lt;a href=&#34;https://www.gnu.org/software/guix/&#34; target=&#34;_blank&#34;&gt;Guix&lt;/a&gt; package manager, a Linux distro called &lt;a href=&#34;https://nixos.org/&#34; target=&#34;_blank&#34;&gt;NixOS&lt;/a&gt;, &lt;a href=&#34;https://www.haskell.org/&#34; target=&#34;_blank&#34;&gt;Haskell&lt;/a&gt; hackers, etc.&lt;/p&gt;

&lt;p&gt;The organizers are already planning a second meeting, probably in April in Western Europe, and are looking to get more projects involved. Lots of people were talking about how it would be great to get some Android ROM developers involved. So if you are a contributor to CyanogenMod, Copperhead, &lt;a href=&#34;https://omnirom.org/&#34; target=&#34;_blank&#34;&gt;OmniROM&lt;/a&gt;, &lt;a href=&#34;http://www.replicant.us/&#34; target=&#34;_blank&#34;&gt;Replicant&lt;/a&gt;, Blackphone, etc. and would be interested in attending, please let us know!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CipherKit reproducible builds</title>
      <link>https://guardianproject.github.io/info/2015/09/21/cipherkit-reproducible-builds/</link>
      <pubDate>Mon, 21 Sep 2015 10:54:05 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2015/09/21/cipherkit-reproducible-builds/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2012/10/alberti_cipher_disk.jpg&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2012/10/alberti_cipher_disk-150x150.jpg&#34; alt=&#34;alberti cipher disk&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignright size-thumbnail wp-image-3079&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2012/10/alberti_cipher_disk-150x150.jpg 150w, https://guardianproject.info/wp-content/uploads/2012/10/alberti_cipher_disk.jpg 245w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have been on a kick recently with making our build process support “reproducible builds” aka “deterministic builds”. What is this reproducible thing? Basically, what that means is that you can run a script and end up with the &lt;em&gt;exact&lt;/em&gt; same binary file as our official releases, be it a APK, JAR, AAR, whatever. That lets anyone verify that our releases are produced only from the source in git, without including anything else, whether deliberately or accidentally (like malware).&lt;/p&gt;

&lt;p&gt;Our core CipherKit libraries are the more sensitive areas, so that’s where we’ve started. We generally work on Debian and Ubuntu and recommend that platform, but we recognized that OSX is a popular platform for Android developers also. So this process will work on OSX too, using your favorite package manager (e.g. Fink, MacPorts, or Homebrew).&lt;/p&gt;

&lt;p&gt;Then you will end up with &lt;code&gt;IOCipher-v0.3.zip&lt;/code&gt;, which includes the .jar and .so files. If your setup is close enough to our release build setup, the contents of that ZIP file will be the same as the official release. Right now, it is difficult to get the exact same binary file (e.g. the same sha256 sum) because of the timestamps in the .zip and varitions caused by using different versions of Java, and Android SDK and NDK. To check the contents of your build versus the official release:&lt;/p&gt;

&lt;pre&gt;sudo apt-get install faketime unzip wget meld
cd /tmp
wget https://guardianproject.info/releases/IOCipher-v0.3.zip
wget https://guardianproject.info/releases/IOCipher-v0.3.zip.sig
gpg --verify IOCipher-v0.3.zip.sig
git clone https://github.com/guardianproject/IOCipher
cd IOCipher
git checkout v0.3
./make-release-build
./compare-to-official-release IOCipher-v0.3.zip /tmp/IOCipher-v0.3.zip
&lt;/pre&gt;

&lt;h3 id=&#34;what-is-happening-here&#34;&gt;What is happening here?&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;meld&lt;/em&gt; (&lt;em&gt;FileMerge&lt;/em&gt; on OSX) will show a listing of all files listed, and which ones are different. You can see that the contents of the &lt;em&gt;.class&lt;/em&gt; files and &lt;em&gt;.so&lt;/em&gt; files all match, but there will be inevitable differences in some of the metadata. Native builds are much more sensitive to changes in the toolchain. The Java &lt;em&gt;.class&lt;/em&gt; files are usually reproducible even when using different versions of Java and the Android SDK. Native builds are almost never reproducible if the NDK version is at all different. Sometimes even the host platform where the NDK is running (e.g. Ubuntu vs OSX, or 64-bit vs 32-bit) will cause differences in the final binaries.&lt;/p&gt;

&lt;div id=&#34;attachment_13105&#34; style=&#34;width: 883px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2015/09/Screenshot-.-IOCipher-v0.3-MANIFEST.MF-_tmp-IOCipher-v0.3-MANIFEST.MF-Meld.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-13105&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2015/09/Screenshot-.-IOCipher-v0.3-MANIFEST.MF-_tmp-IOCipher-v0.3-MANIFEST.MF-Meld.png&#34; alt=&#34;The NDK version and build platform are listed in the manifest.&#34; width=&#34;873&#34; height=&#34;591&#34; class=&#34;size-full wp-image-13105&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2015/09/Screenshot-.-IOCipher-v0.3-MANIFEST.MF-_tmp-IOCipher-v0.3-MANIFEST.MF-Meld.png 873w, https://guardianproject.info/wp-content/uploads/2015/09/Screenshot-.-IOCipher-v0.3-MANIFEST.MF-_tmp-IOCipher-v0.3-MANIFEST.MF-Meld-300x203.png 300w&#34; sizes=&#34;(max-width: 873px) 100vw, 873px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-13105&#34; class=&#34;wp-caption-text&#34;&gt;
    The NDK version and build platform are listed in the manifest.
  &lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;attachment_13104&#34; style=&#34;width: 883px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2015/09/Screenshot-.-IOCipher-v0.3-_tmp-IOCipher-v0.3-Meld.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-13104&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2015/09/Screenshot-.-IOCipher-v0.3-_tmp-IOCipher-v0.3-Meld.png&#34; alt=&#34;The Java .class files are exactly the same, but the native .so files are not.&#34; width=&#34;873&#34; height=&#34;591&#34; class=&#34;size-full wp-image-13104&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2015/09/Screenshot-.-IOCipher-v0.3-_tmp-IOCipher-v0.3-Meld.png 873w, https://guardianproject.info/wp-content/uploads/2015/09/Screenshot-.-IOCipher-v0.3-_tmp-IOCipher-v0.3-Meld-300x203.png 300w&#34; sizes=&#34;(max-width: 873px) 100vw, 873px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-13104&#34; class=&#34;wp-caption-text&#34;&gt;
    The Java .class files are exactly the same, but the native .so files are not.
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2015/09/1024px-End_CEST.svg_.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2015/09/1024px-End_CEST.svg_-150x150.png&#34; alt=&#34;faketime&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignright size-thumbnail wp-image-13098&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2015/09/1024px-End_CEST.svg_-150x150.png 150w, https://guardianproject.info/wp-content/uploads/2015/09/1024px-End_CEST.svg_-300x300.png 300w, https://guardianproject.info/wp-content/uploads/2015/09/1024px-End_CEST.svg_-200x200.png 200w, https://guardianproject.info/wp-content/uploads/2015/09/1024px-End_CEST.svg_.png 1024w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Timestamps are a very common issue when trying to reproduce a build. The release build process uses &lt;a href=&#34;https://github.com/wolfcw/libfaketime&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;faketime&lt;/code&gt;&lt;/a&gt; to provide consistent timestamps, which are picked from the git commit. &lt;code&gt;faketime&lt;/code&gt; freezes the clock entirely for native builds, so any timestamps from that process will always be exactly the same. Unfortunately, some parts of the &lt;code&gt;ant&lt;/code&gt; Java build rely on the clock moving forward, so freezing clock makes the build freeze forever. Instead, &lt;code&gt;faketime&lt;/code&gt; sets the clock using the time from the git commit, then moves time forward at 5% of the normal speed. That makes it much more likely that the timestamps will be the same, but usually what seems to happen is that the timestamps are 2 seconds off, which is the time resolution of the ZIP format. A better solution is needed here for JARs, they are easiest to verify using a sha256 sum. JAR signatures mostly seem not worth the pain they introduce. APKs signatures do not sign the whole APK, only the contents, so the varying timestamps do not matter when verifying using a APK signature. Another example of a difference: if comparing a debug build to a release build, then &lt;code&gt;BuildConfig.class&lt;/code&gt; will be difference because of the debug stuff. The sort order of the metadata in the jar MANIFEST.MF might also be different.&lt;/p&gt;

&lt;h3 id=&#34;the-end-goal&#34;&gt;The end goal&lt;/h3&gt;

&lt;p&gt;Reproducing builds is an arcane process, for sure. It is a means to an end. The goal is to get to the point where well known binaries, published in places like MavenCentral or jCenter, can easily be verified by anyone who cares to try. Or people could even set up &lt;a href=&#34;https://f-droid.org/wiki/page/Verification_Server&#34; target=&#34;_blank&#34;&gt;servers that automatically try&lt;/a&gt; to reproduce any JAR used in a project.&lt;/p&gt;

&lt;p&gt;Then people can verify those JARs in a fully decentralized manner, and publish certifications in their preferred format (GPG signatures, SHA256 sums for gradle-witness, etc). Then we can feel safe getting the release from anywhere on the internet, no matter the level of security or malware infestation.&lt;/p&gt;

&lt;p&gt;Towards that goal, we have been getting our libraries all nicely packaged up and submitted to jCenter (the default gradle repository for Android). Here are the relevant bits to include in your build.gradle:&lt;/p&gt;

&lt;pre&gt;compile &#39;info.guardianproject.cacheword:cachewordlib:0.1&#39;
compile &#39;info.guardianproject.iocipher:IOCipher:0.3&#39;
compile &#39;info.guardianproject.netcipher:netcipher:1.2&#39;
compile &#39;info.guardianproject.trustedintents:trustedintents:0.0&#39;

compile &#39;net.freehaven.tor.control:jtorctl:0.2&#39;
&lt;/pre&gt;

&lt;p&gt;SQLCipher-for-Android is coming soon:&lt;br /&gt;
&lt;a href=&#34;https://github.com/sqlcipher/android-database-sqlcipher/pull/197&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/sqlcipher/android-database-sqlcipher/pull/197&#34;&gt;https://github.com/sqlcipher/android-database-sqlcipher/pull/197&lt;/a&gt;&lt;/a&gt;&lt;br /&gt;
I hope to also get them up on MavenCentral as well, since that one is also quite common on Android, and is a community run resource versus Bintray’s jCenter, which is purely a for-profit company.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a trustworthy app store that respects privacy</title>
      <link>https://guardianproject.github.io/info/2015/06/02/building-a-trustworthy-app-store-that-respects-privacy/</link>
      <pubDate>Tue, 02 Jun 2015 16:38:03 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2015/06/02/building-a-trustworthy-app-store-that-respects-privacy/</guid>
      <description>&lt;p&gt;One core piece of our approach is thinking about very high risk situations, like Ai Weiwei or Edward Snowden, then making the tools for operating under that pressure as easy to use as possible. That means that we might occasionally come across as a little paranoid. It is important to dive into the depths of what might be possible. That is an essential step in evaluating what the risks and defenses are, and how to prioritize them. Making usable software is not just making things easy, but rather making tools for real world situations that are a simple as possible.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2015/06/hrome-crash.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2015/06/hrome-crash.png&#34; alt=&#34;chrome crash&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignright size-full wp-image-12966&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We recently received some vindication of our paranoia: we have been resistant to putting all of our trust into the Google Play app store, despite many obvious advantages. Even though Google Play is probably the most secure of the big app stores, its security approach is rather thin, &lt;a href=&#34;https://jon.oberheide.org/blog/2010/06/28/a-peek-inside-the-gtalkservice-connection/&#34; target=&#34;_blank&#34;&gt;relying mainly on HTTPS with no signature for verification&lt;/a&gt;, and the Five Eyes partnership (NSA, GCHQ, etc) noticed this, and &lt;a href=&#34;https://firstlook.org/theintercept/2015/05/21/nsa-five-eyes-google-samsung-app-stores-spyware&#34; target=&#34;_blank&#34;&gt;worked to exploit it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Android/Google Play security model is relatively simple, and that is mostly a good thing. There are two essential pieces: the signature on the APK file itself and the TLS connection to Google that provides the APK file. Once an app is installed, all APK files used to update an app must have a matching signing key. That provides a reasonably strong mechanism to defend against malware that wants to install over existing apps.&lt;/p&gt;

&lt;p&gt;Unlike package systems like Debian, there is no path to verify that the APK signing key. That means Google Play relies heavily on the TLS transport encryption to protect the APK files for when installing an Android apps for the first time. The first time an app is installed, the signing key in that app’s APK file is blindly trusted (this is called “Trust On First Use” or TOFU). It turns out that TOFU has a solid track record for security in the real world. One key aspect of implementing a good TOFU system is to make the first use indistinguishable from any other use, so that it is difficult to target only first uses while ignoring repeat uses. Intercepting repeat uses is very likely to trigger a warning and alert the user that something is wrong.&lt;/p&gt;

&lt;p&gt;Now let’s put together the pieces based on what the Chinese government can do. A few TLS certificate authorities have been caught &lt;a href=&#34;https://arstechnica.com//security/2010/03/govts-certificate-authorities-conspire-to-spy-on-ssl-users/&#34; target=&#34;_blank&#34;&gt;issuing &lt;/a&gt;&lt;a href=&#34;https://arstechnica.com//security/2011/08/earlier-this-year-an-iranian/&#34; target=&#34;_blank&#34;&gt;fake&lt;/a&gt; &lt;a href=&#34;https://arstechnica.com//business/2012/02/critics-slam-ssl-authority-for-minting-cert-used-to-impersonate-sites/&#34; target=&#34;_blank&#34;&gt;certificates&lt;/a&gt;. A company affiliated with CNNIC &lt;a href=&#34;https://arstechnica.com/security/2015/04/google-chrome-will-banish-chinese-certificate-authority-for-breach-of-trust/&#34; target=&#34;_blank&#34;&gt;was caught issuing certificates for Google domains&lt;/a&gt;. A trusted certificate authority can issue usable certificates for any domain, so any computer that trusts CNNIC would trust their fake certificates for Google. That lets the Chinese government transparently Man-in-the-Middle traffic to Google servers. China could then use the Great Firewall to generate targeted malware on the fly, seeing the user credentials that Google Play requires, seeing the list of apps that each user has installed, etc. Then when the targeted user goes to install a new app, the APK file is intercepted, malware is added, then it is re-signed and transparently sent off to the user.&lt;/p&gt;

&lt;p&gt;This targeted malware can be designed to avoid the malware scanners in Google Play, Lookout, etc. since it would be direct addition of code rather than via an exploit. It would be just adding Java classes to the APK. Or alternatively, in combination with some of the signing exploits that have been discovered in Android, like &lt;a href=&#34;http://www.saurik.com/id/19&#34; target=&#34;_blank&#34;&gt;Master Key&lt;/a&gt;, the Great Firewall is able to inject malware into the real APK itself without changing the signature.&lt;/p&gt;

&lt;p&gt;Of course, when Google Play’s TLS connection includes X.509 &lt;a href=&#34;https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning&#34; target=&#34;_blank&#34;&gt;certificate pinning&lt;/a&gt;, then the above attack would not be possible since the client would have a whitelist of certificate authorities that it trusts for play.google.com, and CNNIC would probably not be on that whitelist. This highlights the importance of pinning certificate authorities in apps that need good security over TLS or HTTPS. All TLS connections &lt;a href=&#34;http://nelenkov.blogspot.com/2012/12/certificate-pinning-in-android-42.html&#34; target=&#34;_blank&#34;&gt;support pinning at the system level&lt;/a&gt; starting in Android 4.2. We are crazy enough to support down to Android 2.3 since there are lots of older Android devices in use, and even &lt;a href=&#34;https://arstechnica.com/gadgets/2014/12/android-2-3-gingerbread-four-years-later-the-os-just-wont-die/&#34; target=&#34;_blank&#34;&gt;new devices being sold with Android 2.3.3&lt;/a&gt;. That means we think about making apps self-contained in terms of security improvements like pinning.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2015/06/sadballs.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2015/06/sadballs-150x300.png&#34; alt=&#34;sad balls&#34; width=&#34;150&#34; height=&#34;300&#34; class=&#34;alignright size-medium wp-image-12969&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2015/06/sadballs-150x300.png 150w, https://guardianproject.info/wp-content/uploads/2015/06/sadballs.png 400w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It gets worse&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Many indigenous app stores like &lt;a href=&#34;http://cafebazaar.ir&#34; target=&#34;_blank&#34;&gt;Cafe Bazaar&lt;/a&gt; and Xiaomi’s &lt;a href=&#34;http://app.mi.com&#34; target=&#34;_blank&#34;&gt;MiMarket&lt;/a&gt; lack basic protections like TLS, making targeted attacks trivial for governments, or even anyone who gains control of a piece of the network path. These days that is actually easy to do by exploiting home routers, which are &lt;a href=&#34;https://arstechnica.com/security/2015/05/researchers-uncover-self-sustaining-botnets-of-poorly-secured-routers/&#34; target=&#34;_blank&#34;&gt;generally&lt;/a&gt; &lt;a href=&#34;https://arstechnica.com/security/2015/04/no-patch-for-remote-code-execution-bug-in-d-link-and-trendnet-routers/&#34; target=&#34;_blank&#34;&gt;easy&lt;/a&gt; to &lt;a href=&#34;https://arstechnica.com/security/2015/05/the-moose-is-loose-linux-based-worm-turns-routers-into-social-network-bots/&#34; target=&#34;_blank&#34;&gt;exploit&lt;/a&gt;. One of those botnets would easily start looking for app installs in the network traffic, then add exploits accordingly. As long as the first install is easy to detect and the user easy to track, then the malware can transparently inject malware designed to be difficult to detect by malware scanners and people alike.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/11/fdroidheader3.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2013/11/fdroidheader3.png&#34; alt=&#34;fdroidheader3&#34; width=&#34;720&#34; height=&#34;180&#34; class=&#34;alignnone size-full wp-image-11906&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/11/fdroidheader3.png 720w, https://guardianproject.info/wp-content/uploads/2013/11/fdroidheader3-300x75.png 300w&#34; sizes=&#34;(max-width: 720px) 100vw, 720px&#34; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;The Alternative&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://f-droid.org&#34; target=&#34;_blank&#34;&gt;FDroid&lt;/a&gt; also has the key advantage of being designed from the beginning to avoid tracking users, and to use proven methods of delivering software, following the signed repository model of Debian, Ubuntu, etc. but then served over a solid HTTPS channel for increased privacy and a backup layer of security. It is also possible to use privacy proxies like Tor or I2P via the proxy settings. There is no user credentials needed, it is all free software, so FDroid users can even hide themselves from the server delivering the apps, as well as any network observers. Since all APKs are delivered via signed metadata that is verified using a key built into the FDroid client app, there is no risk of getting served malware even if the HTTPS connection is completely and transparently broken.&lt;/p&gt;

&lt;p&gt;As part of our &lt;a href=&#34;https://dev.guardianproject.info/project/bazaar/wiki&#34; target=&#34;_blank&#34;&gt;Bazaar Project&lt;/a&gt;, we have been putting more and more efforts into the FDroid project, and working to make it much easier to use. All Guardian Project apps are available in FDroid, as well as all the core apps that you might need like Firefox, a Twitter client, K-9 email, etc. Tech journalist &lt;a href=&#34;https://medium.com/backchannel/why-i-m-saying-goodbye-to-apple-google-and-microsoft-78af12071bd&#34; target=&#34;_blank&#34;&gt;Dan Gillmor agrees&lt;/a&gt;: free software that respects privacy is not only for the über-geek anymore.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Android tools into Debian</title>
      <link>https://guardianproject.github.io/info/2015/04/30/getting-android-tools-into-debian/</link>
      <pubDate>Thu, 30 Apr 2015 11:13:26 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2015/04/30/getting-android-tools-into-debian/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2015/04/debian.jpg&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2015/04/debian-150x150.jpg&#34; alt=&#34;debian&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignright size-thumbnail wp-image-12920&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2015/04/debian-150x150.jpg 150w, https://guardianproject.info/wp-content/uploads/2015/04/debian-300x300.jpg 300w, https://guardianproject.info/wp-content/uploads/2015/04/debian-270x270.jpg 270w, https://guardianproject.info/wp-content/uploads/2015/04/debian-230x230.jpg 230w, https://guardianproject.info/wp-content/uploads/2015/04/debian.jpg 600w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2015/04/android.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2015/04/android-150x150.png&#34; alt=&#34;android&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignright size-thumbnail wp-image-12919&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2015/04/android-150x150.png 150w, https://guardianproject.info/wp-content/uploads/2015/04/android-270x270.png 270w, https://guardianproject.info/wp-content/uploads/2015/04/android-230x230.png 230w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As part of Debian’s project in Google &lt;a href=&#34;https://wiki.debian.org/SummerOfCode2015&#34; target=&#34;_blank&#34;&gt;Summer of Code&lt;/a&gt;, I’ll be working with two students, Kai-Chung Yan and Komal Sukhani, and another mentor from the &lt;a href=&#34;https://wiki.debian.org/Teams/JavaPackaging&#34; target=&#34;_blank&#34;&gt;Debian Java Team&lt;/a&gt; team, &lt;a href=&#34;https://&amp;#x71;a&amp;#x2e;d&amp;#x65;b&amp;#x69;a&amp;#x6e;.&amp;#x6f;r&amp;#x67;/dev&amp;#x65;l&amp;#x6f;p&amp;#x65;r&amp;#x2e;p&amp;#x68;p&amp;#x3f;l&amp;#x6f;gin=&amp;#x61;p&amp;#x6f;@&amp;#x67;a&amp;#x6d;b&amp;#x61;r&amp;#x75;.&amp;#x64;e&#34; target=&#34;_blank&#34;&gt;Markus Koschany&lt;/a&gt;. We are going to be working on getting the Android SDK and tools into Debian, as part of the Debian &lt;a href=&#34;https://wiki.debian.org/AndroidTools&#34; target=&#34;_blank&#34;&gt;Android Tools&lt;/a&gt; team, building upon the existing work already included from the Java and &lt;a href=&#34;https://wiki.debian.org/Teams/AndroidTools&#34; target=&#34;_blank&#34;&gt;Android Tools&lt;/a&gt; teams. This project is in conjunction with the Java team since there is overlap between Android and Java tools, like &lt;code&gt;gradle&lt;/code&gt;, &lt;code&gt;maven&lt;/code&gt;, etc. Since this work is in Debian, all of the Debian-derivatives will automatically inherit this work. That includes: Ubuntu, Mint, Elementary, and many more.&lt;/p&gt;

&lt;p&gt;The first question a lot of Android developers are probably asking is: why would we want to put the Android tools into Debian when there is already an official distribution from Google with it’s own update tools? It turns out there are many reasons, mostly centered around making things much easier to use, as well as addressing some key security concerns. For example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;automatic trustworthy downloads, no need to verify hash sums or think about HTTPS&lt;/li&gt;
&lt;li&gt;eliminate need for insecure wrapper scripts, like &lt;code&gt;./gradlew&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;easy install and update channel that all Debian users already know&lt;/li&gt;
&lt;li&gt;trivial install for specific tools, like &lt;code&gt;adb&lt;/code&gt;, &lt;code&gt;fastboot&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;setting up a Debian/Ubuntu/etc box for Android development is easier when everything is included&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2015/02/320px-Trawling_Drawing.jpg&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2015/02/320px-Trawling_Drawing-150x150.jpg&#34; alt=&#34;320px-Trawling_Drawing&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignright size-thumbnail wp-image-12873&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2015/02/320px-Trawling_Drawing-150x150.jpg 150w, https://guardianproject.info/wp-content/uploads/2015/02/320px-Trawling_Drawing-230x230.jpg 230w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The most glaring issue from my point of view is the security issues in &lt;code&gt;gradle&lt;/code&gt;. It will happily download and execute code without any kind of verification whatsoever. It inherits this terrible practice from maven, which has been shown to be an &lt;a href=&#34;http://blog.ontoillogical.com/blog/2014/07/28/how-to-take-over-any-java-developer/&#34; target=&#34;_blank&#34;&gt;easy path to exploit anyone using it&lt;/a&gt;. This is especially concerning considering that developers are more and more &lt;a href=&#34;https://guardianproject.info/2015/02/24/phishing-for-developers/&#34; target=&#34;_blank&#34;&gt;being directly targeted&lt;/a&gt;. At least it is more common for &lt;code&gt;gradle&lt;/code&gt; configs to use HTTPS, but it is still quite easy mess up a config and force users to use HTTP instead. Fragile configs are really bad for security. Even if &lt;a href=&#34;https://github.com/WhisperSystems/gradle-witness&#34; target=&#34;_blank&#34;&gt;gradle-witness&lt;/a&gt; is used to pin the hash for the jars used in the project, &lt;code&gt;gradle-wrapper&lt;/code&gt; might still downloading insecure code an executing it immediately, giving attackers potential full user access to that machine. That is because &lt;code&gt;gradle-wrapper&lt;/code&gt; will download versions of &lt;code&gt;gradle&lt;/code&gt; that it needs, and &lt;code&gt;gradle-witness&lt;/code&gt; can not be used to pin the hash of the &lt;code&gt;gradle&lt;/code&gt; files. And the repositories that &lt;code&gt;gradle&lt;/code&gt; uses only provide methods to protect against network-based attacks. If the server that holds the jars is exploited, the attacker can replace the jars and the sum files at the same time. There is &lt;a href=&#34;https://github.com/gradle/gradle/pull/448&#34; target=&#34;_blank&#34;&gt;a pull request open for &lt;code&gt;gradle&lt;/code&gt;&lt;/a&gt; to allow pinning of the &lt;code&gt;gradle&lt;/code&gt; executables themselves, which will help this situation.&lt;/p&gt;

&lt;p&gt;On a different note, many people who are not developers at all want to use tools like &lt;code&gt;adb&lt;/code&gt; and &lt;code&gt;fastboot&lt;/code&gt; to access their Android device, or even root it. Having them in Debian means they are trivial for people to install, vastly easier than trying to figure out how to download and install the Android SDK. What lots of people end up doing instead is downloading random binaries from insecure internet forums and using those. For many devices, it is already possible to use only tools in Debian to root the device. As we get more of the Android tools packaged and updated in Debian, that will become the norm.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Updates when you need them, built upon a stable base&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One common complaint about packages in Debian is that they are old and outdated. It is part of the core mission of Debian/stable to provide an operating system that changes as little as possible. That mission is contrary to what most developers need from their SDKs and sometimes even the development tools. But stability is also important for developers as well. For example, tools like &lt;code&gt;make&lt;/code&gt;, used to build native code using the Android NDK (&lt;code&gt;ndk-build&lt;/code&gt; is a &lt;code&gt;make&lt;/code&gt; script) and even Android itself, has been around a long time and is used in so many projects. That is a tool that almost every developer wants to have very stable.&lt;/p&gt;

&lt;p&gt;For the packages that developers need to have completely up-to-date, like the Android SDK itself, there are many options for distribution. Ubuntu Personal Package Archives (PPA) have proven easy and useful for exactly this kind of thing, and Debian is working on adding support for PPAs. Official repositories for &lt;a href=&#34;http://backports.debian.org/&#34; target=&#34;_blank&#34;&gt;backports&lt;/a&gt; are another avenue for timely updates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Help us figure this out&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We want lots of feedback on how to do this right! A great example is how to best support the various versions of &lt;code&gt;gradle&lt;/code&gt;. It seems to me that &lt;code&gt;gradle&lt;/code&gt; is starting to stabilize, and it is no longer necessary to track very specific releases of &lt;code&gt;gradle&lt;/code&gt;. For example, &lt;code&gt;gradle&lt;/code&gt; v2.2.1 will work well with projects that were setup with just about any v2.x version. And projects still using 1.x, they mostly seem to work using v1.12. So if this is the case, then this fits into a common pattern with build tools in Debian:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GNU Compiler Collection is packaged as &lt;code&gt;gcc4.8&lt;/code&gt;, &lt;code&gt;gcc4.7&lt;/code&gt;, etc.&lt;/li&gt;
&lt;li&gt;Apache Maven is packaged as &lt;code&gt;maven&lt;/code&gt; and &lt;code&gt;maven2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;GNU automake is packaged as &lt;code&gt;automake1.14&lt;/code&gt;, &lt;code&gt;automake1.13&lt;/code&gt;, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m currently thinking that the best solution for gradle is like Maven, with the package called &lt;code&gt;gradle&lt;/code&gt; (v2.3) being the most up-to-date in conjunction with specific packages to support older versions, like &lt;code&gt;gradle1&lt;/code&gt; (v1.12). But maybe it makes sense to do something like gcc, with a gcc meta-package to install the currently best supported version, then all versions packaged with name that includes that version, i.e. a gradle meta-package with &lt;code&gt;gradle1&lt;/code&gt;, &lt;code&gt;gradle2&lt;/code&gt;, &lt;code&gt;gradle3&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;Other issues that we will have to grapple with include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;how to package various NDK versions?&lt;/li&gt;
&lt;li&gt;How do we best work with the upstream Android team?&lt;/li&gt;
&lt;li&gt;is packaging Android Studio feasible?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also hope to provide an example that any other packaging systems can learn from and build upon. GNU/Linux distros like Arch and Fedora are the obvious ones, but also projects like Homebrew, MacPorts, and Cygwin could also use this work to include Android tools as packages in their system. Indeed, some of the work already included in Debian was derived from &lt;a href=&#34;https://wiki.archlinux.org/index.php/Android#Android_SDK_core_components&#34; target=&#34;_blank&#34;&gt;some Arch packages&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Complete, reproducible app distribution achieved!</title>
      <link>https://guardianproject.github.io/info/2015/02/11/complete-reproducible-app-distribution-achieved/</link>
      <pubDate>Wed, 11 Feb 2015 14:51:22 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2015/02/11/complete-reproducible-app-distribution-achieved/</guid>
      <description>&lt;p&gt;With &lt;a href=&#34;https://f-droid.org&#34; target=&#34;_blank&#34;&gt;F-Droid&lt;/a&gt;, we have been working towards getting a complete app distribution channel that is able to reproducibly build each Android app from source. while this may sound like a mundane detail, it does provide lots of tangible benefits. First, it means that anyone can verify that the app that they are using is 100% built from the source code, with nothing else added. That verifies that the app is indeed 100% free, open source software.&lt;/p&gt;

&lt;p&gt;It also verifies that there have not been any malicious bits of code added into the app during the build process. As has been &lt;a href=&#34;https://www.youtube.com/watch?v=5pAen7beYNc&#34; target=&#34;_blank&#34;&gt;demonstrated&lt;/a&gt; in the &lt;a href=&#34;http://events.ccc.de/congress/2014/Fahrplan/events/6240.html&#34; target=&#34;_blank&#34;&gt;31c3 Reproducible Builds talk&lt;/a&gt;, just flipping a single bit is enough to create a usable exploit in an app.&lt;/p&gt;

&lt;p&gt;The F-Droid project is leading the way with its system for publishing verified builds. We know have our first full example, building upon our previous work with making &lt;a href=&#34;https://guardianproject.info/2014/06/09/our-first-deterministic-build-lil-debi-0-4-7/&#34; target=&#34;_blank&#34;&gt;Lil’ Debi build reproducibly&lt;/a&gt;. We started with our simple little utility app &lt;a href=&#34;https://github.com/guardianproject/checkey&#34; target=&#34;_blank&#34;&gt;Checkey&lt;/a&gt; since it has few moving parts (first get one working, then the rest).&lt;/p&gt;

&lt;p style=&#34;float: left&#34; &gt;
  &lt;a href=&#34;https://guardianproject.info/releases/Checkey-0.1.1.apk&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2015/02/ic_launcher-web.png&#34; alt=&#34;Checkey&#34; width=&#34;128&#34; height=&#34;128&#34; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p style=&#34;float: left; text-align: center; line-height: 128px; font-size: 1000%&#34; &gt;
  =
&lt;/p&gt;

&lt;p style=&#34;float: left&#34; &gt;
  &lt;a href=&#34;https://f-droid.org/repo/info.guardianproject.checkey_101.apk&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2015/02/ic_launcher-web.png&#34; alt=&#34;Checkey&#34; width=&#34;128&#34; height=&#34;128&#34; style=&#34;float: right&#34; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p style=&#34;clear: both;&#34;&gt;
  &lt;p&gt;
    When you download Checkey from f-droid.org, you will get an APK that was signed using the official Guardian Project offline signing key that was built by f-droid.org. No, we did not give them a copy of our key, instead, the fdroid publish process now looks for the Binaries: tag in the build recipe. If it sees that, it downloads that APK, then builds the app from source, then checks to make sure that they match using a simple diff of the APK contents and by checking that the signature on the official APK also validates on the APK that f-droid.org built.
  &lt;/p&gt;
  

&lt;p&gt;&lt;p&gt;
    Now that we have our little Checkey working, we can work towards getting all of our apps verifying in the same way, eliminating a whole field of exploits that we have to worry about. You can follow the progress of this work on the F-Droid wiki &lt;a href=&#34;https://f-droid.org/wiki/page/Deterministic,_Reproducible_Builds&#34; target=&#34;_blank&#34;&gt;Reproducible Builds&lt;/a&gt; page, and learn about a future application of it on the &lt;a href=&#34;https://f-droid.org/wiki/page/Verification_Server&#34; target=&#34;_blank&#34;&gt;Verification Server&lt;/a&gt; page.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    The next two apps that are in the reproducible pipeline are &lt;a href=&#34;https://leap.se/&#34; target=&#34;_blank&#34;&gt;LEAP&lt;/a&gt;‘s &lt;a href=&#34;https://gitlab.com/fdroid/fdroiddata/tree/master/metadata/se.leap.bitmaskclient.txt&#34; target=&#34;_blank&#34;&gt;Bitmask&lt;/a&gt; and our &lt;a href=&#34;https://gitlab.com/fdroid/fdroiddata/blob/master/metadata/info.guardianproject.locationprivacy.txt&#34; target=&#34;_blank&#34;&gt;LocationPrivacy&lt;/a&gt;.
  &lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Experimental app to improve privacy in location sharing</title>
      <link>https://guardianproject.github.io/info/2015/01/29/experimental-app-to-improve-privacy-in-location-sharing/</link>
      <pubDate>Thu, 29 Jan 2015 07:36:58 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2015/01/29/experimental-app-to-improve-privacy-in-location-sharing/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2015/01/ic_launcher-web.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2015/01/ic_launcher-web-300x300.png&#34; alt=&#34;ic_launcher-web&#34; width=&#34;300&#34; height=&#34;300&#34; class=&#34;alignright size-medium wp-image-12835&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2015/01/ic_launcher-web-300x300.png 300w, https://guardianproject.info/wp-content/uploads/2015/01/ic_launcher-web-150x150.png 150w, https://guardianproject.info/wp-content/uploads/2015/01/ic_launcher-web-270x270.png 270w, https://guardianproject.info/wp-content/uploads/2015/01/ic_launcher-web-230x230.png 230w, https://guardianproject.info/wp-content/uploads/2015/01/ic_launcher-web.png 512w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;As part of the T2 Panic effort, I’ve recently been diving deep into the issues of sharing location. It is unfortunately looking really bad, with many services, including Google, frequently sharing location as plain text over the network. I’ve started to write up some of the issues &lt;a href=&#34;https://guardianproject.github.io/info/tag/panic&#34;&gt;on this blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As part of this, I’ve put together an experimental Android app that aims to act as a privacy filter for all ways of sharing location. Mostly, that means it accepts all sorts of URLs from location services, and tries to parse the location from the URL, then rewrites it into a &lt;a href=&#34;http://geouri.org&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;geo:&lt;/code&gt; URI&lt;/a&gt;, which is the standard way to share location in Android (and hopefully soon all others). As of ChatSecure v14.1.0, these &lt;code&gt;geo:&lt;/code&gt; URLs are also clickable.&lt;/p&gt;

&lt;p&gt;Many URLs are not parsable, like &lt;code&gt;http://goo.gl/maps/Cji0V&lt;/code&gt;. LocationPrivacy then goes online and to try to fetch the location. This should happen over Tor, but it does not yet. You have been warned! Otherwise, it changes the URL to &lt;code&gt;HTTPS&lt;/code&gt; on services that support it.&lt;/p&gt;

&lt;p&gt;You can get LocationPrivacy from all the usual channels, including on FDroid in the Guardian Project repo:&lt;br /&gt;
&lt;a href=&#34;https://f-droid.org&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://f-droid.org&#34;&gt;https://f-droid.org&lt;/a&gt;&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://guardianproject.info/fdroid&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://guardianproject.info/fdroid&#34;&gt;https://guardianproject.info/fdroid&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or from Google Play:&lt;br /&gt;
&lt;a href=&#34;https://play.google.com/store/apps/details?id=info.guardianproject.locationprivacy&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=info.guardianproject.locationprivacy&#34;&gt;https://play.google.com/store/apps/details?id=info.guardianproject.locationprivacy&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source code:&lt;br /&gt;
&lt;a href=&#34;https://github.com/guardianproject/LocationPrivacy&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/guardianproject/LocationPrivacy&#34;&gt;https://github.com/guardianproject/LocationPrivacy&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Report issues here:&lt;br /&gt;
&lt;a href=&#34;https://dev.guardianproject.info/projects/panic/issues&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://dev.guardianproject.info/projects/panic/issues&#34;&gt;https://dev.guardianproject.info/projects/panic/issues&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Please do not rely on this app for strong privacy, it is still very much a new, beta app.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>First working test of IOCipher for Obj-C</title>
      <link>https://guardianproject.github.io/info/2015/01/26/first-working-test-of-iocipher-for-obj-c/</link>
      <pubDate>Mon, 26 Jan 2015 04:32:29 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2015/01/26/first-working-test-of-iocipher-for-obj-c/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://guardianproject.github.io/info/code/iocipher&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2012/10/alberti_cipher_disk-150x150.jpg&#34; alt=&#34;alberti cipher disk&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignright size-thumbnail wp-image-3079&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2012/10/alberti_cipher_disk-150x150.jpg 150w, https://guardianproject.info/wp-content/uploads/2012/10/alberti_cipher_disk.jpg 245w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;Every so often, we revisit our core libraries in the process of improving our existing apps, and creating new ones. IOCipher has become a standard part of our apps since it provides a really easy way to include encrypted file storage in Android apps. And we are now working on spreading it to iOS as well, headed up by Chris Ballinger, with the first preliminary tests of &lt;a href=&#34;https://github.com/ChatSecure/IOCipher-ObjC&#34; target=&#34;_blank&#34;&gt;IOCipher for Obj-C&lt;/a&gt;. Testing and contributions are most welcome! Find us in our &lt;a href=&#34;https://guardianproject.github.io/info/contact/&#34; target=&#34;_blank&#34;&gt;chat room or mailing list&lt;/a&gt; for questions, or just post a comment below! Since the iOS version is based on the exact same core library, libsqlfs, the container files they produce will also be fully compatible with each other.&lt;/p&gt;

&lt;p&gt;Now that iOS 8 has full disk encryption by default and a &lt;a href=&#34;https://www.blackbagtech.com/blog/2014/09/24/ios-8-and-its-impact-on-investigations&#34; title=&#34;iOS 8 and its Impact on Investigations&#34; target=&#34;_blank&#34;&gt;host of other security improvements&lt;/a&gt;, you might be wondering why you would bother with app-specific encryption. The problem with full disk encryption is that the disk is only locked when your iPhone is fully turned off. Using IOCipher adds protection for sensitive data that helps in a few different scenarios.&lt;/p&gt;

&lt;p&gt;First, full disk encryption does not protect the data at all if malware is able to get root on the device. That malware will be free to read all files on the device. Second, for people who have not set up a strong passphrase on their iOS device, using app-specific encrypted storage make it harder to access that app’s data on devices with no passcode set, especially if any additional passphrase is stored in the keychain and disallowed from backup, or if it’s just stored in your own memory.&lt;/p&gt;

&lt;p&gt;Third is for added protetion from forensic acquisition systems, which often work using root exploits in order to read the entire filesystem without unlocking the screen&lt;a href=&#34;https://www.elcomsoft.com/news/591.html&#34; target=&#34;_blank&#34;&gt;[1]&lt;/a&gt;&lt;a href=&#34;https://www.elcomsoft.com/news/586.html&#34; target=&#34;_blank&#34;&gt;[2]&lt;/a&gt;&lt;a href=&#34;http://www.htcia.org/2013/12/iphone-forensics-what-you-need-to-know/&#34; target=&#34;_blank&#34;&gt;[3]&lt;/a&gt;. By having an app-specific encrypted file container that is not mounted like a filesystem, then even root cannot directly access the files in the container. Even root needs to get the key in order to unlock the IOCipher container, whether it is in use or not, and getting that key means either a key logger, which means planning ahead, or reading they key from memory if the container is unlocked, which is a more elaborate and targeted attack that full disk acquisition after rooting.&lt;/p&gt;

&lt;p&gt;Now consider that there is a large market 0days, i.e. unpublished exploits, and companies like &lt;a href=&#34;https://netzpolitik.org/2014/gamma-finfisher-hacked-40-gb-of-internal-documents-and-source-code-of-government-malware-published/&#34; target=&#34;_blank&#34;&gt;VUPEN, FinFisher&lt;/a&gt;, and &lt;a href=&#34;https://citizenlab.org/2014/06/backdoor-hacking-teams-tradecraft-android-implant/&#34; target=&#34;_blank&#34;&gt;Hacking Team&lt;/a&gt; making it easy to purchase them, even providing guarantees that one of their exploits will work within 30 days, it seems quite likely that customers of such companies have access to secret root exploits to even iOS 8. While there are ethical and lawful reasons to use software like this, many governments are also using them for &lt;a href=&#34;https://www.eff.org/deeplinks/2012/02/spy-tech-companies-their-authoritarian-customers-part-i-finfisher-and-amesys&#34; target=&#34;_blank&#34;&gt;illegal&lt;/a&gt; &lt;a href=&#34;http://www.economist.com/blogs/pomegranate/2014/07/internet-monitoring-gulf&#34; target=&#34;_blank&#34;&gt;and&lt;/a&gt; &lt;a href=&#34;http://www.theguardian.com/technology/2014/sep/16/wikileaks-finfisher-files-malware-surveillance&#34; target=&#34;_blank&#34;&gt;unethical&lt;/a&gt; &lt;a href=&#34;https://citizenlab.org/2013/03/you-only-click-twice-finfishers-global-proliferation-2/&#34; target=&#34;_blank&#34;&gt;things&lt;/a&gt;. Since we believe that everyone has a right to privacy, to speak freely, and to peaceably protest, it is important to provide protection to people who are unfairly targeted.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.zetetic.net/sqlcipher/open-source/&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2010/05/skitch.png&#34; alt=&#34;SQLCipher&#34; width=&#34;64&#34; height=&#34;72&#34; class=&#34;alignleft size-full wp-image-3613&#34; /&gt;&lt;/a&gt;There is also another key advantage of the IOCipher approach when it comes to mobile devices. IOCipher is ultimately based on SQLite transactions in &lt;a href=&#34;https://www.zetetic.net/sqlcipher/&#34; target=&#34;_blank&#34;&gt;SQLCipher&lt;/a&gt;, which means that it does not require being mounted in the normal sense. There is no open state once a transaction is complete. Each read or write operation is a self-contained SQLite transaction, so if the file system is forcably quit, SQLite’s transactions prevent the whole file system from being corrupted. This is important in mobile operating systems like Android and iOS since any app or process can be killed at any moment without warning. That means that the worst that can happen to an IOCipher volume is a single write command does not get written. The whole file system will not be corrupted if the process is killed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Coming Soon&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When IOCipher is used in conjunction with our &lt;a href=&#34;https://github.com/guardianproject/CacheWord&#34; target=&#34;_blank&#34;&gt;CacheWord&lt;/a&gt; library, it is possible for an app to provide protection even against the &lt;a href=&#34;https://xkcd.com/538/&#34; target=&#34;_blank&#34;&gt;$5 wrench attack&lt;/a&gt;. CacheWord generates a strong passphrase and manages feeding it to IOCipher and SQLCipher. The user provides their own password for encrypting that strong passphrase. That CacheWord file is tiny, and can be rapidly deleted. Once it is gone, the actual passphrase that unlocks the IOCipher encryption is gone, the user’s passphrase will not unlock IOCipher directly. This is something we are working to add in all of our apps, and to also hook it up to panic button triggers. We would be quite happy to see you beat us to it by adding this feature to your app!&lt;/p&gt;

&lt;p&gt;IOCipher with a hardware security module (HSM) aka smartcard would be really nice, since it would provide some measure of added protection without the user setting an app-specific passphrase. HSMs provide write-only private key storage locked by pin code, so even if some was able to get the encrypted file and the pincode, they would not be able to retrieve the key to unlock the encrypted file. The only way to unlock the file would be with the physical device itself, or by finding the key backup, if that existed. This is possible now using an external &lt;a href=&#34;http://www.smartcard-hsm.com/features.html&#34; target=&#34;_blank&#34;&gt;microSD&lt;/a&gt; &lt;a href=&#34;http://www.go-trust.com/nist-adds-go-trusts-sdencrypter-microsd-hsm-to-the-in-process-fips-140-2-module-validation-list/&#34; target=&#34;_blank&#34;&gt;HSM&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sharing your location privately</title>
      <link>https://guardianproject.github.io/info/2015/01/23/sharing-your-location-privately/</link>
      <pubDate>Fri, 23 Jan 2015 15:00:10 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2015/01/23/sharing-your-location-privately/</guid>
      <description>&lt;div id=&#34;attachment_12774&#34; style=&#34;width: 298px&#34; class=&#34;wp-caption alignright&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2015/01/facebook-messenger-shared-location.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12774&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2015/01/facebook-messenger-shared-location-576x1024.png&#34; alt=&#34;Facebook location sharing embeds the location in every single message, providing a detailed log to the recipient, Facebook, and anyone Facebook shares that data with&#34; width=&#34;288&#34; height=&#34;512&#34; class=&#34;size-large wp-image-12774&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2015/01/facebook-messenger-shared-location.png 576w, https://guardianproject.info/wp-content/uploads/2015/01/facebook-messenger-shared-location-169x300.png 169w&#34; sizes=&#34;(max-width: 288px) 100vw, 288px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-12774&#34; class=&#34;wp-caption-text&#34;&gt;
    Facebook location sharing embeds the location in every single message, providing a detailed log to the recipient, Facebook, and anyone Facebook shares that data with
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;One handy feature that many smartphones give us is the ability to easily share our exact position with other people. You can see this feature in a lot of apps. Google Maps lets you click “Share” and send a URL via any method you have available. In Facebook Messenger, you can click a button and the people on the other side of the chat will receive a little embedded map showing the received location. Of course, the question we always ask is: how can we do this in a privacy-preserving way? And the follow up question: what kinds of information are apps leaking, storing, using, etc? Location is especially valuable and sensitive metadata, especially when there is a lot of it, because it can be used to derive so much information about a person. Most people do not want to publicly post their phone number or home address on the internet, yet are unwittingly giving away far more detailed information by using the various location-based services that are available. There is a lot of specific location information that people do not want to publicize that they visit: a cancer specialist, an abortion clinic, a criminal court, a mistress’ house, or any location information to an abusive spouse. For a great illustration of the power of location metadata, you can watch &lt;a href=&#34;http://www.zeit.de/datenschutz/malte-spitz-data-retention&#34; target=&#34;_blank&#34;&gt;an animation of German politician Malte Spitz’s life, based on his telephone metadata that his telecom had stored&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Google, Facebook, and so many others make money by collecting as much data on their users as possible, then selling access to that data to their customers. So both those companies have incentives to make sure that you will always share your location information with them as well. The question is: are they treating this information as carefully as you would? In China, the indigenous services are much more popular than most foreign alternatives. The Chinese companies are good at making products that are popular with Chinese users, and since they collaborate with the government censorship and tracking, it is easier for them to do business in China. This combination often means that Chinese companies put security and privacy at a very low priority, even though they could comply with the Chinese law while improving their security. A good example of this is the fact that none of the major map providers in China (Baidu, Amap, or QQ) provide even an optional HTTPS interface. They only have unencrypted communications, which allows lots of people easy access to snooping, including anyone who is on the same wifi network as you are.&lt;/p&gt;

&lt;p&gt;The tools for tracking people via location data are getting better, cheaper, and more available. One funny example is &lt;a href=&#34;https://iknowwhereyourcatlives.com/&#34; target=&#34;_blank&#34;&gt;I Know Where Your Cat Lives&lt;/a&gt;, which shows the locations of cat pictures found on the public internet via the geo location included in the EXIF image data.&lt;/p&gt;

&lt;div id=&#34;attachment_12793&#34; style=&#34;width: 310px&#34; class=&#34;wp-caption alignright&#34;&gt;
  &lt;a href=&#34;https://iknowwhereyourcatlives.com&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12793&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2015/01/i-know-where-your-cat-lives-300x188.jpg&#34; alt=&#34;I know where your cat lives!&#34; width=&#34;300&#34; height=&#34;188&#34; class=&#34;size-medium wp-image-12793&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2015/01/i-know-where-your-cat-lives-300x188.jpg 300w, https://guardianproject.info/wp-content/uploads/2015/01/i-know-where-your-cat-lives.jpg 768w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-12793&#34; class=&#34;wp-caption-text&#34;&gt;
    I know where your cat lives!
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Location and Panic&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One use that we are particularly interested in is sending location to trusted contacts when a panic button is pressed. When thinking about panic button features, privacy must be a central concern. When someone triggers their panic button, it is clearly a sensitive situation. That means that leaking more location information could exacerabate the situation. Since sending location is a useful and popular feature, it is important to consider the whole picture of where that location information might go. To start with, the panic message needs to be sent using a method that will reliably reach its intended destination. Unfortunately, that often means using insecure communications like SMS, or an app that is fully tapped by the same government that is detaining the user, like WeChat. Part of this T2 Panic research and development effort is focused on how to make a complete, secure panic solution. So we will also focus on making ChatSecure and other secure communications an available channel for sending panic messages.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://panicbutton.io&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2015/01/activate1-150x150.jpg&#34; alt=&#34;activate1&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignleft size-thumbnail wp-image-12805&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2015/01/activate1-150x150.jpg 150w, https://guardianproject.info/wp-content/uploads/2015/01/activate1-270x270.jpg 270w, https://guardianproject.info/wp-content/uploads/2015/01/activate1-230x230.jpg 230w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;The next step is to break down the entire path of where that location information might be intercepted. The first place is on the sending device itself. The panic message will stored with the sent messages with most communications apps, and that can recovered by whoever is detaining the user. Even if the device is encrypted, it is very likely the user can be compelled to unlock the device. So the panic message should be designed with that in mind.&lt;/p&gt;

&lt;p&gt;So if we consider a fully anonymous method of communication, like ChatSecure’s “Secret Identity”, then protecting the location information becomes important even if all of the messages and their recipients are recovered from the sending device. The full “Secret Identity” procedure of creating an account per person you want to chat with, and only using that single account to communicate with that other person. It has been outlined by many people, including Laura Poitras when describing how she communicates with Edward Snowden. In this case, even if someone recovers the recipient address, all they will have is an anonymously created account with no other links to other accounts. Then location URL then becomes a way to deanonymize the recipient. First, if the URL takes the recipient to an unencrypted connection, then that it is easy to track. Even with an encrypted connection, if the server providing the map service is providing information to the government, then the encrypted connection will not help. Making this connection over Tor will also help since the map service will not be able to see the IP address of the device where the user clicked on this URL. Now consider a location URL using Google Maps, or any similar service where users frequently login. If the original panic message was sent using such a URL, and the recipient was a regular user of a service that used logins, then that login information would deanonymize the recipient if they viewed the location URL in a browser where they were also logged in with their normal Google account.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;User Stories&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This can perhaps be better illustrated using some quick user stories:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A journalist and a source set up Secret Identities in ChatSecure devoted to each other when they met up in person. Each have panic buttons set up to contact the other in case of emergency. The journalist uses &lt;a href=&#34;https://openstreetmap.org&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;http&lt;strong&gt;s&lt;/strong&gt;://openstreetmap.org&lt;/code&gt;&lt;/a&gt; to generate a shortlink that points to the chosen meeting location, then sends it to the source using the Secret Identity, &lt;a href=&#34;http://osm.org/go/0ju_SMlBn&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;&lt;a href=&#34;http://osm.org/go/0ju_SMlBn&#34;&gt;http://osm.org/go/0ju_SMlBn&lt;/a&gt;&lt;/code&gt;&lt;/a&gt;. The source clicks the link, and chooses to open the link in Firefox. Therefore, the website is shown using an unencrypted, direct connection, which is easily observed. Even though the recipient has HTTPS Everywhere set up in his browser to force HTTPS for openstreetmap.org, the osm.org shortlink does not currently have working HTTPS so it is an HTTP link. This shortlink is now a unique ID that links the journalist and source’s real IP address. If the source was using a cellular internet connection, then this will also link the IP address to the devices IMEI unique ID. The IMEI is then quite easy to link to a real identity information.&lt;/li&gt;
&lt;li&gt;A circle of activists all set each other up with a panic button app on burner Android phones. They only use these burner phones to communicate with each other. They prepare in advance to discard all the phones in case someone triggers the panic. One activitist gets detained by the secret police and triggers the panic. The secret police get the panic message and all the other phone numbers from the detainee’s phone, but the activists are no longer using those phones so they cannot be tracked by them. The activists manually copy the Google Maps shortlink &lt;a href=&#34;https://goo.gl/maps/Cji0V&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;&lt;a href=&#34;https://goo.gl/maps/Cji0V&#34;&gt;https://goo.gl/maps/Cji0V&lt;/a&gt;&lt;/code&gt;&lt;/a&gt; to their computer to find out where the detainee is. They type the map link into Internet Explorer, making sure to type HTTPS, and then again confirm that the webpage is still using an HTTPS link. What they did not see is that the shortlink first redirected to a HTTP link &lt;a href=&#34;http://maps.google.com/?q=28.118860,98.008069&amp;hl=en&amp;gl=us&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;&lt;a href=&#34;http://maps.google.com/?q=28.118860,98.008069&amp;amp;hl=en&amp;amp;gl=us&#34;&gt;http://maps.google.com/?q=28.118860,98.008069&amp;amp;hl=en&amp;amp;gl=us&lt;/a&gt;&lt;/code&gt;&lt;/a&gt;, which leaked the location in plain text. Since this URL describes a very specific point, the secret police use this as a data point to search for the IP address of all devices that have accessed that URL. Those IP addresses divulge the locations of all the activists who viewed the map URL, and provide the secret police a method for tracking them all.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I did not cover other more common use cases here because there are so many leaks that the protections presented are moot. All is not lost, there is still a lot that you can do to improve things. First off, we recommend using map apps that can work fully offline. For Android, &lt;a href=&#34;https://play.google.com/store/apps/details?id=net.osmand&#34; target=&#34;_blank&#34;&gt;Osmand&lt;/a&gt; is the best one out there, it uses OpenStreetMap data which can be freely downloaded. It is also important to encourage developers to improve the privacy of their apps. Since we are software developers, we file bug reports and make pull requests to nag location-related projects to improve their security. Here are some recent examples of what we have contributed:&lt;/p&gt;

&lt;p&gt;OpenStreetMap&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Issue #799: &lt;a href=&#34;https://github.com/openstreetmap/openstreetmap-website/issues/799&#34; target=&#34;_blank&#34;&gt;Implement &lt;code&gt;geo:&lt;/code&gt; URLs for sharing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Issue #870: &lt;a href=&#34;https://github.com/openstreetmap/openstreetmap-website/issues/870&#34; target=&#34;_blank&#34;&gt;share makes HTTP url even when connecting via HTTPS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Issue #862: &lt;a href=&#34;https://github.com/openstreetmap/openstreetmap-website/issues/862&#34; target=&#34;_blank&#34;&gt;support osm.org in HTTPS certificate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Osmand&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Pull #1033: &lt;a href=&#34;https://github.com/osmandapp/Osmand/pull/1033&#34; target=&#34;_blank&#34;&gt;modernize location sharing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pull #1043: &lt;a href=&#34;https://github.com/osmandapp/Osmand/pull/1043&#34; target=&#34;_blank&#34;&gt;add support for a proxy and use more HTTPS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pull #1045: &lt;a href=&#34;https://github.com/osmandapp/Osmand/pull/1045&#34; target=&#34;_blank&#34;&gt;update URL parsing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will be following up with further posts on this topic with more detail, including research into what is possible to derive from location data, technical details of issues, and possible solutions and work that can be done to improve things.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CipherKit updates: IOCipher and CacheWord</title>
      <link>https://guardianproject.github.io/info/2014/09/26/cipherkit-updates-iocipher-and-cacheword/</link>
      <pubDate>Fri, 26 Sep 2014 21:39:54 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2014/09/26/cipherkit-updates-iocipher-and-cacheword/</guid>
      <description>

&lt;p&gt;We’ve been on a big kick recently, updating the newest members of our CipherKit family of frameworks: &lt;a href=&#34;https://guardianproject.github.io/info/code/iocipher&#34;&gt;IOCipher&lt;/a&gt; and &lt;a href=&#34;https://github.com/guardianproject/cacheword&#34; target=&#34;_blank&#34;&gt;CacheWord&lt;/a&gt;. There also are is a little news about the original CipherKit framework: &lt;a href=&#34;https://www.zetetic.net/sqlcipher/open-source&#34; title=&#34;SQLCipher for Android&#34; target=&#34;_blank&#34;&gt;SQLCipher-for-Android&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;iocipher-v0-2&#34;&gt;IOCipher v0.2&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.github.io/info/code/iocipher&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2012/10/alberti_cipher_disk-150x150.jpg&#34; alt=&#34;alberti cipher disk&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignright size-thumbnail wp-image-3079&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2012/10/alberti_cipher_disk-150x150.jpg 150w, https://guardianproject.info/wp-content/uploads/2012/10/alberti_cipher_disk.jpg 245w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;IOCipher is a library for storing files in an encrypted virtual disk. It’s API is the exact same as &lt;code&gt;java.io&lt;/code&gt; for working with files, and it does not need root access. That makes it the sibling of SQLCipher-for-Android, both are native Android APIs that wrap the SQLCipher database.&lt;/p&gt;

&lt;p&gt;This round of work focused on making IOCipher more reliable and secure, and easy to integrate with CacheWord. It can now handle files up to 4GB in size, the same as FAT filesystems, and it has much improved performance, especially under concurrent load. There is now also an &lt;code&gt;unmount()&lt;/code&gt; method to lock the database and wipe the key from memory. The central &lt;code&gt;VirtualFileSystem&lt;/code&gt; class is now a singleton, since you can only have a single virtual disk open at a time. Lastly, the IOCipher release now includes binaries for &lt;code&gt;armeabi&lt;/code&gt;, &lt;code&gt;armeabi-v7a&lt;/code&gt;, and &lt;code&gt;x86&lt;/code&gt;. IOCipher v0.2 was built against SQLCipher-for-Android v3.1.0, and that is the minimum recommended version to use.&lt;/p&gt;

&lt;p&gt;Find downloads, example projects, test suites, and more on &lt;a href=&#34;https://guardianproject.github.io/info/code/iocipher&#34;&gt;the IOCipher page&lt;/a&gt;. Follow the development on the &lt;a href=&#34;https://dev.guardianproject.info/projects/iocipher&#34; target=&#34;_blank&#34;&gt;IOCipher project page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;cacheword-v0-1&#34;&gt;CacheWord v0.1&lt;/h2&gt;

&lt;p&gt;Once you are using SQLCipher and IOCipher, then you’ll definitely need to do some password management, and password caching too, since no one wants to type their password again every time they come to an app. That is where CacheWord comes in: it is a library for managing passwords, and it is designed easily feed directly into SQLCipher and IOCipher, or really anything that needs secure password caching.&lt;/p&gt;

&lt;p&gt;Most of this update was about making CacheWord ready to deploy. That means fixing bugs and drastically simplifying it’s dependencies. CacheWord now can be used as a plain jar file or an Android Library Project, and it only depends on &lt;code&gt;android-support-v4.jar&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Part of the process of simplifying CacheWord also involved stripping down the API to only want CacheWord should really handle. The standard API is all in the CacheWordHandler class. So that means that your app has to handle any Notification, and pass it to CacheWord if you want CacheWordService to run in the foreground.&lt;/p&gt;

&lt;p&gt;CacheWord also now dynamically chooses how many iterations of the key derivation function based on the CPU type. That means that new, fast devices, the derived key will be a lot stronger, while on slow, old devices, it won’t take a minute to unlock your app.&lt;/p&gt;

&lt;p&gt;Find downloads, example projects, and more on &lt;a href=&#34;https://guardianproject.github.io/info/code/cacheword&#34;&gt;the CacheWord page&lt;/a&gt;. Follow the development on the &lt;a href=&#34;https://dev.guardianproject.info/projects/cacheword&#34; target=&#34;_blank&#34;&gt;CacheWord project page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;sqlcipher&#34;&gt;SQLCipher&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.zetetic.net/sqlcipher/&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2010/05/skitch.png&#34; alt=&#34;SQLCipher&#34; width=&#34;64&#34; height=&#34;72&#34; class=&#34;alignright size-full wp-image-3613&#34; /&gt;&lt;/a&gt;The upcoming release of SQLCipher-for-Android also has been simplified. It will no longer depend on commons-codec.jar or guava-r09.jar (thanks to Jeff Campbell for submitting those commits!), remove ~8000 methods for those who fear running into the 65k method limit of the classes.dex file. We’ve been working on making the build process be reproducible, so that anyone can verify that the official releases are built only from the source in the git repo, and nothing else has been added. We’re also working on moving the password format conversion code out of CacheWord and into SQLCipher, where it belongs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing TrustedIntents for Android</title>
      <link>https://guardianproject.github.io/info/2014/07/30/introducing-trustedintents-for-android/</link>
      <pubDate>Wed, 30 Jul 2014 23:29:23 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2014/07/30/introducing-trustedintents-for-android/</guid>
      <description>

&lt;p&gt;Following up on &lt;a href=&#34;https://guardianproject.info/2014/01/21/improving-trust-and-flexibility-in-interactions-between-android-apps/&#34;&gt;our research on secure Intent interactions&lt;/a&gt;, we are now announcing the first working version of the &lt;a href=&#34;https://github.com/guardianproject/TrustedIntents&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;TrustedIntents&lt;/em&gt;&lt;/a&gt; library for Android. It provides methods for checking any Intent for whether the sending and receiving app matches a specified set of trusted app providers. It does this by “pinning” to the signing certificate of the APKs. The developer includes this “pin” in the app, which includes the signing certificate to trust, then &lt;em&gt;TrustedIntents&lt;/em&gt; checks &lt;code&gt;Intent&lt;/code&gt;s against the configured certificate pins. The library includes pins for the Guardian Project and Tor Project signing certificates. It is also easy to generate the pin using our new utility &lt;a href=&#34;https://github.com/guardianproject/checkey&#34; target=&#34;_blank&#34;&gt;Checkey&lt;/a&gt; (available in &lt;a href=&#34;https://guardianproject.info/2014/06/30/new-official-guardian-project-app-repo-for-fdroid/&#34; target=&#34;_blank&#34;&gt;our FDroid repo&lt;/a&gt; and in &lt;a href=&#34;https://play.google.com/store/apps/details?id=info.guardianproject.checkey&#34; target=&#34;_blank&#34;&gt;Google Play&lt;/a&gt;).&lt;/p&gt;

&lt;div id=&#34;attachment_12560&#34; style=&#34;width: 310px&#34; class=&#34;wp-caption alignright&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2014/07/checkey-phone.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12560&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2014/07/checkey-phone-300x168.png&#34; alt=&#34;Checkey displaying the signing certificate of ChatSecure&#34; width=&#34;300&#34; height=&#34;168&#34; class=&#34;size-medium wp-image-12560&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2014/07/checkey-phone-300x168.png 300w, https://guardianproject.info/wp-content/uploads/2014/07/checkey-phone-1024x576.png 1024w, https://guardianproject.info/wp-content/uploads/2014/07/checkey-phone-100x56.png 100w, https://guardianproject.info/wp-content/uploads/2014/07/checkey-phone-150x84.png 150w, https://guardianproject.info/wp-content/uploads/2014/07/checkey-phone-200x112.png 200w, https://guardianproject.info/wp-content/uploads/2014/07/checkey-phone-450x253.png 450w, https://guardianproject.info/wp-content/uploads/2014/07/checkey-phone-600x337.png 600w, https://guardianproject.info/wp-content/uploads/2014/07/checkey-phone-900x506.png 900w, https://guardianproject.info/wp-content/uploads/2014/07/checkey-phone.png 1280w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-12560&#34; class=&#34;wp-caption-text&#34;&gt;
    Checkey displaying the signing certificate of ChatSecure
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;We hope to make this process as dead simple as possible by providing developers with this library. &lt;em&gt;TrustedIntents&lt;/em&gt; is currently set up as an “Android Library Project” but it could easily be a jar too, the code is currently quite simple, the plan is to add more convenience methods and also support for TOFU/POP in addition to pinning. For usage examples, check out &lt;a href=&#34;https://github.com/guardianproject/TrustedIntentsExample&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;TrustedIntentsExample&lt;/em&gt;&lt;/a&gt; and the test project under the test/ subdir of the &lt;em&gt;TrustedIntents&lt;/em&gt; library source repo.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;TrustedIntents&lt;/em&gt; source: &lt;a href=&#34;https://github.com/guardianproject/TrustedIntents&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/guardianproject/TrustedIntents&#34;&gt;https://github.com/guardianproject/TrustedIntents&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;example project: &lt;a href=&#34;https://github.com/guardianproject/TrustedIntentsExample&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/guardianproject/TrustedIntentsExample&#34;&gt;https://github.com/guardianproject/TrustedIntentsExample&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;wiki, issue tracker, etc: &lt;a href=&#34;https://dev.guardianproject.info/projects/trustedintents/wiki&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://dev.guardianproject.info/projects/trustedintents/wiki&#34;&gt;https://dev.guardianproject.info/projects/trustedintents/wiki&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Checkey&lt;/em&gt; source: &lt;a href=&#34;https://github.com/guardianproject/Checkey&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/guardianproject/Checkey&#34;&gt;https://github.com/guardianproject/Checkey&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Checkey&lt;/em&gt; includes a simple method for generating the certificate pins. The pin is in the format of Java subclass of &lt;code&gt;ApkSignaturePin&lt;/code&gt;, which provides all needed utility functions. The create the pin file, first install the app whose certificate you want to trust. Be sure to get it from a trusted source since you are going to be trusting the signing certificate of the APK that you have installed. Launch &lt;em&gt;Checkey&lt;/em&gt; and select that app in the list, you will see the certificate details show up on the top. To generate the .java file for pinning Intents, select &lt;strong&gt;Generate Pin&lt;/strong&gt; from the menu and send the resulting file to yourself. That file is the pin, include it in your project, then load it into TrustedIntents by doing in &lt;code&gt;onCreate()&lt;/code&gt; or wherever is appropriate:&lt;br /&gt;
&lt;code&gt;&amp;lt;br /&amp;gt;
TrustedIntents ti = TrustedIntents.get(context);&amp;lt;br /&amp;gt;
ti.isTrustedSigner(MySigningCertificatePin.class);&amp;lt;br /&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;div id=&#34;attachment_12565&#34; style=&#34;width: 610px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2014/07/checkey-generate-pin.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12565&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2014/07/checkey-generate-pin.png&#34; alt=&#34;How to generate a pin file with Checkey&#34; width=&#34;600&#34; height=&#34;444&#34; class=&#34;size-medium wp-image-12565&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2014/07/checkey-generate-pin-300x222.png 300w, https://guardianproject.info/wp-content/uploads/2014/07/checkey-generate-pin-100x74.png 100w, https://guardianproject.info/wp-content/uploads/2014/07/checkey-generate-pin-150x111.png 150w, https://guardianproject.info/wp-content/uploads/2014/07/checkey-generate-pin-200x148.png 200w, https://guardianproject.info/wp-content/uploads/2014/07/checkey-generate-pin-450x334.png 450w, https://guardianproject.info/wp-content/uploads/2014/07/checkey-generate-pin-600x445.png 600w&#34; sizes=&#34;(max-width: 600px) 100vw, 600px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-12565&#34; class=&#34;wp-caption-text&#34;&gt;
    How to generate a pin file with Checkey
  &lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&#34;gathering-all-the-edge-cases&#34;&gt;Gathering all the edge cases&lt;/h3&gt;

&lt;p&gt;One of the things I’ve focused on in the &lt;em&gt;TrustedIntents&lt;/em&gt; library is thinking about all the possible edge cases and how to check for them. It is rare that the main part of a security check algorithm fails, its almost always the edge cases that are the gotcha.&lt;/p&gt;

&lt;p&gt;One example: &lt;em&gt;TrustedIntents&lt;/em&gt; should properly check all signing certificates on an APK. From what I’ve seen, it is rare that APKs are signed by more than one certificate, but the spec allows for that. There might be exploits related to not handling that.&lt;/p&gt;

&lt;p&gt;Another thing is that &lt;em&gt;TrustedIntents&lt;/em&gt; uses the method that the Android code uses for comparing signatures: it does a byte-by-byte comparison of the signature byte arrays. Some apps area already doing something similar based on the hash of the signing certificate (i.e. the “fingerprint”). The Android technique will also be faster than hashing since the hash algorithm has to read the whole signature byte array anyway.&lt;/p&gt;

&lt;p&gt;We’d love to have feedback, flames, comments, etc on any and all of this. &lt;a href=&#34;https://guardianproject.info/contact/&#34;&gt;Let us know&lt;/a&gt; how it works for you!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Official Guardian Project app repo for FDroid!</title>
      <link>https://guardianproject.github.io/info/2014/06/30/new-official-guardian-project-app-repo-for-fdroid/</link>
      <pubDate>Mon, 30 Jun 2014 20:26:39 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2014/06/30/new-official-guardian-project-app-repo-for-fdroid/</guid>
      <description>

&lt;p&gt;We now have an official &lt;a href=&#34;https://f-droid.org&#34; target=&#34;_blank&#34;&gt;FDroid&lt;/a&gt; app repository that is available via three separate methods, to guarantee access to a trusted distribution channel throughout the world! To start with, you must have FDroid installed. Right now, I recommend using the latest test release since it has support for Tor and .onion addresses (earlier versions should work for non-onion addresses):&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://f-droid.org/repo/org.fdroid.fdroid_710.apk&#34;&gt;https://f-droid.org/repo/org.fdroid.fdroid_710.apk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to add this repo to your FDroid config, you can either click directly on these links on your devices and FDroid will recognize them, or you can click on them on your desktop, and you will be presented with a QR Code to scan. Here are your options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTPS: &lt;a href=&#34;https://guardianproject.info/fdroid/repo?fingerprint=B7C2EEFD8DAC7806AF67DFCD92EB18126BC08312A7F2D6F3862E46013C7A6135&#34;&gt;https://guardianproject.info/fdroid/repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tor Hidden Service aka onion address: &lt;a href=&#34;http://bdf2wcxujkg6qqff.onion/fdroid/repo?fingerprint=B7C2EEFD8DAC7806AF67DFCD92EB18126BC08312A7F2D6F3862E46013C7A6135&#34;&gt;http://bdf2wcxujkg6qqff.onion/fdroid/repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Amazon AWS S3 Bucket (&lt;em&gt;this does not show up in a browser&lt;/em&gt;): &lt;a href=&#34;https://s3.amazonaws.com/guardianproject/fdroid/repo?fingerprint=B7C2EEFD8DAC7806AF67DFCD92EB18126BC08312A7F2D6F3862E46013C7A6135&#34;&gt;https://s3.amazonaws.com/guardianproject/fdroid/repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From here on out, our old FDroid repo (&lt;a href=&#34;https://guardianproject.info/repo&#34;&gt;https://guardianproject.info/repo&lt;/a&gt;) is considered deprecated and will no longer be updated. It will eventually be removed. Update to the new one!&lt;/p&gt;

&lt;p&gt;Also, if you missed it before, all of our test builds are also &lt;a href=&#34;https://guardianproject.info/2014/06/06/automatic-private-distribution-of-our-test-builds/&#34;&gt;available for testing only via FDroid&lt;/a&gt;. Just remember, the builds in the test repo are only debug builds, not fully trusted builds, so use them for testing only.&lt;/p&gt;

&lt;h3 id=&#34;automate-it-all&#34;&gt;Automate it all!&lt;/h3&gt;

&lt;p&gt;This setup has three distribution channels that are all mirrors of a repo that is generated on a fully offline machine. This is only manageable because of lots of new automation features in the &lt;a href=&#34;https://gitlab.com/fdroid/fdroidserver&#34; target=&#34;_blank&#34;&gt;fdroidserver&lt;/a&gt; tools for building and managing app repos. You can now set up a USB thumb drive as the automatic courier for shuffling the repo from the offline machine to an online machine. The repo is generated, updated, and signed using &lt;code&gt;fdroid update&lt;/code&gt;, then those signed files are synced to the USB thumb drive using &lt;code&gt;fdroid server update&lt;/code&gt;. Then the online machine syncs the signed files from that USB thumb drive to multiple servers via SSH and Amazon S3 with a single command: &lt;code&gt;fdroid server update&lt;/code&gt;. The magic is in setting up the config options and letting the tools do the rest.&lt;/p&gt;

&lt;h3 id=&#34;new-repo-signing-key&#34;&gt;New Repo Signing Key&lt;/h3&gt;

&lt;p&gt;For part of this, I’ve completed the process of generating a new, fully offline fdroid &lt;a href=&#34;https://guardianproject.info/home/signing-keys/&#34;&gt;signing key&lt;/a&gt;. So that means there is a new signing key for the FDroid repo, and the old repo signing key is being retired.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://guardianproject.info/releases/guardianproject-rsa4096-fdroid-repo-signing-key.pem&#34;&gt;guardianproject-rsa4096-fdroid-repo-signing-key.pem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://guardianproject.info/releases/guardianproject-rsa4096-fdroid-repo-signing-key.pem.sig&#34;&gt;guardianproject-rsa4096-fdroid-repo-signing-key.pem.sig&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The fingerprints for this signing key are:&lt;/p&gt;

&lt;pre&gt;Owner: EMAILADDRESS=root@guardianp&amp;#x72;&amp;#x6f;&amp;#x6a;&amp;#x65;&amp;#x63;&amp;#x74;&amp;#x2e;&amp;#x69;&amp;#x6e;&amp;#x66;&amp;#x6f;, CN=guardianproject.info, O=Guardian Project, OU=FDroid Repo, L=New York, ST=New York, C=US
Issuer: &amp;#x45;&amp;#x4d;&amp;#x41;ILADD&amp;#x52;&amp;#x45;&amp;#x53;&amp;#x53;=roo&amp;#x74;&amp;#x40;&amp;#x67;&amp;#x75;ardi&amp;#x61;&amp;#x6e;&amp;#x70;&amp;#x72;oject&amp;#x2e;&amp;#x69;&amp;#x6e;&amp;#x66;o, CN=guardianproject.info, O=Guardian Project, OU=FDroid Repo, L=New York, ST=New York, C=US
Serial number: a397b4da7ecda034
Valid from: Thu Jun 26 15:39:18 EDT 2014 until: Sun Nov 10 14:39:18 EST 2041
Certificate fingerprints:
 MD5:  8C:BE:60:6F:D7:7E:0D:2D:B8:06:B5:B9:AD:82:F5:5D
 SHA1: 63:9F:F1:76:2B:3E:28:EC:CE:DB:9E:01:7D:93:21:BE:90:89:CD:AD
 SHA256: B7:C2:EE:FD:8D:AC:78:06:AF:67:DF:CD:92:EB:18:12:6B:C0:83:12:A7:F2:D6:F3:86:2E:46:01:3C:7A:61:35
 Signature algorithm name: SHA1withRSA
 Version: 1
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Our first deterministic build: Lil’ Debi 0.4.7</title>
      <link>https://guardianproject.github.io/info/2014/06/09/our-first-deterministic-build-lil-debi-0.4.7/</link>
      <pubDate>Mon, 09 Jun 2014 16:41:34 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2014/06/09/our-first-deterministic-build-lil-debi-0.4.7/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://abyss.uoregon.edu/~js/ast123/lectures/lec05.html&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2014/06/determinism.gif&#34; alt=&#34;determinism&#34; width=&#34;206&#34; height=&#34;138&#34; class=&#34;alignright size-thumbnail wp-image-12493&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We just released Lil’ Debi 0.4.7 into the &lt;a href=&#34;https://play.google.com/store/apps/details?id=info.guardianproject.lildebi&#34; target=&#34;_blank&#34;&gt;Play Store&lt;/a&gt; and &lt;a href=&#34;https://f-droid.org/repository/browse/?fdid=info.guardianproject.lildebi&#34; target=&#34;_blank&#34;&gt;f-droid.org&lt;/a&gt;. It is not really different than the 0.4.6 release except in has a new, important property: the APK contents can be reproduced on other machines to the extent that the APK signature can be swapped between the official build and builds that other people have made from source, and this will still be installable. This is known as a “deterministic build” or “reproducible build”: the build process is deterministic, meaning it runs the same way each time, and that results in an APK that is reproducible by others using only the source code. There are some limitations to this, like it has to be built using similar versions of the OpenJDK 1.7 and other build tools, for example. But this process should work on any recent version of Debian or Ubuntu. Please try the process yourself, and let us know if you can verify or not:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/guardianproject/lildebi/wiki/Deterministic-Builds&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/guardianproject/lildebi/wiki/Deterministic-Builds&#34;&gt;https://github.com/guardianproject/lildebi/wiki/Deterministic-Builds&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The ultimate goal here is to make a process that reproduces the APK exactly, bit-for-bit, so that the anyone who runs the process will end up with an APK that has the exact same hash sum. As far as I can tell, the only thing that needs to be fixed in Lil’ Debi’s process is the timestamps in the ZIP format that is the APK container.&lt;/p&gt;

&lt;p&gt;There are a number of other parallel efforts. The Tor Project has written a lot about &lt;a href=&#34;https://blog.torproject.org/category/tags/deterministic-builds&#34; target=&#34;_blank&#34;&gt;their process for reproducible builds for the Tor Browser Bundle&lt;/a&gt;. Debian has made some progress in &lt;a href=&#34;https://wiki.debian.org/ReproducibleBuilds&#34; target=&#34;_blank&#34;&gt;fixing the package builders to make the process deterministic&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Automatic, private distribution of our test builds</title>
      <link>https://guardianproject.github.io/info/2014/06/06/automatic-private-distribution-of-our-test-builds/</link>
      <pubDate>Fri, 06 Jun 2014 17:17:01 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2014/06/06/automatic-private-distribution-of-our-test-builds/</guid>
      <description>&lt;p&gt;One thing we are very lucky to have is a good community of people willing to test out unfinished builds of our software. That is a very valuable contribution to the process of developing usable, secure apps. So we want to make this process as easy as possible while keeping it as secure and private as possible. To that end, we have set up an &lt;a href=&#34;https://f-droid.org&#34; target=&#34;_blank&#34;&gt;FDroid&lt;/a&gt; repository of apps generated from the test builds that our build server generates automatically every time we publish new code.&lt;/p&gt;

&lt;p&gt;After this big burst of development focused on FDroid, it has become clear that FDroid has lots of promise for becoming a complete solution for the whole process of delivering software from developers to users. We have tried other ways of delivering test builds like HockeyApp and Google Play’s Alpha and Beta channels and have found them lacking. The process did not seem as easy as it should be. And of course, both of them leave a lot to be desired when it comes to privacy of the users. So this is the first step in hopefully a much bigger project.&lt;/p&gt;

&lt;p&gt;To use our new test build service, first install FDroid by downloading it from the official source: &lt;a href=&#34;https://f-droid.org&#34;&gt;https://f-droid.org&lt;/a&gt;. Then using a QR Code scanner like &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.google.zxing.client.android&#34; target=&#34;_blank&#34;&gt;Barcode Scanner&lt;/a&gt;, just scan the QR Code below, and send it to FDroid &lt;strong&gt;Repositories&lt;/strong&gt;. You can also browse to this page on your Android device, and click the link below to add it to FDroid:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.guardianproject.info/fdroid/repo?fingerprint=F8ED4C73C125E7A67F99DB269480DAF50BE1758952E07EE5ABF116FE4B2DB1E8&#34;&gt;https://dev.guardianproject.info/fdroid/repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://dev.guardianproject.info/fdroid/repo?fingerprint=F8ED4C73C125E7A67F99DB269480DAF50BE1758952E07EE5ABF116FE4B2DB1E8&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2014/06/dev.guardianproject.info-QR-e1402010770323.png&#34; alt=&#34;dev.guardianproject.info&#34; width=&#34;245&#34; height=&#34;245&#34; class=&#34;aligncenter size-full wp-image-12462&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can also use our test repo via an anonymized connection using the Tor Hidden Service (as of this moment, that means downloading an &lt;a href=&#34;https://f-droid.org/repo/org.fdroid.fdroid_710.apk&#34;&gt;official FDroid v0.71 build&lt;/a&gt;). Just get &lt;a href=&#34;https://play.google.com/store/apps/details?id=org.torproject.android&#34; target=&#34;_blank&#34;&gt;Orbot&lt;/a&gt; and turn it on, and the following .onion address will automatically work in FDroid, as long as you have a new enough version (0.69 or later).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://k6e4p7yji2rioxbm.onion/fdroid/repo?fingerprint=F8ED4C73C125E7A67F99DB269480DAF50BE1758952E07EE5ABF116FE4B2DB1E8&#34;&gt;http://k6e4p7yji2rioxbm.onion/fdroid/repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://k6e4p7yji2rioxbm.onion/fdroid/repo?fingerprint=F8ED4C73C125E7A67F99DB269480DAF50BE1758952E07EE5ABF116FE4B2DB1E8&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2014/06/k6e4p7yji2rioxbm.onion-QR-e1402010779963.png&#34; alt=&#34;k6e4p7yji2rioxbm.onion&#34; width=&#34;245&#34; height=&#34;245&#34; class=&#34;aligncenter size-full wp-image-12463&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Security in a thumb drive: the promise and pain of hardware security modules, take one!</title>
      <link>https://guardianproject.github.io/info/2014/03/28/security-in-a-thumb-drive-the-promise-and-pain-of-hardware-security-modules-take-one/</link>
      <pubDate>Fri, 28 Mar 2014 16:54:39 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2014/03/28/security-in-a-thumb-drive-the-promise-and-pain-of-hardware-security-modules-take-one/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2014/03/cryptostick-usb-flash-drive-security-software.jpg&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2014/03/cryptostick-usb-flash-drive-security-software.jpg&#34; alt=&#34;security in a thumb drive&#34; width=&#34;219&#34; height=&#34;119&#34; class=&#34;alignleft size-full wp-image-12311&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2014/03/cryptostick-usb-flash-drive-security-software.jpg 219w, https://guardianproject.info/wp-content/uploads/2014/03/cryptostick-usb-flash-drive-security-software-100x54.jpg 100w, https://guardianproject.info/wp-content/uploads/2014/03/cryptostick-usb-flash-drive-security-software-150x81.jpg 150w, https://guardianproject.info/wp-content/uploads/2014/03/cryptostick-usb-flash-drive-security-software-200x108.jpg 200w&#34; sizes=&#34;(max-width: 219px) 100vw, 219px&#34; /&gt;&lt;/a&gt;Hardware Security Modules (aka Smartcards, chipcards, etc) provide a secure way to store and use cryptographic keys, while actually making the whole process a bit easier. In theory, one USB thumb drive like thing could manage all of the crypto keys you use in a way that makes them much harder to steal. That is the promise. The reality is that the world of Hardware Security Modules (HSMs) is a massive, scary minefield of endless technical gotchas, byzantine standards (PKCS#11!), technobabble, and incompatibilities. Before I dive too much into ranting about the days of my life wasted trying to find a clear path through this minefield, I’m going to tell you about one path I did find through to solve a key piece of the puzzle: Android and Java package signing.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2014/03/moreinfo_acr38t_ibs.jpg&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2014/03/moreinfo_acr38t_ibs.jpg&#34; alt=&#34;ACS ACR38-T-IBS&#34; width=&#34;320&#34; height=&#34;248&#34; class=&#34;alignright size-full wp-image-12313&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2014/03/moreinfo_acr38t_ibs.jpg 320w, https://guardianproject.info/wp-content/uploads/2014/03/moreinfo_acr38t_ibs-300x232.jpg 300w, https://guardianproject.info/wp-content/uploads/2014/03/moreinfo_acr38t_ibs-100x77.jpg 100w, https://guardianproject.info/wp-content/uploads/2014/03/moreinfo_acr38t_ibs-150x116.jpg 150w, https://guardianproject.info/wp-content/uploads/2014/03/moreinfo_acr38t_ibs-200x155.jpg 200w&#34; sizes=&#34;(max-width: 320px) 100vw, 320px&#34; /&gt;&lt;/a&gt;For this round, I am covering the &lt;a href=&#34;http://www.aventra.fi/English/products_MyEID_E.html&#34; target=&#34;_blank&#34;&gt;Aventra MyEID PKI Card&lt;/a&gt;. I bought a SIM-sized version to fit into an &lt;a href=&#34;http://www.smartcardfocus.com/ilp/id~99/ACR38T_IBS/p/readers.shtml&#34; target=&#34;_blank&#34;&gt;ACS ACR38T-IBS-R&lt;/a&gt; smartcard reader (it is apparently no longer made, and the &lt;a href=&#34;http://acs.com.hk/en/products/1/acr38t-d1-plug-in-sim-sized-card-reader/&#34; target=&#34;_blank&#34;&gt;ACT38T-D1&lt;/a&gt; is meant to replace it). Why such specificity you may ask? Because you have to be sure that your smartcard will work with your reader, and that your reader will have a working driver for you system, and that your smartcard will have a working PKCS#11 driver so that software can talk to the smartcard. Thankfully there is the &lt;a href=&#34;https://github.com/OpenSC/OpenSC/wiki&#34; target=&#34;_blank&#34;&gt;OpenSC&lt;/a&gt; project to cover the PKCS#11 part, it implements the PKCS#11 communications standard for many smartcards. On my Ubuntu/precise system, I had to install an extra driver, &lt;code&gt;libacr38u&lt;/code&gt;, to get the ACR38T reader to show up on my system.&lt;/p&gt;

&lt;p&gt;So let’s start there and get this thing to show up! First we need some packages. The OpenSC packages are out-of-date in a lot of releases, you need version 0.13.0-4 or newer, so you have to add our PPA (Personal Package Archive) to get current versions, which include a &lt;a href=&#34;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=742089&#34; target=&#34;_blank&#34;&gt;specific fix for the Aventra MyEID&lt;/a&gt;: (fingerprint: &lt;code&gt;F50E ADDD 2234 F563&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo add-apt-repository ppa:guardianproject/ppa
sudo apt-get update
sudo apt-get install opensc libacr38u libacsccid1 pcsc-tools usbutils
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First thing, I use &lt;code&gt;lsusb&lt;/code&gt; in the terminal to see what USB devices the Linux kernel sees, and thankfully it sees my reader:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ lsusb
Bus 005 Device 013: ID 072f:9000 Advanced Card Systems, Ltd ACR38 AC1038-based Smart Card Reader
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, its time to try &lt;code&gt;pcsc_scan&lt;/code&gt; to see if the system can see the smartcard installed in the reader. If everything is installed and in order, then &lt;code&gt;pcsc_scan&lt;/code&gt; will report this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ pcsc_scan 
PC/SC device scanner
V 1.4.18 (c) 2001-2011, Ludovic Rousseau &amp;lt;&amp;amp;#x6c;u&amp;amp;#x64;ov&amp;amp;#x69;c.&amp;amp;#x72;o&amp;amp;#x75;&amp;amp;#x73;s&amp;amp;#x65;au&amp;amp;#x40;f&amp;amp;#x72;&amp;amp;#x65;e&amp;amp;#x2e;fr&amp;gt;
Compiled with PC/SC lite version: 1.7.4
Using reader plug&#39;n play mechanism
Scanning present readers...
0: ACS ACR38U 00 00

Thu Mar 27 14:38:36 2014
Reader 0: ACS ACR38U 00 00
  Card state: Card inserted, 
  ATR: 3B F5 18 00 00 81 31 FE 45 4D 79 45 49 44 9A
[snip]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If &lt;code&gt;pcsc_scan&lt;/code&gt; cannot see the card, then things will not work. Try re-seating the smardcard in the reader, make sure you have all the right packages installed, and if you can see the reader in &lt;code&gt;lsusb&lt;/code&gt;. If your smartcard or reader cannot be read, then &lt;code&gt;pcsc_scan&lt;/code&gt; will report something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ pcsc_scan 
PC/SC device scanner
V 1.4.18 (c) 2001-2011, Ludovic Rousseau &amp;lt;&amp;amp;#x6c;&amp;amp;#x75;&amp;amp;#x64;&amp;amp;#x6f;&amp;amp;#x76;&amp;amp;#x69;c.rousse&amp;amp;#x61;&amp;amp;#x75;&amp;amp;#x40;&amp;amp;#x66;&amp;amp;#x72;&amp;amp;#x65;e.fr&amp;gt;
Compiled with PC/SC lite version: 1.7.4
Using reader plug&#39;n play mechanism
Scanning present readers...
Waiting for the first reader...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Moving right along… now &lt;code&gt;pcscd&lt;/code&gt; can see the smartcard, so we can start playing with using the OpenSC tools. These are needed to setup the card, put PINs on it for access control, and upload keys and certificates to it. The last annoying little preparation tasks are finding where &lt;code&gt;opensc-pkcs11.so&lt;/code&gt; is installed and the “slot” for the signing key in the card. These will go into a config file which &lt;code&gt;keytool&lt;/code&gt; and &lt;code&gt;jarsigner&lt;/code&gt; need. To get this info on Debian/Ubuntu/etc, run these:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ dpkg -S opensc-pkcs11.so
opensc: /usr/lib/x86_64-linux-gnu/opensc-pkcs11.so
$ pkcs11-tool --module /usr/lib/x86_64-linux-gnu/opensc-pkcs11.so \
&amp;gt;     --list-slots
Available slots:
Slot 0 (0xffffffffffffffff): Virtual hotplug slot
  (empty)
Slot 1 (0x1): ACS ACR38U 00 00
  token label        : MyEID (signing)
  token manufacturer : Aventra Ltd.
  token model        : PKCS#15
  token flags        : rng, login required, PIN initialized, token initialized
  hardware version   : 0.0
  firmware version   : 0.0
  serial num         : 0106004065952228
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the info needed to put into a &lt;code&gt;opensc-java.cfg&lt;/code&gt;, which &lt;code&gt;keytool&lt;/code&gt; and &lt;code&gt;jarsigner&lt;/code&gt; &lt;a href=&#34;http://docs.oracle.com/javase/7/docs/technotes/guides/security/p11guide.html&#34; target=&#34;_blank&#34;&gt;need in order to talk&lt;/a&gt; to the Aventra HSM. The name, library, and slot fields are essential, and the description is helpful. Here is how the &lt;code&gt;opensc-java.cfg&lt;/code&gt; using the above information looks:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;name = OpenSC
description = SunPKCS11 w/ OpenSC Smart card Framework
library = /usr/lib/x86_64-linux-gnu/opensc-pkcs11.so
slot = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now everything should be ready for initializing the HSM, generating a new key, and uploading that key to the HSM. This process generates the key and certificate, puts them into files, then uploads them to the HSM. That means you should only run this process on a trusted machine, certainly with some kind of disk encryption, and preferably on a machine that is not connected to a network, running an OS that has never been connected to the internet. A live CD is one good example, I recommend &lt;a href=&#34;https://tails.boum.org/download/index.en.html#index4h1&#34; target=&#34;_blank&#34;&gt;Tails on a USB thumb drive&lt;/a&gt; running with the &lt;a href=&#34;https://tails.boum.org/doc/first_steps/persistence/index.en.html&#34; target=&#34;_blank&#34;&gt;secure persistent store&lt;/a&gt; on it (we have been working here and there on making a TAILS-based distro specifically for managing keys, we call it &lt;a href=&#34;https://dev.guardianproject.info/projects/psst/wiki/CleanRoom&#34; target=&#34;_blank&#34;&gt;CleanRoom&lt;/a&gt;).&lt;/p&gt;

&lt;div id=&#34;attachment_12321&#34; style=&#34;width: 560px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2014/03/cstick2.jpg&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12321&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2014/03/cstick2-1024x805.jpg&#34; alt=&#34;HSM plugged into a laptop&#34; width=&#34;550&#34; height=&#34;432&#34; class=&#34;size-large wp-image-12321&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2014/03/cstick2-1024x805.jpg 1024w, https://guardianproject.info/wp-content/uploads/2014/03/cstick2-300x235.jpg 300w, https://guardianproject.info/wp-content/uploads/2014/03/cstick2-100x78.jpg 100w, https://guardianproject.info/wp-content/uploads/2014/03/cstick2-150x117.jpg 150w, https://guardianproject.info/wp-content/uploads/2014/03/cstick2-200x157.jpg 200w, https://guardianproject.info/wp-content/uploads/2014/03/cstick2-450x353.jpg 450w, https://guardianproject.info/wp-content/uploads/2014/03/cstick2-600x471.jpg 600w, https://guardianproject.info/wp-content/uploads/2014/03/cstick2-900x707.jpg 900w, https://guardianproject.info/wp-content/uploads/2014/03/cstick2.jpg 1600w&#34; sizes=&#34;(max-width: 550px) 100vw, 550px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-12321&#34; class=&#34;wp-caption-text&#34;&gt;
    HSM plugged into a laptop
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;First off, the HSM needs to be initialized, then set up with a signing PIN and a “Security Officer” PIN (which means basically an “admin” or “root” PIN). The signing PIN is the one you will use for signing APKs, the “Security Officer PIN” (SO-PIN) is used for modifying the HSM setup, like uploading new keys, etc. Because there are so many steps in the process, I’ve written up scripts to run thru all of the steps. If you want to see the details, &lt;a href=&#34;https://github.com/guardianproject/smartcard-apk-signing/blob/master/Aventra_MyEID_Setup/setup.sh&#34; target=&#34;_blank&#34;&gt;read&lt;/a&gt; &lt;a href=&#34;https://github.com/guardianproject/smartcard-apk-signing/blob/master/openssl-gen/gen.sh&#34; target=&#34;_blank&#34;&gt;the&lt;/a&gt; &lt;a href=&#34;https://github.com/guardianproject/smartcard-apk-signing/blob/master/Aventra_MyEID_Setup/finalize.sh&#34; target=&#34;_blank&#34;&gt;scripts&lt;/a&gt;. The next step is to generate the key using &lt;code&gt;openssl&lt;/code&gt; and upload it to the HSM. Then the HSM needs to be “finalized”, which means the PINs are activated, and keys cannot be uploaded. Don’t worry, as long as you have the SO-PIN, you can erase the HSM and re-initialize it. But be careful! Many HSMs will permanently self-destruct if you enter in the wrong PIN too many times, some will do that after only three wrong PINs! As long as you have not finalized the HSM, any PIN will work, so play around a lot with it before finalizing it. Run the init and key upload procedure a few times, try signing an APK, etc. Take note: the script will generate a random password for the secret files, then echo that password when it completes, so make sure no one can see your screen when you generate the real key. Alright, here goes!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;code $ git clone https://github.com/guardianproject/smartcard-apk-signing
code $ cd smartcard-apk-signing/Aventra_MyEID_Setup
Aventra_MyEID_Setup $ ./setup.sh 
Edit pkcs15-init-options-file-pins to put in the PINs you want to set:
Aventra_MyEID_Setup $ emacs pkcs15-init-options-file-pins
Aventra_MyEID_Setup $ ./setup.sh 
Using reader with a card: ACS ACR38U 00 00
Connecting to card in reader ACS ACR38U 00 00...
Using card driver MyEID cards with PKCS#15 applet.
About to erase card.
PIN [Security Officer PIN] required.
Please enter PIN [Security Officer PIN]: 
Using reader with a card: ACS ACR38U 00 00
Connecting to card in reader ACS ACR38U 00 00...
Using card driver MyEID cards with PKCS#15 applet.
About to create PKCS #15 meta structure.
Using reader with a card: ACS ACR38U 00 00
Connecting to card in reader ACS ACR38U 00 00...
Using card driver MyEID cards with PKCS#15 applet.
Found MyEID
About to generate key.
Using reader with a card: ACS ACR38U 00 00
Connecting to card in reader ACS ACR38U 00 00...
Using card driver MyEID cards with PKCS#15 applet.
Found MyEID
About to generate key.
next generate a key with ./gen.sh then ./finalize.sh
Aventra_MyEID_Setup $ cd ../openssl-gen/
openssl-gen $ ./gen.sh 
Usage: ./gen.sh &amp;quot;CertDName&amp;quot; [4096]
  for example:
  &amp;quot;/C=US/ST=New York/O=Guardian Project &amp;amp;#x54;e&amp;amp;#x73;&amp;amp;#x74;/&amp;amp;#x43;N=&amp;amp;#x74;es&amp;amp;#x74;.&amp;amp;#x67;&amp;amp;#x75;a&amp;amp;#x72;di&amp;amp;#x61;np&amp;amp;#x72;o&amp;amp;#x6a;&amp;amp;#x65;c&amp;amp;#x74;&amp;amp;#x2e;i&amp;amp;#x6e;fo&amp;amp;#x2f;em&amp;amp;#x61;i&amp;amp;#x6c;&amp;amp;#x41;d&amp;amp;#x64;re&amp;amp;#x73;s=&amp;amp;#x74;e&amp;amp;#x73;&amp;amp;#x74;@&amp;amp;#x67;&amp;amp;#x75;a&amp;amp;#x72;di&amp;amp;#x61;np&amp;amp;#x72;o&amp;amp;#x6a;&amp;amp;#x65;c&amp;amp;#x74;.i&amp;amp;#x6e;fo&amp;quot;
openssl-gen $ ./gen.sh &amp;quot;/C=US/ST=New York/O=Guardian Project Te&amp;amp;#x73;t&amp;amp;#x2f;C&amp;amp;#x4e;=&amp;amp;#x74;e&amp;amp;#x73;t&amp;amp;#x2e;g&amp;amp;#x75;ardi&amp;amp;#x61;n&amp;amp;#x70;r&amp;amp;#x6f;j&amp;amp;#x65;c&amp;amp;#x74;.&amp;amp;#x69;n&amp;amp;#x66;o/em&amp;amp;#x61;i&amp;amp;#x6c;A&amp;amp;#x64;d&amp;amp;#x72;e&amp;amp;#x73;s&amp;amp;#x3d;t&amp;amp;#x65;st&amp;amp;#x40;g&amp;amp;#x75;a&amp;amp;#x72;d&amp;amp;#x69;a&amp;amp;#x6e;p&amp;amp;#x72;o&amp;amp;#x6a;e&amp;amp;#x63;t.&amp;amp;#x69;n&amp;amp;#x66;o&amp;quot;
Generating key, be patient...
2048 semi-random bytes loaded
Generating RSA private key, 2048 bit long modulus
.......................................+++
..................................................+++
e is 65537 (0x10001)
Signature ok
subject=/C=US/ST=New York/O=Guardian Project Test/&amp;amp;#x43;&amp;amp;#x4e;&amp;amp;#x3d;&amp;amp;#x74;&amp;amp;#x65;st.gu&amp;amp;#x61;&amp;amp;#x72;&amp;amp;#x64;&amp;amp;#x69;&amp;amp;#x61;nproj&amp;amp;#x65;&amp;amp;#x63;&amp;amp;#x74;&amp;amp;#x2e;&amp;amp;#x69;nfo/e&amp;amp;#x6d;&amp;amp;#x61;&amp;amp;#x69;&amp;amp;#x6c;&amp;amp;#x41;ddres&amp;amp;#x73;&amp;amp;#x3d;&amp;amp;#x74;&amp;amp;#x65;&amp;amp;#x73;t@gua&amp;amp;#x72;&amp;amp;#x64;&amp;amp;#x69;&amp;amp;#x61;&amp;amp;#x6e;proje&amp;amp;#x63;&amp;amp;#x74;&amp;amp;#x2e;&amp;amp;#x69;&amp;amp;#x6e;fo
Getting Private key
writing RSA key
Your HSM will prompt you for &#39;Security Officer&#39; aka admin PIN, wait for it!
Enter destination keystore password:  
Entry for alias 1 successfully imported.
Import command completed:  1 entries successfully imported, 0 entries failed or cancelled
[Storing keystore]
Key fingerprints for reference:
MD5 Fingerprint=90:24:68:F3:F3:22:7D:13:8C:81:11:C3:A4:B6:9A:2F
SHA1 Fingerprint=3D:9D:01:C9:28:BD:1F:F4:10:80:FC:02:95:51:39:F4:7D:E7:A9:B1
SHA256 Fingerprint=C6:3A:ED:1A:C7:9D:37:C7:B0:47:44:72:AC:6E:FA:6C:3A:B2:B1:1A:76:7A:4F:42:CF:36:0F:A5:49:6E:3C:50
The public files are: certificate.pem publickey.pem request.pem
The secret files are: secretkey.pem certificate.p12 certificate.jkr
The passphrase for the secret files is: fTQ*he-[:y+69RS+W&amp;amp;+!*0O5i%n
openssl-gen $ cd ../Aventra_MyEID_Setup/
Aventra_MyEID_Setup $ ./finalize.sh 
Using reader with a card: ACS ACR38U 00 00
Connecting to card in reader ACS ACR38U 00 00...
Using card driver MyEID cards with PKCS#15 applet.
Found MyEID
About to delete object(s).
Your HSM is ready for use! Put the secret key files someplace encrypted and safe!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now your HSM should be ready for use for signing. You can try it out with &lt;code&gt;keytool&lt;/code&gt; to see what is on it, using the signing PIN not the Security Officer PIN:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;smartcard-apk-signing $ /usr/bin/keytool -v \
&amp;gt;     -providerClass sun.security.pkcs11.SunPKCS11 \
&amp;gt;     -providerArg opensc-java.cfg \
&amp;gt;     -providerName SunPKCS11-OpenSC -keystore NONE -storetype PKCS11 \
&amp;gt;     -list
Enter keystore password:  

Keystore type: PKCS11
Keystore provider: SunPKCS11-OpenSC

Your keystore contains 1 entry

Alias name: 1
Entry type: PrivateKeyEntry
Certificate chain length: 1
Certificate[1]:
Owner: &amp;amp;#x45;&amp;amp;#x4d;&amp;amp;#x41;&amp;amp;#x49;&amp;amp;#x4c;&amp;amp;#x41;&amp;amp;#x44;&amp;amp;#x44;RESS=test@g&amp;amp;#x75;&amp;amp;#x61;&amp;amp;#x72;&amp;amp;#x64;&amp;amp;#x69;&amp;amp;#x61;&amp;amp;#x6e;&amp;amp;#x70;&amp;amp;#x72;oject.info, CN=test.guardianproject.info, O=Guardian Project Test, ST=New York, C=US
Issuer: E&amp;amp;#x4d;A&amp;amp;#x49;LA&amp;amp;#x44;D&amp;amp;#x52;ES&amp;amp;#x53;=&amp;amp;#x74;e&amp;amp;#x73;&amp;amp;#x74;@&amp;amp;#x67;u&amp;amp;#x61;rd&amp;amp;#x69;a&amp;amp;#x6e;pr&amp;amp;#x6f;j&amp;amp;#x65;ct&amp;amp;#x2e;i&amp;amp;#x6e;f&amp;amp;#x6f;, CN=test.guardianproject.info, O=Guardian Project Test, ST=New York, C=US
Serial number: aa6887be1ec84bde
Valid from: Fri Mar 28 16:41:26 EDT 2014 until: Mon Aug 12 16:41:26 EDT 2041
Certificate fingerprints:
	 MD5:  90:24:68:F3:F3:22:7D:13:8C:81:11:C3:A4:B6:9A:2F
	 SHA1: 3D:9D:01:C9:28:BD:1F:F4:10:80:FC:02:95:51:39:F4:7D:E7:A9:B1
	 SHA256: C6:3A:ED:1A:C7:9D:37:C7:B0:47:44:72:AC:6E:FA:6C:3A:B2:B1:1A:76:7A:4F:42:CF:36:0F:A5:49:6E:3C:50
	 Signature algorithm name: SHA1withRSA
	 Version: 1


*******************************************
*******************************************
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And let’s try signing an actual APK using the &lt;a href=&#34;https://developer.android.com/tools/publishing/app-signing.html&#34; target=&#34;_blank&#34;&gt;arguments that Google recommends&lt;/a&gt;, again, using the signing PIN:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;smartcard-apk-signing $ /usr/bin/jarsigner -verbose \
&amp;gt;     -providerClass sun.security.pkcs11.SunPKCS11 \
&amp;gt;     -providerArg opensc-java.cfg -providerName SunPKCS11-OpenSC \
&amp;gt;     -keystore NONE -storetype PKCS11 \
&amp;gt;     -sigalg SHA1withRSA -digestalg SHA1 \
&amp;gt;     bin/LilDebi-release-unsigned.apk 1
Enter Passphrase for keystore: 
   adding: META-INF/1.SF
   adding: META-INF/1.RSA
  signing: assets/busybox
  signing: assets/complete-debian-setup.sh
  signing: assets/configure-downloaded-image.sh
  signing: assets/create-debian-setup.sh
  signing: assets/debian-archive-keyring.gpg
  signing: assets/debootstrap.tar.bz2
  signing: assets/e2fsck.static
  signing: assets/gpgv
  signing: assets/lildebi-common
[snip]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have a working, but elaborate, process for setting up a Hardware Security Module for signing APKs. Once the HSM is setup, using it should be quite straightforward. Next steps are to work out as many kinks in this process as possible so this will be the default way to sign APKs. That means things like figuring out how &lt;a href=&#34;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=742831&#34; target=&#34;_blank&#34;&gt;Java can be pre-configured to use OpenSC in the Debian package&lt;/a&gt;, as well as including all &lt;a href=&#34;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=742089&#34; target=&#34;_blank&#34;&gt;relevant fixes&lt;/a&gt; in the &lt;code&gt;pcscd&lt;/code&gt; and &lt;code&gt;opensc&lt;/code&gt; packages. Then the ultimate is to add support for using HSMs in Android’s generated build files like the &lt;code&gt;build.xml&lt;/code&gt; for &lt;code&gt;ant&lt;/code&gt; that is generated by &lt;code&gt;android update project&lt;/code&gt;. Then people could just plug in the HSM and run &lt;code&gt;ant release&lt;/code&gt; and have a signed APK!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Improving trust and flexibility in interactions between Android apps</title>
      <link>https://guardianproject.github.io/info/2014/01/21/improving-trust-and-flexibility-in-interactions-between-android-apps/</link>
      <pubDate>Tue, 21 Jan 2014 13:51:57 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2014/01/21/improving-trust-and-flexibility-in-interactions-between-android-apps/</guid>
      <description>&lt;div id=&#34;attachment_12240&#34; style=&#34;width: 310px&#34; class=&#34;wp-caption alignright&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2014/01/Android-Intents.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12240&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2014/01/Android-Intents-300x61.png&#34; alt=&#34;Activity1 sending an Intent that either Activity2 or Activity3 can handle.&#34; width=&#34;300&#34; height=&#34;61&#34; class=&#34;size-medium wp-image-12240&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2014/01/Android-Intents-300x61.png 300w, https://guardianproject.info/wp-content/uploads/2014/01/Android-Intents.png 600w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-12240&#34; class=&#34;wp-caption-text&#34;&gt;
    &lt;code&gt;Activity1&lt;/code&gt; sending an &lt;code&gt;Intent&lt;/code&gt; that either &lt;code&gt;Activity2&lt;/code&gt; or &lt;code&gt;Activity3&lt;/code&gt; can handle.
  &lt;/p&gt;
&lt;/div&gt;Android provides a flexible system of messaging between apps in the form of 

`&lt;a href=&#34;https://developer.android.com/guide/components/intents-filters.html&#34; target=&#34;_blank&#34;&gt;Intent&lt;/a&gt;`s. It also provides the framework for reusing large chunks of apps based on the `&lt;a href=&#34;https://developer.android.com/reference/android/app/Activity.html&#34; target=&#34;_blank&#34;&gt;Activity&lt;/a&gt;` class. `Intent`s are the messages that make the requests, and `Activity`s are the basic chunk of functionality in an app, including its interface. This combination allows apps to reuse large chunks of functionality while keeping the user experience seamless and fluent. For example, an app can send an Intent to request a camera `Activity` to prompt the user to take a picture, and that process can feel integrated into the original app that made the request. Another common use of this paradigm is choosing account information from the contacts database (aka the _People_ app). When a user is composing an new email, they will want to select who the message gets sent to. Android provides both the contacts database, and a nice overlay screen for finding and selecting the person to send to. This combination is an `Activity` provided by Android. The message that the email program sends in order to trigger that `Activity` is an `Intent`.

As usual, one of the downsides of flexibility is increased security risk. This is compounded in the Android system by rules that will automatically export an Activity to receive Intents from any app, &lt;a href=&#34;https://www.eecs.berkeley.edu/~emc/papers/spsm4027-kantola.pdf&#34; title=&#34;Reducing Attack Surfaces for Intra-Application Communication in Android&#34; target=&#34;_blank&#34;&gt;when certain conditions are met&lt;/a&gt;. If an `Activity` is exported for any app to call, &lt;a href=&#34;https://www.eecs.berkeley.edu/~emc/papers/mobi168-chin.pdf&#34; title=&#34;Analyzing Inter-Application Communication in Android&#34; target=&#34;_blank&#34;&gt;it is possible for apps to send malicious &lt;code&gt;Intent&lt;/code&gt;s&lt;/a&gt; to that `Activity`. Many `Intents` are meant to be public and others are exported as a side effect. Either way, at the very least, it is necessary to &lt;a href=&#34;http://blog.palominolabs.com/2013/05/13/android-security/&#34; title=&#34;Intent Spoofing on Android&#34; target=&#34;_blank&#34;&gt;sanitize the input&lt;/a&gt; that an `Activity` receives. On the other side of the issue, if an app is trusting another app to provide a sensitive service for it, then malware can pose as the trusted app and receive sensitive data from the trusting app. &lt;a href=&#34;http://dwaterson.com/2013/06/24/data-harvesting-by-malicious-android-apps/&#34; target=&#34;_blank&#34;&gt;An app does not need to request any permissions in order to set itself up as a receiver of &lt;code&gt;Intent&lt;/code&gt;s&lt;/a&gt;.

&lt;div id=&#34;attachment_12117&#34; style=&#34;width: 361px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;https://www.eecs.berkeley.edu/~emc/papers/spsm4027-kantola.pdf&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12117&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2014/01/activity-service-hijacking.png&#34; alt=&#34;Activity/Service hijacking: watch out for the little devil in the system&#34; width=&#34;351&#34; height=&#34;153&#34; class=&#34;size-full wp-image-12117&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2014/01/activity-service-hijacking.png 351w, https://guardianproject.info/wp-content/uploads/2014/01/activity-service-hijacking-300x130.png 300w&#34; sizes=&#34;(max-width: 351px) 100vw, 351px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-12117&#34; class=&#34;wp-caption-text&#34;&gt;
    Activity/Service hijacking: watch out for the little devil in the system
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Android, of course, does provide some added protections for cases like this. For very sensitive situations, an &lt;code&gt;Activity&lt;/code&gt; can be setup to only receive &lt;code&gt;Intent&lt;/code&gt;s from apps that meet certain criteria. &lt;a href=&#34;https://www.isecpartners.com/media/11991/isec_securing_android_apps.pdf&#34; target=&#34;_blank&#34;&gt;Android permissions can restrict other apps&lt;/a&gt; from sending &lt;code&gt;Intent&lt;/code&gt;s to any given exported &lt;code&gt;Activity&lt;/code&gt;. If a separate app wants to send an &lt;code&gt;Intent&lt;/code&gt; to an &lt;code&gt;Activity&lt;/code&gt; that has be set with a permission, then that app must include that permission in its manifest, thereby publishing that it is using that permission. This provides a good way publish an API for getting permission, but leaving it relatively open for other apps to use. Other kinds of controls can be based on two aspects of an app that the Android system enforces to remain the same: &lt;a href=&#34;http://android-developers.blogspot.com/2011/06/things-that-cannot-change.html&#34; target=&#34;_blank&#34;&gt;the package name and the signing key&lt;/a&gt;. If either of those change, then Android considers it a different app altogether. The strictest control is handled by the “protection level”, which can be set to only allow either the system or apps signed by the same key to send &lt;code&gt;Intent&lt;/code&gt;s to a given &lt;code&gt;Activity&lt;/code&gt;. These security tools are useful in many situations, but leave lots of privacy-oriented use cases uncovered.&lt;/p&gt;

&lt;p&gt;There are some situations that need more flexibility without opening things up entirely. The first simple example is provided by our app &lt;a href=&#34;https://guardianproject.info/apps/pixelknot/&#34; target=&#34;_blank&#34;&gt;Pixelknot&lt;/a&gt;: it needs to send pictures through services that will not mess up the hidden data in the images. It has a trusted list of apps it will send to, based on apps that have proven to pass the images through unchanged. When the user goes to share the image from Pixelknot to an cloud storage app, the user will be prompted to choose from a list of installed apps that match the whitelist in Pixelknot. We could have implemented a permission and asked lots of app providers to implement it, but it seems a mammoth task to get lots of large companies like Dropbox and Google to include our specific permission.&lt;/p&gt;

&lt;p&gt;There are other situations that require even tighter restrictions that are available. The first example here comes from our OpenPGP app for Android. &lt;a href=&#34;https://guardianproject.info/code/gnupg/&#34; target=&#34;_blank&#34;&gt;Gnu Privacy Guard (GPG)&lt;/a&gt; provides cryptographic services to any app that requests it. When the app sends data to GPG to be encrypted, it needs to be sure that the data is actually going to GPG and not to some malware. For very sensitive situations, the Android-provided package name and signing key might not be enough to ensure that the correct app is receiving the unencrypted data. Many Android devices are still unpatched to protect against &lt;a href=&#34;https://threatpost.com/second-android-master-key-attack-surfaces/101297&#34; target=&#34;_blank&#34;&gt;master key bugs&lt;/a&gt;, and for people using Android in China, Iran, etc. where the Play Store is not allowed, they don’t get the exploit scanning provided by Google. Telecoms around the world have proved to be &lt;a href=&#34;https://arstechnica.com/gadgets/2012/12/the-checkered-slow-history-of-android-handset-updates/&#34; target=&#34;_blank&#34;&gt;bad at updating the software&lt;/a&gt; for the devices that they sell, &lt;a href=&#34;https://arstechnica.com/security/2013/04/wireless-carriers-deceptive-and-unfair&#34; target=&#34;_blank&#34;&gt;leaving many security problems unfixed&lt;/a&gt;. Alternative Android app stores are a very popular way to get apps. So far, the ones that we have seen provide minimal security and no malware scanning. &lt;a href=&#34;http://www.telecoms.com/57581/china-crucial-to-android/&#34; target=&#34;_blank&#34;&gt;In China&lt;/a&gt;, &lt;a href=&#34;http://www.insidemobileapps.com/2011/09/02/china-chinese-smartphone-ios-android-market/&#34; target=&#34;_blank&#34;&gt;Android is very popular&lt;/a&gt;, so this represents a lot of Android users.&lt;/p&gt;

&lt;p&gt;Another potential use case revolves around a media reporting app that relies on other apps to provide images and video as part of regular reports. This could be something like a citizen journalist editing app or a human rights reporting app. The Guardian Project develops a handful of apps designed to create media in these situations: &lt;a href=&#34;https://guardianproject.info/apps/obscuracam/&#34; target=&#34;_blank&#34;&gt;ObscuraCam&lt;/a&gt;, InformaCam, and an new secure camera app in the works that we are contributing to. We want InformaCam to work as a provider of verifiable media to any app. It generates a package of data that includes a cryptographic signature so that its authenticity can be verified. That means that the apps that transport the InformaCam data do not need to be trusted in order to guarantee the integrity of the uploaded InformaCam data. Therefore it does not make sense in this case for InformaCam to grant itself permissions to access other apps’ secured &lt;code&gt;Activity&lt;/code&gt;s. It would add to the maintenance load of the app without furthering the goals of the InformaCam project. Luckily there are other ways to address that need.&lt;/p&gt;

&lt;p&gt;The inverse of this situation is not true. The reporting app that gathers media and sends it to trusted destinations has higher requirements for validating the data it receives via &lt;code&gt;Intent&lt;/code&gt;s. If verifiable media is required, then this reporter app will want to only accept incoming media from InformaCam. Well-known human rights activists are often the target of custom malware designed to get information from their phones. For this example, a malware version of InformaCam could be designed to track all of the media that the user is sending to the human rights reporting app. To prevent this, the reporter app will want to only accept data from a list of trusted apps. When the user tries to feed media from the malware app to the reporting app, it would be rejected, alerting the user that something is amiss. If an reporting app wants to receive data only from InformaCam, it needs to have some checks setup to enforce that. The easiest way for the reporting app to implement those checks would be to add an Android permission to the receiving &lt;code&gt;Activity&lt;/code&gt;. But that requires the sending app, in the example above that is InformaCam, to implement the reporting app’s permission. Using permissions works for tailored interactions. InformaCam aims to bring tighter secure to all relevant interactions, so we need a different approach. While InformaCam could include some specific permissions, the aim is to have a single method that supports all the desired interactions. Having a single method here means less code to audit, less complexity, and fewer places for security bugs.&lt;/p&gt;

&lt;p&gt;We have started auditing the security of communication via &lt;code&gt;Intent&lt;/code&gt;s, while also working on various ideas to address the issues laid out so far. This will include laying out best-practices and defining gaps in the Android architecture. We plan on building the techniques that we find useful into reusable libraries to make it easy for others to also have more flexible and trusted interactions. When are the standard checks not enough? If the user has a malware version of an app that exploits master key bugs, then the signature on the app will be valid. If a check is based only on a package name, malware could use any given package name. Android enforces that only one app can be installed with a given package name, but if there are multiple apps with the same package name, Android will not prevent you from installing the malware version.&lt;/p&gt;

&lt;p&gt;&lt;div id=&#34;attachment_12120&#34; style=&#34;width: 160px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;a href=&#34;http://www.pregnancyandbaby.com/the-hatch-blog/articles/935057/classic-vanilla-tofu-ice-pops-for-babies-from-ice-pop-joy&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12120&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2014/01/IcePopJoy-ClassicVanillaTofu-300x300.jpg&#34; alt=&#34;TOFU/POP: delicious vegan treat and clever software interaction!&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;size-medium wp-image-12120&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2014/01/IcePopJoy-ClassicVanillaTofu-300x300.jpg 300w, https://guardianproject.info/wp-content/uploads/2014/01/IcePopJoy-ClassicVanillaTofu-150x150.jpg 150w, https://guardianproject.info/wp-content/uploads/2014/01/IcePopJoy-ClassicVanillaTofu.jpg 450w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;p id=&#34;caption-attachment-12120&#34; class=&#34;wp-caption-text&#34;&gt;
    TOFU/POP: delicious vegan treat and clever software interaction!
  &lt;/p&gt;
&lt;/div&gt;The strictest possible checks can be based on the hash of the whole APK, while tracking the signing key of a given APK is also often useful. These two data points are the most reliable ways to verify a given app. They can be tracked in two different ways: pinning and trust-on-first-use (TOFU/POP). Pinning means that a verified hash or signing key for the apps that need to be trusted is included in the app that must trust them. Then the trusting app can verify what it is sending or receiving&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Intent&lt;/code&gt;s from, the installed app is then compared to the pre-stored pinned value. This kind of pinning allows for checks like the &lt;code&gt;Signature&lt;/code&gt; permission level but based on a key that the app developer can select and include in the app. The built-in &lt;code&gt;Signature&lt;/code&gt; permissions are fixed on the signing key of the currently running app.&lt;/p&gt;

&lt;p&gt;TOFU/POP means Trust-On-First-Use/Persistence Of Pseudonym. In this model, popularized by SSH, the user marks a given hash or signing key as trusted the first time they use the app, without extended checks about that apps validity. That mark then describes a “pseudonym” for that app, since there is no verification process, and that pseudonym is remembered for comparing in future interactions. One big advantage of TOFU/POP is that the user has control over which apps to trust, and that trust relationship is created at the moment the user takes an action to start using the app that needs to be trusted. That makes it much easier to manage than using Android permissions, which must be managed by the app’s developer. A disadvantage is that the initial trust is basically a guess, and that leaves open a method to get malware in there. The problem of installing good software, and avoiding malware, is outside of the scope of securing inter-app communication. Secure app installation is best handled by the process that is actually installing the software, like the Google Play Store or &lt;a href=&#34;https://f-droid.org&#34; target=&#34;_blank&#34;&gt;F-Droid&lt;/a&gt; does.&lt;/p&gt;

&lt;p&gt;To build on the InformaCam example, in order to setup a trusted data flow between InformaCam and the reporting app, custom checks must be implemented on both the sender and the receiver. For the sender, InformaCam, it should be able to send to any app, but it should then remember the app that it is configured to send to and make sure its really only sending to that app. It would then use TOFU/POP with the hash as the data point. For the receiver, the reporting app, it should only accept incoming data from apps that it trusts. The receiver then includes a pin for the signing key, or if the app is being deployed to unupdated devices the pin can be based on the hash to work around master key exploits. From there on out, the receiving app checks against the stored app hashes or signing keys. For less security-sensitive situations, the received can rely on TOFU/POP on the first time that an app sends media.&lt;/p&gt;

&lt;p&gt;There are various versions of these ideas floating around in various apps, and we have some in the works. We are working now to hammer out which of these ideas are the most useful, then we will be focusing our development efforts there. We would love to hear about any related effort or libraries that are out there. And we are also interested to hear about entirely different approaches than what has been outlined here.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Integrating Crypto Identities with Android</title>
      <link>https://guardianproject.github.io/info/2013/12/28/integrating-crypto-identities-with-android/</link>
      <pubDate>Sat, 28 Dec 2013 19:42:56 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2013/12/28/integrating-crypto-identities-with-android/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Alberti_cipher_disk&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2012/10/alberti_cipher_disk-150x150.jpg&#34; alt=&#34;alberti cipher disk&#34; width=&#34;50&#34; height=&#34;50&#34; class=&#34;alignleft size-thumbnail wp-image-3079&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2012/10/alberti_cipher_disk-150x150.jpg 150w, https://guardianproject.info/wp-content/uploads/2012/10/alberti_cipher_disk.jpg 245w&#34; sizes=&#34;(max-width: 50px) 100vw, 50px&#34; /&gt;&lt;/a&gt;ver the past couple of years, Android has included a central database for managing information about people, it is known as the &lt;a href=&#34;https://developer.android.com/reference/android/provider/ContactsContract.html&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ContactsContract&lt;/code&gt;&lt;/a&gt; (that’s a mouthful). Android then provides the &lt;em&gt;People&lt;/em&gt; app and reusable interface chunks to choose contacts that work with all the information in the &lt;code&gt;ContactsContract&lt;/code&gt; database. Any time that you are adding an account in the &lt;em&gt;Settings&lt;/em&gt; app, you are setting up this integration. You can see it with Google services, &lt;em&gt;Skype&lt;/em&gt;, &lt;em&gt;Facebook&lt;/em&gt;, and many more. This system has a lot of advantages, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a unified user experience for finding and managing data about people&lt;/li&gt;
&lt;li&gt;apps can launch common interface dialogs and screens for working with that database without having to write custom versions (launching &lt;code&gt;Activity&lt;/code&gt;s via &lt;code&gt;Intent&lt;/code&gt;s&lt;/li&gt;
&lt;li&gt;streamlined methods for building custom UIs based on the contacts database&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With our work porting &lt;a href=&#34;https://www.gnupg.org/&#34; target=&#34;_blank&#34;&gt;GnuPG&lt;/a&gt; to Android, we want &lt;a href=&#34;https://guardianproject.info/code/gnupg/&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Gnu Privacy Guard&lt;/em&gt;&lt;/a&gt; for Android to be fully integrated into the Android experience. &lt;em&gt;Gnu Privacy Guard&lt;/em&gt; registers itself as a handler for all OpenPGP file and data types in Android, so users can work with these files using standard Android methods like Share/Send buttons. Or users can start by finding the person to encrypt to in the &lt;em&gt;People&lt;/em&gt; app, then choosing the file. These flows make it intuitive to Android users, and means we have to write less code because it taps into existing Android systems. With the past release, v0.2, we laid the foundations for having the GnuPG keyring integrated into this contacts database. The next release, v0.3 will improve contacts integration a lot.&lt;/p&gt;

&lt;div id=&#34;attachment_12225&#34; style=&#34;width: 560px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/12/gpg-contacts-integration.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12225&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/12/gpg-contacts-integration-1024x640.png&#34; alt=&#34;All of these contacts come from the GnuPG keyring being synced to the ContactsContract.  Nathan&#39;s contact is made up of combined info from Gnu Privacy Guard and Google. To encrypt a file to the author, select Encrypt File to... on his contact page.&#34; width=&#34;550&#34; height=&#34;343&#34; class=&#34;size-large wp-image-12225&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/12/gpg-contacts-integration-1024x640.png 1024w, https://guardianproject.info/wp-content/uploads/2013/12/gpg-contacts-integration-300x187.png 300w&#34; sizes=&#34;(max-width: 550px) 100vw, 550px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-12225&#34; class=&#34;wp-caption-text&#34;&gt;
    All of these contacts come from the GnuPG keyring being synced to the &lt;code&gt;ContactsContract&lt;/code&gt;. Nathan’s contact is made up of combined info from &lt;em&gt;Gnu Privacy Guard&lt;/em&gt; and Google. To encrypt a file to the author, select &lt;strong&gt;Encrypt file to…&lt;/strong&gt; on his contact page.
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;One of the concerns that has been voiced about integrating with the &lt;code&gt;ContactsContract&lt;/code&gt; database is that all the data put there will be then uploaded to the other accounts, like the Google account of the phone, or other accounts. As far as we can tell, there is no automatic syncing of data between accounts in the &lt;code&gt;ContactsContract&lt;/code&gt;, instead it is a system of individual, local databases. We have not confirmed this with a code audit whether there is any data leakage from &lt;code&gt;ContactsContract&lt;/code&gt;, and would love to hear more information on that. There is a layer of matching rules for locally merging those local databases into a single, unified view of that data. A good example of this unified data view in action is the built-in &lt;em&gt;People&lt;/em&gt; app. It will show data from all of the local databases, and it will link profiles together in a single view based on programmatic rules that look at email addresses, names, etc. In any case, &lt;em&gt;Gnu Privacy Guard&lt;/em&gt; only syncs one way. It treats the GnuPG keyring as canonical and clones the GnuPG keyring contacts to the &lt;code&gt;ContactsContract&lt;/code&gt; whenever a sync is run. The sync process never reads from the &lt;code&gt;ContactsContract&lt;/code&gt;, and currently no data is ever imported from it. So at the very least, the ContactsContract should not serve as a point to inject data into the GnuPG keyring.&lt;/p&gt;

&lt;div id=&#34;attachment_12211&#34; style=&#34;width: 330px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/12/ContactsContract.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12211&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/12/ContactsContract.png&#34; alt=&#34;The ContactsContract builds up the complete view of all contacts based on RawContacts provided by each account type, which are in turn built up of standard data types like name, email, phone number, etc.&#34; width=&#34;320&#34; height=&#34;189&#34; class=&#34;size-full wp-image-12211&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/12/ContactsContract.png 320w, https://guardianproject.info/wp-content/uploads/2013/12/ContactsContract-300x177.png 300w&#34; sizes=&#34;(max-width: 320px) 100vw, 320px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-12211&#34; class=&#34;wp-caption-text&#34;&gt;
    The &lt;code&gt;ContactsContract&lt;/code&gt; builds up the complete view of all contacts based on &lt;code&gt;RawContacts&lt;/code&gt; provided by each account type, which are in turn built up of standard data types like name, email, phone number, etc.
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;One unexplored idea is for apps that need to use crypto to use only the standard Android contacts API to fetch crypto identity information like public keys and fingerprints. For example, PGP email app &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.fsck.k9&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;K-9&lt;/em&gt;&lt;/a&gt; could look up OpenPGP info at the same time it is looking in the contacts database for email addresses. It probably even makes sense for &lt;em&gt;K-9&lt;/em&gt; to offload even more to an OpenPGP provider, and have &lt;em&gt;K-9&lt;/em&gt; just query the PGP provider whether there is a signing key available, whether the receiver has a PGP key, etc.&lt;/p&gt;

&lt;p&gt;It is also tempting to think about using a similar technique for storing other types of keys like OTR keys for secure chat. The hard part is that OTR has no method built-in to the key for verifying whether that key is trusted. OpenPGP has key signing and the Web-of-Trust, with all of its issues, but the OpenPGP security model is designed around untrusted methods of moving public key data around. Using the contacts database for moving around public key material for later verification will work equally well for OTR, OpenPGP, etc.&lt;/p&gt;

&lt;p&gt;On a similar note, we are also working with Dominik Schürmann and the &lt;em&gt;K-9&lt;/em&gt; devs to create &lt;a href=&#34;https://dev.guardianproject.info/projects/gpgandroid/wiki/API_Sketch&#34; target=&#34;_blank&#34;&gt;a common Android API for a generic OpenPGP provider&lt;/a&gt;. This is similar to the contacts system in recent versions of Android in that there is a single, central contacts system that any app can tap into for managing data related to people.&lt;/p&gt;

&lt;p&gt;We have decided to go with Dominik Schürmann’s approach of using an AIDL API to an Android Service. AIDL does have some downsides mostly around it being overcomplicated. But AIDL is the main Android method for inter-process communication with &lt;code&gt;Service&lt;/code&gt;s, so we are stuck with it, more or less. The beautiful thing is that this arrangement will make it possible for apps to fully offload the crypto handling to the &lt;code&gt;Service&lt;/code&gt;, including all the required GUI bits like passphrase prompting, progress dialog overlays, key selection, etc.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://csunplugged.org/public-key-encryption&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2013/12/public-key-encryption-cartoon-300x292.jpg&#34; alt=&#34;contacts with keys&#34; width=&#34;300&#34; height=&#34;292&#34; class=&#34;alignright size-medium wp-image-12212&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/12/public-key-encryption-cartoon-300x292.jpg 300w, https://guardianproject.info/wp-content/uploads/2013/12/public-key-encryption-cartoon.jpg 414w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;For example of how this idea would work, we can look at &lt;em&gt;K-9&lt;/em&gt; email again. If an incoming email includes a public key or fingerprint, either of these can be sent to the OpenPGP provider for importing. An &lt;code&gt;OPENPGP4FPR:&lt;/code&gt; URI will trigger downloading the public key from a keyserver. A public key contained in an attached file will be received by the OpenPGP provider via the Android file associations, which will then prompts the user to import it. When &lt;em&gt;K-9&lt;/em&gt; goes to send a OpenPGP-encrypted email to that new key, it checks the ContactsContract to see whether the recipient has a OpenPGP key. If so, it sends the email to the OpenPGP provider to be encrypted. The OpenPGP provider can then look up which key to use in it’s local keyring by using the recipient’s email address. If there are multiple keys for that email address, it prompts the user to choose. It could also base it’s choice on the OpenPGP trust level for that key.&lt;/p&gt;

&lt;p&gt;These are currently all ideas for how GnuPG can be integrated into Android. Some of these are implemented and ready for you to try out on your device. The common OpenPGP provider idea is still very much a work in progress.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting keys into your keyring with Gnu Privacy Guard for Android</title>
      <link>https://guardianproject.github.io/info/2013/12/06/getting-keys-into-your-keyring-with-gnu-privacy-guard-for-android/</link>
      <pubDate>Fri, 06 Dec 2013 15:11:53 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2013/12/06/getting-keys-into-your-keyring-with-gnu-privacy-guard-for-android/</guid>
      <description>&lt;p&gt;Now that you can have a full &lt;a href=&#34;https://www.gnupg.org&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;GnuPG&lt;/em&gt;&lt;/a&gt; on your Android device with &lt;a href=&#34;https://play.google.com/store/apps/details?id=info.guardianproject.gpg&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Gnu Privacy Guard&lt;/em&gt;&lt;/a&gt; for Android, the next step is getting keys you need onto your device and included in &lt;em&gt;Gnu Privacy Guard&lt;/em&gt;. We have tried to make it as easy as possible without compromising privacy, and have implemented a few approaches, while working on others. There are a few ways to get this done right now.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Gnu Privacy Guard&lt;/em&gt; registered itself with Android as a handler of all the standard &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc3156.txt&#34; title=&#34;RFC3156: MIME Security with OpenPGP&#34; target=&#34;_blank&#34;&gt;OpenPGP MIME types&lt;/a&gt; (&lt;code&gt;application/pgp-keys&lt;/code&gt;, &lt;code&gt;application/pgp-encrypted&lt;/code&gt;, &lt;code&gt;application/pgp-signature&lt;/code&gt;), as well as all of the OpenPGP and GnuPG file extensions (&lt;code&gt;.pkr&lt;/code&gt; &lt;code&gt;.skr&lt;/code&gt; &lt;code&gt;.key&lt;/code&gt; &lt;code&gt;.sig&lt;/code&gt; &lt;code&gt;.asc&lt;/code&gt; &lt;code&gt;.gpg&lt;/code&gt; &lt;code&gt;.bin&lt;/code&gt;). This means that users just have to share a file to &lt;em&gt;Gnu Privacy Guard&lt;/em&gt; using any of the standard Android methods, these files can be launched from an email attachment, opened from the SD card using a file browser, clicked in the Downloads view, etc.&lt;/p&gt;

&lt;p&gt;So if you want to quickly send your whole public keyring from your laptop to your mobile device, you can just grab the database file directly from &lt;em&gt;GnuPG&lt;/em&gt; and copy it to your SD card. Here is how:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;plug your device into your laptop via USB so you can copy files to the SD card&lt;/li&gt;
&lt;li&gt;find your &lt;em&gt;GnuPG&lt;/em&gt; home folder (on GNU/Linux and Mac OS X, it will be in &lt;code&gt;~/.gnupg/pubring.gpg&lt;/code&gt;, on Windows it is &lt;code&gt;%APPDATA%\gnupg&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;In your &lt;em&gt;GnuPG&lt;/em&gt; home folder, copy &lt;strong&gt;pubring.gpg&lt;/strong&gt; to your device’s SD card&lt;/li&gt;
&lt;li&gt;unmount and unplug your device&lt;/li&gt;
&lt;li&gt;on your device, open your favorite file manager app (&lt;a href=&#34;https://play.google.com/store/apps/details?id=org.openintents.filemanager&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;OI File Manager&lt;/em&gt;&lt;/a&gt;, &lt;em&gt;Astro&lt;/em&gt;, etc)&lt;/li&gt;
&lt;li&gt;go to the SD card&lt;/li&gt;
&lt;li&gt;long-click on &lt;strong&gt;pubring.gpg&lt;/strong&gt; and share it to &lt;em&gt;Gnu Privacy Guard&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;click OK on the Import Keys dialog&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After that, &lt;em&gt;Gnu Privacy Guard&lt;/em&gt; will do the rest. Give is some time to sync to the Contacts database, then you’ll see all of your keys from your desktop are now in your People app and are listed in &lt;em&gt;Gnu Privacy Guard&lt;/em&gt; itself. You can now encrypt files to any of those keys, or verify files signed by any of those keys. Here are a couple screenshots to illustrate key points in the process, using &lt;em&gt;OI File Manager&lt;/em&gt;:&lt;/p&gt;

&lt;p align=&#34;center&#34;&gt;
  &lt;div id=&#34;attachment_12155&#34; style=&#34;width: 209px&#34; class=&#34;wp-caption alignleft&#34;&gt;
    &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-0.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12155&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-0-199x300.png&#34; alt=&#34;send your public keyring file&#34; width=&#34;199&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-12155&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-0-199x300.png 199w, https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-0.png 319w&#34; sizes=&#34;(max-width: 199px) 100vw, 199px&#34; /&gt;&lt;/a&gt;
    
    &lt;p id=&#34;caption-attachment-12155&#34; class=&#34;wp-caption-text&#34;&gt;
      1. send your public keyring file
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/p&gt;

&lt;div id=&#34;attachment_12156&#34; style=&#34;width: 209px&#34; class=&#34;wp-caption alignright&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-1.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12156&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-1-199x300.png&#34; alt=&#34;choose Gnu Privacy Guard to send the file to&#34; width=&#34;199&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-12156&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-1-199x300.png 199w, https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-1.png 319w&#34; sizes=&#34;(max-width: 199px) 100vw, 199px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-12156&#34; class=&#34;wp-caption-text&#34;&gt;
    2. choose &lt;em&gt;Gnu Privacy Guard&lt;/em&gt; to send the file to
  &lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;attachment_12157&#34; style=&#34;width: 209px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-2.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12157&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-2-199x300.png&#34; alt=&#34;click OK to import the key file&#34; width=&#34;199&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-12157&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-2-199x300.png 199w, https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-2.png 319w&#34; sizes=&#34;(max-width: 199px) 100vw, 199px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-12157&#34; class=&#34;wp-caption-text&#34;&gt;
    3. click OK to import the key file
  &lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;attachment_12158&#34; style=&#34;width: 209px&#34; class=&#34;wp-caption alignright&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-3.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12158&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-3-199x300.png&#34; alt=&#34;now you can see the imported keys in Gnu Privacy Guard&#34; width=&#34;199&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-12158&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-3-199x300.png 199w, https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-3.png 319w&#34; sizes=&#34;(max-width: 199px) 100vw, 199px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-12158&#34; class=&#34;wp-caption-text&#34;&gt;
    4. now you can see the imported keys in &lt;em&gt;Gnu Privacy Guard&lt;/em&gt;
  &lt;/p&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;There are many ways to get the keyring files like &lt;strong&gt;pubring.gpg&lt;/strong&gt; to your device: you can also share the keyring files via email, chat, or even services like &lt;em&gt;Dropbox&lt;/em&gt; or &lt;em&gt;Google Drive&lt;/em&gt;. Then once the files are on your device, you can import them using the same procedure as above. But keep in mind that you are sending your whole collection of secure contacts to that service, which will have full access to read it. If you have any worries about leaking your keyring to anyone, then a good method is to copy it directly to the SD card.&lt;/p&gt;

&lt;div id=&#34;attachment_12192&#34; style=&#34;width: 209px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-search-keyserver.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12192&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-search-keyserver-199x300.png&#34; alt=&#34;search the keyserver for the author&#39;s key (I lost the key from 1998, so don&#39;t use that one...)&#34; width=&#34;199&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-12192&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-search-keyserver-199x300.png 199w, https://guardianproject.info/wp-content/uploads/2013/12/GPGA-search-keyserver.png 319w&#34; sizes=&#34;(max-width: 199px) 100vw, 199px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-12192&#34; class=&#34;wp-caption-text&#34;&gt;
    search the keyserver for the author’s key (the key from 1998 is lost, don’t use that one…)
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;You can also search and download keys via the public pool of OpenPGP keyservers. If you already know someone’s keyid or fingerprint, you can search using that. Otherwise, you can search based on name or email address. But be careful! Downloading a key from a keyserver does not give you a key you can trust. Anyone can upload a key to the keyservers, and they can make that key have any name or email address. Downloading from the keyservers is a convenient way to download a key, but you must verify the key’s fingerprint with the person you are trying to find.&lt;/p&gt;

&lt;p&gt;&lt;div id=&#34;attachment_12184&#34; style=&#34;width: 160px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/12/0x9F0FE587374BBE81-qr.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12184&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/12/0x9F0FE587374BBE81-qr-150x150.png&#34; alt=&#34;scan this QR Code to get the author&#39;s OpenPGP key&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;size-thumbnail wp-image-12184&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/12/0x9F0FE587374BBE81-qr-150x150.png 150w, https://guardianproject.info/wp-content/uploads/2013/12/0x9F0FE587374BBE81-qr-300x300.png 300w, https://guardianproject.info/wp-content/uploads/2013/12/0x9F0FE587374BBE81-qr.png 330w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;p id=&#34;caption-attachment-12184&#34; class=&#34;wp-caption-text&#34;&gt;
    scan this QR Code to get the author’s OpenPGP key
  &lt;/p&gt;
&lt;/div&gt;In conjunction with the&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://web.monkeysphere.info/&#34; target=&#34;_blank&#34;&gt;Monkeysphere&lt;/a&gt; project, we developed a standard URI scheme for sending OpenPGP key fingerprints. For example, you can find my key ID here: &lt;a href=&#34;openpgp4fpr:9F0FE587374BBE81&#34;&gt;&lt;code&gt;openpgp4fpr:9F0FE587374BBE81&lt;/code&gt;&lt;/a&gt;. This provides a clickable way to get an OpenPGP key. On an Android device with &lt;em&gt;Gnu Privacy Guard&lt;/em&gt; installed, you can click on this link to download my key from the keyservers. This URI scheme also works well in QR Codes. Scan this QR Code on your device with an app like &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.google.zxing.client.android&#34; title=&#34;Barcode Scanner in the Google Play Store&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Barcode Scanner&lt;/em&gt;&lt;/a&gt;, and click &lt;strong&gt;Open Browser&lt;/strong&gt;, and Gnu Privacy Guard will download my key to your device.&lt;/p&gt;

&lt;p&gt;There are other ideas out there that we also want to support. For example, &lt;a href=&#34;http://sufficientlysecure.org/index.php/openpgp-keychain/&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;OpenPGP Keychain&lt;/em&gt;&lt;/a&gt; includes a way to transmit the whole public key via &lt;a href=&#34;https://en.wikipedia.org/wiki/Near_field_communication&#34; title=&#34;Near Field Communication&#34; target=&#34;_blank&#34;&gt;NFC&lt;/a&gt;. This allows people can swap keys directly from phone to phone without having internet access at all. But NFC is quite slow to transmit data so the devices need to be held together for a while until the whole key is received. NFC could be used to rapidly transmit an &lt;code&gt;openpgp4fpr:&lt;/code&gt; URI, and then the whole public key would be fetched from a keyserver, but that then requires internet access and also leaks a bit of metadata to the internet. A better technique would be to transmit the entire public key over Bluetooth, using NFC to setup the Bluetooth session. We’re also looking at ways to do this via WiFi and &lt;a href=&#34;https://en.wikipedia.org/wiki/Bonjour_(software)&#34; target=&#34;_blank&#34;&gt;Bonjour (mDNS)&lt;/a&gt; local service advertisements.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Turn Your Device Into an App Store</title>
      <link>https://guardianproject.github.io/info/2013/11/18/turn-your-device-into-an-app-store/</link>
      <pubDate>Mon, 18 Nov 2013 16:27:30 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2013/11/18/turn-your-device-into-an-app-store/</guid>
      <description>&lt;p&gt;As we’ve touched upon in &lt;a href=&#34;https://guardianproject.info/2013/11/05/setting-up-your-own-app-store-with-f-droid/&#34;&gt;previous blog posts &lt;/a&gt; the Google Play model of application distribution has some disadvantages. Google does not make the Play store universally available, instead limiting availability to a subset of countries. Using the Play store to install apps necessitates both sharing personal information with Google and enabling Google to remotely remove apps from your device (colloquially referred to as &lt;a href=&#34;http://www.engadget.com/2008/10/16/google-implemented-an-android-kill-switch-those-rascals/&#34;&gt;having a ‘kill switch’&lt;/a&gt;). Using the Play store also requires a functional data connection (wifi or otherwise) to allow apps to be downloaded. Often there is a need to quickly bootstrap users during training sessions in countries with unreliable/restricted data connectivity, or in extreme cases, &lt;a href=&#34;http://www.nytimes.com/2011/01/29/technology/internet/29cutoff.html?_r=0&#34;&gt;no internet connectivity at all&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://f-droid.org/&#34;&gt;F-Droid&lt;/a&gt; addresses many of these concerns, but still requires a functional data connection in order to access the repository housing applications available for install. Wouldn’t it be great if there was an easy way for users to share applications amongst themselves, in absence of a reliable data connection? Today we would like to announce initial steps the Guardian Project is taking to enable this exact functionality. We’ve been working on a prototype application capable of building F-Droid repositories &lt;strong&gt;on-device&lt;/strong&gt;, allowing users to share apps they already have installed to other users through F-Droid. In this way savvy users can quickly and securely share applications they already know and trust with friends and family without requiring a central market/repository or a reliable internet connection.&lt;/p&gt;

&lt;p&gt;To start, we’ve built a stand-alone prototype application we call “_&lt;strong&gt;Kerplapp&lt;/strong&gt;_” (as in &lt;em&gt;Kerplop for Apps)&lt;/em&gt;. Using Kerplapp an established user can select applications already installed on their phone that they wish to make available to other users. Using the selected applications Kerplapp builds a &lt;a href=&#34;https://f-droid.org/manual/fdroid.html#Simple-Binary-Repository&#34;&gt;simple binary F-Droid repostiory&lt;/a&gt; on the user’s device. The local on-device repository is then made available over a WiFi connection to other users on the local area network. Kerplapp will even display a QR code with the information required to add the local Kerplapp repo as a source repository for an F-Droid client running on another device. We hope to eventually merge our work back into the official F-droid Android client, but while we work out the kinks the Kerplapp application operates side-by-side with the F-Droid client app.&lt;/p&gt;

&lt;div id=&#34;attachment_11966&#34; style=&#34;width: 190px&#34; class=&#34;wp-caption alignright&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/11/Screenshot_2013-11-18-16-02-48.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-11966&#34; class=&#34;size-medium wp-image-11966&#34; alt=&#34;Sharing access to a Kerplapp repo with a QR code.&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/11/Screenshot_2013-11-18-16-02-48-180x300.png&#34; width=&#34;180&#34; height=&#34;300&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/11/Screenshot_2013-11-18-16-02-48-180x300.png 180w, https://guardianproject.info/wp-content/uploads/2013/11/Screenshot_2013-11-18-16-02-48-614x1024.png 614w, https://guardianproject.info/wp-content/uploads/2013/11/Screenshot_2013-11-18-16-02-48.png 768w&#34; sizes=&#34;(max-width: 180px) 100vw, 180px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-11966&#34; class=&#34;wp-caption-text&#34;&gt;
    Sharing access to a Kerplapp repo with a QR code.
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Building on top of F-Droid has a number of advantages. First, we can directly benefit from the tremendous effort and success of the F-Droid project! We’ve been actively contributing improvements &lt;a href=&#34;https://gitorious.org/f-droid/fdroidclient/merge_requests/39&#34;&gt;back to both the F-droid client&lt;/a&gt; and &lt;a href=&#34;https://gitorious.org/f-droid/fdroidserver/merge_requests/127&#34;&gt;the F-droid server&lt;/a&gt;, making it easier for everyone to set up new F-Droid repos and share connection details. Secondly, by using a binary F-Droid repository we can ensure that when users share apps between each other that the apps will continue to receive updates through other channels. That is, if I share an app with you through Kerplapp you will be able to install updates to the app from other F-Droid binary repos and other Kerplapp users – wherever the app and its updates are available with the same APK signature. The F-Droid client will do the hard work of determining what updates are available and compatible with your device&lt;/p&gt;

&lt;p&gt;There’s a lot of work left to be done! One of our short term goals include enabling Bonjour support so that the F-Droid client can find repositories on the local network without requiring them to be added manually. We’re interested in supporting device to device app transfer over a number of channels, starting with HTTPS and eventually adding support for bluetooth and NFC. Building on the success of ChatSecure we’re actively working on supporting F-Droid app transfer over &lt;a href=&#34;https://dev.guardianproject.info/projects/gibberbot/wiki/OTRDATA_Specifications&#34;&gt;OTR-Data&lt;/a&gt;, the ChatSecure proposal for in-band OTR encrypted file transfers. With F-Droid as an OTR-DATA endpoint we can support peer to peer app transfer over a trusted, authenticated, and encrypted channel. We’re also exploring how we can use the OTR keys your contacts already trust to &lt;a href=&#34;https://f-droid.org/manual/fdroid.html#Signing&#34;&gt;sign the F-Droid repository metadata index&lt;/a&gt;, providing greater trust in the accuracy of the metadata provided by peer to peer repositories.&lt;/p&gt;

&lt;p&gt;If you’re curious you can &lt;a href=&#34;https://dev.guardianproject.info/projects/bazaar&#34;&gt;follow Kerplapp’s development on our project tracker.&lt;/a&gt; We’re also looking for adventurous users &lt;a href=&#34;https://guardianproject.info/builds/Kerplapp/&#34;&gt;to install the Kerplapp prototype application&lt;/a&gt; to provide feedback and testing.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting up your own app store with F-Droid</title>
      <link>https://guardianproject.github.io/info/2013/11/05/setting-up-your-own-app-store-with-f-droid/</link>
      <pubDate>Tue, 05 Nov 2013 11:55:43 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2013/11/05/setting-up-your-own-app-store-with-f-droid/</guid>
      <description>

&lt;p&gt;(_This blog post as now been cooked into an &lt;a href=&#34;https://f-droid.org/wiki/page/Setup_an_FDroid_App_Repo&#34; target=&#34;_blank&#34;&gt;updated HOWTO&lt;/a&gt;_)&lt;/p&gt;

&lt;p&gt;The Google Play Store for Android is not available in all parts of the world, US law restricts its use in certain countries like Iran, and many countries block access to the Play Store, like China. Also, the Google Play Store tracks all user actions, reporting back to Google what apps have been installed and also run on the phone. Because of the NSA leaks, we’re seeing that governments are &lt;a href=&#34;http://www.theguardian.com/technology/2013/oct/30/google-reports-nsa-secretly-intercepts-data-links&#34; target=&#34;_blank&#34;&gt;actively tapping&lt;/a&gt; into &lt;a href=&#34;http://www.nytimes.com/2013/10/31/technology/nsa-is-mining-google-and-yahoo-abroad.html&#34; target=&#34;_blank&#34;&gt;the raw data streams&lt;/a&gt; of Google, Yahoo, and others. So that means the information the Google Play Store sends back to Google is also intercepted by the NSA (and probably other country’s agencies), and that information is shared with other governments. In other words, your activity on the Google Play Store is far from private. Lastly, the Google Play Store is not free software, unlike the core of Android itself. It is proprietary software that Google entirely controls.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2013/11/your-own-app-store.png&#34; alt=&#34;your-own-app-store&#34; width=&#34;300&#34; height=&#34;203&#34; class=&#34;alignright size-full wp-image-11896&#34; /&gt; &lt;a href=&#34;https://f-droid.org&#34; title=&#34;F-Droid Home Page&#34; target=&#34;_blank&#34;&gt;F-Droid&lt;/a&gt; is a wonderful, free app store for Android. It is modeled after the &lt;a href=&#34;http://www.debian.org&#34; title=&#34;Debian home page&#34; target=&#34;_blank&#34;&gt;Debian GNU/Linux&lt;/a&gt; distro. It has its own package repositories (repos) and build servers for all the apps that are part of the official OS. Like Debian and Ubuntu, you can also setup your own repos for anyone to use. Any free software can be added to the official F-Droid repos, where they are built and signed by the F-Droid server. This can be annoying because it means that your apps in F-Droid are signed by a different key than your apps in the Google Play Store. If you host your own F-Droid repo, then people can use F-Droid to install your own builds signed by your own signing key.&lt;/p&gt;

&lt;p&gt;This is a quick HOWTO for how to setup such a repository on a Debian or Ubuntu box. It is somewhat technical, you will use the terminal, but you don’t need to be a terminal expert to follow along. First you need a the &lt;code&gt;fdroidserver&lt;/code&gt; tools and a webserver. For the webserver, here we use &lt;em&gt;nginx&lt;/em&gt; for the webserver since its lightweight, but any will do if you already have one running. The fdroidserver tools are not yet in the official Debian/Ubuntu/etc repos, so you have to add our PPA (Personal Package Archive) to get it (fingerprint: &lt;tt&gt;F50E ADDD 2234 F563&lt;/tt&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo add-apt-repository ppa:guardianproject/ppa
sudo apt-get update
sudo apt-get install fdroidserver nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the case of this HOWTO, we’re going to setup a “&lt;a href=&#34;https://f-droid.org/manual/fdroid.html#Simple-Binary-Repository&#34; target=&#34;_blank&#34;&gt;Simple Binary Repository&lt;/a&gt;” to host our official APKs. The repo will be set up in the recommended &lt;code&gt;fdroid/&lt;/code&gt; subdirectory. This gives the &lt;code&gt;fdroid&lt;/code&gt; tool its own directory to work in, and makes the repo URL clearly marked as an FDroid repo. Let’s give our normal user control over this subdirectory in the web root so that we don’t need to run the F-Droid tools as root (with &lt;em&gt;nginx&lt;/em&gt;, the webroot is &lt;code&gt;/usr/share/nginx/www&lt;/code&gt;, it is different for other webservers):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo mkdir /usr/share/nginx/www/fdroid
sudo chown -R $USER /usr/share/nginx/www/fdroid
cd /usr/share/nginx/www/fdroid
fdroid init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now put your APK files into &lt;code&gt;/usr/share/nginx/www/fdroid/repo&lt;/code&gt; and you are ready to run the commands to build the repo (if &lt;code&gt;fdroid init&lt;/code&gt; cannot find your Android SDK in &lt;code&gt;/opt/android-sdk&lt;/code&gt; or &lt;code&gt;$ANDROID_HOME&lt;/code&gt;, it will prompt you for the path):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /usr/share/nginx/www/fdroid
cp /path/to/*.apk /usr/share/nginx/www/fdroid/repo/
fdroid update -c
fdroid update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://f-droid.org&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2013/11/fdroidheader3-300x75.png&#34; alt=&#34;fdroidheader3&#34; width=&#34;300&#34; height=&#34;75&#34; class=&#34;alignleft size-medium wp-image-11906&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/11/fdroidheader3-300x75.png 300w, https://guardianproject.info/wp-content/uploads/2013/11/fdroidheader3.png 720w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;Voila! Now you have a working F-Droid Repo! Add it to an F-Droid client on your Android device to test it out. That is done in the &lt;strong&gt;Manage Repos&lt;/strong&gt; screen available from the menu. Your repo URL will be the hostname or IP address of your machine with &lt;code&gt;/fdroid/repo/&lt;/code&gt; added to the end of it, i.e. &lt;code&gt;https://mysecureserver.com/fdroid/repo/&lt;/code&gt; or &lt;code&gt;http://192.168.2.53/fdroid/repo/&lt;/code&gt;. You can temporarily uncheck the official repos to easily see what F-Droid found in your new repo.&lt;/p&gt;

&lt;h2 id=&#34;customization&#34;&gt;Customization&lt;/h2&gt;

&lt;p&gt;You can also customize your repo by editing the config file. Be sure to use a programming text editor, like &lt;code&gt;editor /usr/share/nginx/www/fdroid/config.py&lt;/code&gt;. In the config file, you can set the name of the repo, the description, the icon, paths to specific versions of the build tools, links to a related wiki, and whether to keep stats. Here’s the basic repo description block:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;repo_url = &amp;quot;https://guardianproject.info/fdroid/repo&amp;quot;
repo_name = &amp;quot;My Local Repo&amp;quot;
repo_icon = &amp;quot;GP_Logo_hires.png&amp;quot;
repo_description = &amp;quot;&amp;quot;&amp;quot;
This is a local test repository of Hans-Christoph Steiner &amp;lt;&amp;amp;#x68;a&amp;amp;#x6e;s@&amp;amp;#x67;ua&amp;amp;#x72;d&amp;amp;#x69;&amp;amp;#x61;n&amp;amp;#x70;ro&amp;amp;#x6a;e&amp;amp;#x63;&amp;amp;#x74;.&amp;amp;#x69;nf&amp;amp;#x6f;&amp;gt;.  It is a repository of Guardian Project apps.
&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To put your icon into your repo, choose a PNG image to put in your repo. The PNG goes in &lt;code&gt;/usr/share/nginx/www/fdroid/&lt;/code&gt;, the file can be named whatever you want (by default its &lt;code&gt;fdroid-icon.png&lt;/code&gt;). If you change the name from the default, be sure to update &lt;code&gt;repo_icon&lt;/code&gt; and &lt;code&gt;archive_icon&lt;/code&gt; in &lt;code&gt;/usr/share/nginx/www/fdroid/config.py&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;more-security&#34;&gt;More Security&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2010/02/apg.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2010/02/apg-150x150.png&#34; alt=&#34;apg&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignright size-thumbnail wp-image-1029&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2010/02/apg-150x150.png 150w, https://guardianproject.info/wp-content/uploads/2010/02/apg.png 256w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;Now that you have a working repo, its time to improve the security. Generating a repo in place is very easy, that is why this HOWTO started there, but it is not as secure as it should be if your repo is going to be your main distribution point. When generating the repo in place, make sure that &lt;code&gt;config.py&lt;/code&gt; is not accessible via the web, since it contains passwords. If the file permissions are correct (e.g. &lt;code&gt;chmod 0600 config.py&lt;/code&gt;), then &lt;code&gt;config.py&lt;/code&gt; will not be readable by the webserver. But the signing keys will still be that public server. To improve this situation, generate the repo on a non-public machine like your laptop, keeping &lt;code&gt;config.py&lt;/code&gt; and the keystore only on that machine, then use &lt;code&gt;fdroid server update&lt;/code&gt; to publish the changes to your repo on a separate server. You just need to set &lt;code&gt;serverwebroot&lt;/code&gt; in &lt;code&gt;config.py&lt;/code&gt; properly, then &lt;code&gt;fdroid server update&lt;/code&gt; will do the publishing via rsync over ssh. So both computers will have to have ssh and rsync installed and setup.&lt;/p&gt;

&lt;p&gt;You can also use your own existing signing key rather than the one generated by &lt;code&gt;fdroid init&lt;/code&gt;, just edit &lt;code&gt;repo_keyalias&lt;/code&gt;, &lt;code&gt;keystore&lt;/code&gt;, &lt;code&gt;keystorepass&lt;/code&gt;, &lt;code&gt;keypass&lt;/code&gt;, and &lt;code&gt;keydname&lt;/code&gt; in &lt;code&gt;/usr/share/nginx/www/fdroid/config.py&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Since we like Tor and its Hidden Services for providing privacy, we also want to setup an F-Droid repository that is accessible over a Tor Hidden Service aka onion address. This will be covered in a future HOWTO.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Modernizing Expectations for the Nouveau Secure Mobile Messaging Movement</title>
      <link>https://guardianproject.github.io/info/2013/07/16/modernizing-expectations-for-the-nouveau-secure-mobile-messaging-movement/</link>
      <pubDate>Tue, 16 Jul 2013 00:52:31 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2013/07/16/modernizing-expectations-for-the-nouveau-secure-mobile-messaging-movement/</guid>
      <description>&lt;p&gt;&lt;em&gt;The tl;dr of this lengthy (tho entertaining and immensely important!) post is this: Stopping with “We support OTR” or “We support PGP” is not enough anymore. There are at &lt;strong&gt;least seven&lt;/strong&gt;, if not more, very important security features that any app claiming to provide secure messaging must implement as soon as possible, to truly safeguard a user’s communication content, metadata and identity.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: The names “Gibberbot” and “ChatSecure” are used interchangeabley below, as we are in the midst of an app rebrand. Apologies!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-size: 13px; line-height: 19px;&#34;&gt;There has been a great deal of activity recently around new apps and projects working towards the goal of end-to-end secure mobile messaging. This is both prompted by the overwhelming popularity of closed-source, insecure apps like WhatsApp, Viber, Line and WeChat, and by the recent revelations around government-sponsored surveillance in portions of the world that like to think of themselves as “free”.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://pennwic.wordpress.com/2012/09/18/new-workshop-series-tools-not-toys/&#34;&gt;&lt;img alt=&#34;Too Many Apps&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/07/Too-Many-Apps.jpg&#34; width=&#34;360&#34; height=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;font-size: 13px; line-height: 19px;&#34;&gt;Whether it be the effort by the &lt;a href=&#34;https://plus.google.com/+CyanogenMod/posts/23vfN2qdZTu&#34;&gt;CyanogenMOD team to build in a secure push messaging&lt;/a&gt;, the arrival of new apps like &lt;a href=&#34;http://gryphn.co/&#34;&gt;Gryphn&lt;/a&gt;, &lt;a href=&#34;https://www.mywickr.com&#34;&gt;Wickr&lt;/a&gt;, &lt;a href=&#34;http://threema.ch/&#34;&gt;Threema&lt;/a&gt; and &lt;a href=&#34;https://www.surespot.me&#34;&gt;SureSpot&lt;/a&gt;, or the very succesful crowdsourced funding of &lt;a href=&#34;https://heml.is/&#34;&gt;Heml.is&lt;/a&gt;, there is no question that there is both user and developer interest in this topic. I would also be remiss not to mention the continuing excellent work by Moxie and the &lt;a href=&#34;https://whispersystems.org/&#34;&gt;Open Whisper Systems&lt;/a&gt; team on SMS-based secure messaging, Ge0rg and the &lt;a href=&#34;http;//yaxim.org&#34;&gt;Yaxim&lt;/a&gt; app, our iOS sister project &lt;a href=&#34;http://chatsecure.org&#34;&gt;ChatSecure&lt;/a&gt;, and of course, &lt;a href=&#34;https://silentcircle.com/&#34;&gt;Silent Circle&lt;/a&gt; (&lt;a href=&#34;http://issilentcircleopensourceyet.com/&#34;&gt;are they open-source yet or what?&lt;/a&gt;).&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Protecting Content, Metadata and Identity&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At the Guardian Project, we have been working on open-source, standards-based, secure messaging &lt;a href=&#34;https://guardianproject.github.io/info/apps/gibber&#34;&gt;for a few years now&lt;/a&gt;, and are simultaneously both excited and concerned about all of this activity. We are seriously thrilled that so many talented developers are finally interested in empowering every day mobile users with powerful tools to keep their communications private. We are amazed at the creativity and quality of output seen so far, as well as the diverse approaches to solving this complex problem. Most of these apps are innovating way beyond the basic concepts of secure messaging established by systems like OpenPGP and OTR encryption, and actually thinking deeply about what it means to be secure in a mobile context. However, we also think that, in many cases, the security being implemented may not be going far enough. At the least, we feel that a new bar needs to be set, that is nost just “more secure than WhatsApp”. We need to establish norms to help the user better understand and parse through their options.&lt;/p&gt;

&lt;p&gt;In this context, the word “secure” should be taken to mean, that the contents of a message or conversation between one or more parties, should only be able to be viewed by those parties. This means that the application or service should ensure that message content, be it plain text or rich media, is both protected on the device and over the network, from extraction, interception, and decryption. In addition, “secure” should also extend to protect from network traffic surveillance, the fact that a conversation between one or more parties is even happening in the first place. Finally, as much as possible, the user should be able to control their identity within the messaging system, such that personal, real-world information (phone number, email, geolocation) is not exposed without their approval.&lt;/p&gt;

&lt;p&gt;This three-fold approach to mobile security (Content, Metadata, Identity) is a work in progress, but does capture our basic sentiment and approach to secure mobile messaging. From here, I would like to step one level down, and talk about the set of features in our next release of &lt;a href=&#34;https://github.com/guardianproject/Gibberbot/tree/v12-alpha&#34;&gt;Gibberbot&lt;/a&gt;, currently in alpha, that we feel keep our solution to mobile messaging at the head of the pack.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. Full Local Data Encryption&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Many apps feel their job in protecting messages is done once it gets to the device. In the face of Android app malware that can vacuum up data from a device and forensic extraction software and hardware, this is obviously not the case. Full disk encryption only protects when a device is locked or powered off, and besides, most users do not enable it. It is up to apps themselves to provide full encryption of all data – account configuration, sensitive settings values, messages, logs – anything that might expose a user’s information to other apps on the system or to a extraction software must be protected. Yes, this also means your user will need to enter a password every time they use your app, but it is possible to make that process less painful.&lt;/p&gt;

&lt;p&gt;&lt;a style=&#34;margin: 3px;&#34; href=&#34;https://guardianproject.info/wp-content/uploads/2013/07/device-2013-07-12-053533.png&#34;&gt;&lt;img class=&#34;wp-image-11455 alignnone&#34; alt=&#34;device-2013-07-12-053533&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/07/device-2013-07-12-053533.png&#34; width=&#34;259&#34; height=&#34;461&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/07/device-2013-07-12-053533.png 720w, https://guardianproject.info/wp-content/uploads/2013/07/device-2013-07-12-053533-168x300.png 168w, https://guardianproject.info/wp-content/uploads/2013/07/device-2013-07-12-053533-576x1024.png 576w&#34; sizes=&#34;(max-width: 259px) 100vw, 259px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have been working on two developer libraries, &lt;a href=&#34;https://guardianproject.github.io/info/code/sqlcipher&#34;&gt;SQLCipher&lt;/a&gt; and &lt;a href=&#34;https://guardianproject.github.io/info/code/iocipher&#34;&gt;IOCipher&lt;/a&gt;, which provide a simple means to enable database and file encryption in any app. More recently, we have added the &lt;a href=&#34;https://github.com/guardianproject/cacheword&#34;&gt;CacheWord&lt;/a&gt; library to that mix, to help safely manage the locking and unlocking of these data stores. Apps like Gryphn have already implemented all three of these libraries, and so will the next version of Gibberbot.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. Certificate Pinning&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.thoughtcrime.org/&#34;&gt;Moxie&lt;/a&gt; says it best in his post titled &lt;a href=&#34;http://www.thoughtcrime.org/blog/authenticity-is-broken-in-ssl-but-your-app-ha/&#34;&gt;Your app shouldn’t suffer SSL’s problems&lt;/a&gt;: “If you have a mobile app that makes SSL connections to a service you control, there is really no reason to be validating your service’s certificate using CA signatures.” The &lt;a href=&#34;https://github.com/moxie0/AndroidPinning&#34;&gt;Android Pinning library&lt;/a&gt; makes it quite simple to support this important feature in any app. For Gibberbot, we are pinning certificates of the most common known public XMPP services, such as Google (talk.google.com), Facebook, Jabber.org, Jabber.ccc.de, DuckDuckGo and few more. Beyond that, we offer manual verification (see #3 feature below for more on that). In summary, there is no reason anymore to trust the default CA’s for a messaging app.&lt;/p&gt;

&lt;p&gt;&lt;strong style=&#34;font-size: 13px; line-height: 19px;&#34;&gt;3. TOFU/POP aka “Manual Certificate Verification”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://noncombatant.org/&#34;&gt;Chris Palmer&lt;/a&gt;, formerly of the Electronic Frontier Foundation and iSec Partners and now of Google, gave a great talk a few years ago entitled &lt;a href=&#34;https://docs.google.com/presentation/d/1bieNRy4TU04PKhQ1i_J_kPZ_Tc2E6efNVbvJ295orBs/present#slide=id.i0&#34;&gt;“It’s Time to Fix HTTPS”&lt;/a&gt;. In it, he introduced, or perhaps just popularized, the phrase “Trust on First Use, Persistence of Pseudonym”, that is more happily expressed as TOFU/POP! What this means in user form is that when you connect to a new server for the first time over an SSL connection, instead of the SSL Certificate being verified by a built-in set of trusted root authorities (banks, corporations, governments), the certificate is presented to the user, in a human readable format, to be reviewed, accepted or declined. There are a number of useful pieces of information the user can look at to determine the validity – fingerprints, date generated, and so on. If you can safely verify it once, then you will only be notified or asked to verify again if the server’s certificate changes. At that point the user can be told “This site’s certificate changed, and it doesn’t look the same as it was yesterday. Maybe you should ask the admin or help system if it is still safe to use!”.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/07/device-2013-07-12-054024.png&#34;&gt;&lt;img alt=&#34;device-2013-07-12-054024&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/07/device-2013-07-12-054024.png&#34; width=&#34;259&#34; height=&#34;461&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The implementation of TOFU/POP that we use in Gibberbot is the &lt;a href=&#34;https://github.com/ge0rg/MemorizingTrustManager/wiki&#34;&gt;Memorizing Trust Manager&lt;/a&gt; library, originally developed for the &lt;a href=&#34;http://yaxim.org/&#34;&gt;Yaxim messaging app&lt;/a&gt;. It works very well, and again, is extremely simple to implement. Through the combination of features #2 and #3 we have removed the threat posed by the failure of the Root Certificate Authority system, and significantly reduced the success rate of Man-in-the-Middle attacks.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. Proxy Support, ideally Tor&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With all the talk of metadata recently, it should be clear how important traffic surveillance is. Knowing who is using what app when, or being able to see when two users connect peer-to-peer through a service is immensely valuable information. If it is possible to map a user’s social graph via your app based on analysis of packets coming in and out of your service, then you have failed in providing security to your users. Additionally, we have begun to see a new wave of Internet filtering around the world, as countries begin to block access to popular messaging app downloads and centralized servers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/07/device-2013-07-12-054331.png&#34;&gt;&lt;img class=&#34;alignnone  wp-image-11460&#34; alt=&#34;device-2013-07-12-054331&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/07/device-2013-07-12-054331.png&#34; width=&#34;259&#34; height=&#34;461&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/07/device-2013-07-12-054331.png 720w, https://guardianproject.info/wp-content/uploads/2013/07/device-2013-07-12-054331-168x300.png 168w, https://guardianproject.info/wp-content/uploads/2013/07/device-2013-07-12-054331-576x1024.png 576w&#34; sizes=&#34;(max-width: 259px) 100vw, 259px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This makes it critical that any messaging app a user will depend on to protect their messages, also works to protect their network of contacts (social graph), and ensures they will have access to the service no matter where they travel or live in the world. In order to achieve this, direct support for proxy servers should be built in to every secure messaging app. At a bare minimum HTTP proxies should be support, and ideally, HTTPS and SOCKS as well. Once you have support for those, you can easily tie into Orbot on Android, by setting the proxy to “localhost” and the appropriate port. If you want to avoid Tor Exit Node attacks or surveillance, you should then provide a Tor Hidden Service .ONION address for your servers, something that the &lt;a href=&#34;https://twitter.com/jabbercccde/status/107850540842627072&#34;&gt;CCC’s Jabber server has provided since 2011&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We have blogged in the past about &lt;a href=&#34;https://guardianproject.info/2012/06/13/auditing-twitter-with-orbot/&#34;&gt;Twitter’s support for proxying on Android&lt;/a&gt; and our OnionKit library, now named &lt;a href=&#34;https://guardianproject.info/code/netcipher/&#34;&gt;NetCipher&lt;/a&gt;. Gibberbot has supported proxying from nearly the beginning of its existence, and in v12 we are using the &lt;a href=&#34;https://github.com/guardianproject/OnionKit/blob/master/sample/src/sample/onionkit/OnionKitSampleActivity.java#L96&#34;&gt;OrbotHelper class&lt;/a&gt; to add an automatic check if Orbot is installed and running, if a user selects to use it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. Verifiable Message Encryption&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While we expect most nextgen secure messaing apps will support some form of public key encryption, OTR ideally and OpenPGP alternatively, that is not really the end of the message encryption problem. With OpenPGP, we know that most users of the software participate in key signing parties on a regular basis. The same is true for users of desktop OTR encryption in apps like Pidgin. People do not verify keys as often as they should. Since most messaging apps support in-band key exchange, it makes performing a MITM attack at the messaging layer quite trivial, if the SSL transport layer encryption is somehow intercepted.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/07/device-2013-07-16-003940.png&#34;&gt;&lt;img class=&#34;alignnone  wp-image-11479&#34; alt=&#34;device-2013-07-16-003940&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/07/device-2013-07-16-003940.png&#34; width=&#34;259&#34; height=&#34;461&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/07/device-2013-07-16-003940.png 720w, https://guardianproject.info/wp-content/uploads/2013/07/device-2013-07-16-003940-168x300.png 168w, https://guardianproject.info/wp-content/uploads/2013/07/device-2013-07-16-003940-576x1024.png 576w&#34; sizes=&#34;(max-width: 259px) 100vw, 259px&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/07/device-2013-07-16-004035.png&#34;&gt;&lt;img class=&#34;alignnone  wp-image-11480&#34; alt=&#34;device-2013-07-16-004035&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/07/device-2013-07-16-004035.png&#34; width=&#34;259&#34; height=&#34;461&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/07/device-2013-07-16-004035.png 720w, https://guardianproject.info/wp-content/uploads/2013/07/device-2013-07-16-004035-168x300.png 168w, https://guardianproject.info/wp-content/uploads/2013/07/device-2013-07-16-004035-576x1024.png 576w&#34; sizes=&#34;(max-width: 259px) 100vw, 259px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What is needed are a variety of features, prods, pokes and motivational interventions to ensure that two people who are using an app to exchange encrypted messages know how fun and easy it can be to verify their keys. With Gibberbot, we were one of the first apps to support the display and scanning of OTR fingerprints as QR Codes. We will go beyond that in future releases with NFC support, as well. We also support shared secret and &lt;a href=&#34;https://en.wikipedia.org/wiki/Socialist_millionaire&#34;&gt;Socialist Millionaire Protocol&lt;/a&gt;-based verification, which in short means, if you and your friend have a real world secret or question and answer ready, you can easily verify your cryptographic fingerprints without ever having to look at a long string of alphanumeric characters.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6. Key Management&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This feature comes under the “a great problem to have” category. Once a user really commits to using their app, they will begin building up a network of verified contacts (if you have implemented #5 properly), and generally come to regard your app as a type of secure identity management tool. In fact, they may have created a whole unique identity for themselves that only exists within the confines of your apps, and its encrypted local storage (if you have implemented #1 above). At this point, you need to figure out a means for a user to backup this identity, and generally import and export the data in a variety of ways. If you are using OTR or OpenPGP, then the user may want to share existing keyrings to and from other apps, most likely on their desktop or laptop machines. All in all, the user needs to be empowered to have control of their identity, to move it between devices, to back it up in case a device is wiped or lost, and to keep total control of that information (i.e. not have it backed up automatically to a cloud).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/07/keysync.jpg&#34;&gt;&lt;img class=&#34;alignnone size-full wp-image-11466&#34; alt=&#34;keysync&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/07/keysync.jpg&#34; width=&#34;758&#34; height=&#34;548&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/07/keysync.jpg 758w, https://guardianproject.info/wp-content/uploads/2013/07/keysync-300x216.jpg 300w&#34; sizes=&#34;(max-width: 758px) 100vw, 758px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In our case, we have been working for quite a while on a desktop tool called &lt;a href=&#34;https://github.com/guardianproject/otrfileconverter&#34;&gt;OTR File Converter&lt;/a&gt;, which is built upon more fundamental research into the many ways that &lt;a href=&#34;https://github.com/guardianproject/otrfileconverter/blob/master/README.txt&#34;&gt;different OTR-enabled apps store their public and private keys&lt;/a&gt;. As of Gibberbot v12 alpha 3 (now called “ChatSecure” btw!), we now have working support for &lt;a href=&#34;https://lists.mayfirst.org/pipermail/guardian-dev/2013-April/001537.html&#34;&gt;importing an OTR key ring from the desktop&lt;/a&gt;, in a manner that is secure and fairly simple. Our next stop is to add export from the client, and then automated sync between desktop and mobile on an ongoing basis. Beyond this capability, we also plan to expand the ability to manage keys within the Gibberbot app itself, so that a user can manually revoke, regenerate and update or remove trust of other users’ keys.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7. Panic as a feature!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Finally, we keep coming across this idea of a “Panic Button” being an important feature for addressing security issues in a mobile environment. A few years ago, we developed an app called &lt;a href=&#34;https://github.com/guardianproject/InTheClear/&#34;&gt;In The Clear&lt;/a&gt; which attempted to provide data wipe and distress beacon functionality across your entire device, be it Android, Nokia or Blackberry. We quickly realized that there were many, many different definitions of what a “Panic Button” should do, and that one app may not be able to encompass all of these needs. Since then, we have thought more about “Panic!” as a feature for an app, and how each app we develop should incorporate the capability to assist users when they feel the data that the app holds may be at risk of being compromised or exposed.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/07/device-2013-07-12-054429.png&#34;&gt;&lt;img class=&#34;alignnone  wp-image-11461&#34; alt=&#34;device-2013-07-12-054429&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/07/device-2013-07-12-054429.png&#34; width=&#34;259&#34; height=&#34;461&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/07/device-2013-07-12-054429.png 720w, https://guardianproject.info/wp-content/uploads/2013/07/device-2013-07-12-054429-168x300.png 168w, https://guardianproject.info/wp-content/uploads/2013/07/device-2013-07-12-054429-576x1024.png 576w&#34; sizes=&#34;(max-width: 259px) 100vw, 259px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Gibberbot v12, we have implemented Panic as a quick access sidedrawer button. The action can trigger a configurable set of actions, ranging from simply logging out, to deleting all configured accounts, to uninstall the app itself. In the future, we would like to also consider supporting a “turtle shell” type feature where the app can hide itself on your device as an encrypted anonymous blob, until you are ready for it to come back out again. Additionally, supporting false passwords at app unlock that trigger account data wipe or the display of false data is also something we think would be useful to support.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What Are You Prepared To Do?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We know the deep feeling of adrenaline and satisfaction you get when &lt;del&gt;code&lt;/del&gt; ship software that can truly have an impact on a human’s basic freedoms. We are moved when we receive an email from a user in a part of the world where speech and expression is limited and filtered, and they tell us how important our software is to them, and how they do not know what they would without us. These emotions, both from within and shared by others, make it that more important to ensure any development of secure messaging tools is approached in a serious and diligent manner. Checking feature boxes is not enough. Using HTTPS is not enough. Even supporting basic OTR and PGP is no longer enough. We must provide deep and broad security both on the network and on the device, at all times.&lt;/p&gt;

&lt;p&gt;If you are not prepared to go the extra mile with your app’s security capabilities, then perhaps you are in the wrong line of work.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Only Way to Visit Strongbox on a Phone</title>
      <link>https://guardianproject.github.io/info/2013/05/16/the-only-way-to-visit-strongbox-on-a-phone/</link>
      <pubDate>Thu, 16 May 2013 17:43:06 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2013/05/16/the-only-way-to-visit-strongbox-on-a-phone/</guid>
      <description>&lt;p dir=&#34;ltr&#34;&gt;
  &lt;em&gt;The New Yorker&lt;/em&gt; magazine just launched &lt;a href=&#34;http://www.newyorker.com/online/blogs/closeread/2013/05/introducing-strongbox-anonymous-document-sharing-tool.html&#34;&gt;Strongbox&lt;/a&gt;, a whistleblower submission system that’s hosted on a hidden website. There’s only one way to access the hidden site on a phone or tablet, and that’s with our &lt;a href=&#34;https://play.google.com/store/apps/details?id=info.guardianproject.browser&amp;hl=en&#34;&gt;Orweb app&lt;/a&gt;. Here’s a simple breakdown of how to do securely and anonymously blow the whistle, explained in an interactive tutorial:
&lt;/p&gt;

&lt;p style=&#34;text-align: center;&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/howto/strongbox&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;size-medium wp-image-3719  aligncenter&#34; alt=&#34;galaxy19&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/05/galaxy19-199x300.png&#34; width=&#34;199&#34; height=&#34;300&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/05/galaxy19-199x300.png 199w, https://guardianproject.info/wp-content/uploads/2013/05/galaxy19.png 400w&#34; sizes=&#34;(max-width: 199px) 100vw, 199px&#34; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p dir=&#34;ltr&#34; style=&#34;text-align: center;&#34;&gt;
  &lt;em&gt;Visit &lt;a title=&#34;strongbox tutorial&#34; href=&#34;https://guardianproject.info/howto/strongbox&#34; target=&#34;_blank&#34;&gt;guardianproject.info/howto/strongbox&lt;/a&gt; for an interactive tutorial on using Strongbox on your phone.&lt;/em&gt;
&lt;/p&gt;

&lt;p dir=&#34;ltr&#34;&gt;
  The website exists as a hidden site on what is widely known as the darknet, since you are going there hidden or “in the dark.” Instead of a .com, .org, or .info address (like &lt;a href=&#34;https://guardianproject.info/&#34; target=&#34;_blank&#34;&gt;guardianproject.info&lt;/a&gt;) the sites like Strongbox show up with a .onion. And like you need a web browser to go to a .com web address, you need a darknet browser to go to a .onion darknet address. On a mobile, we make the most secure and anonymous darknet &amp; web browser, Orweb. And if you want to get to strongbox on your phone, we’re the only way to do it.
&lt;/p&gt;

&lt;p dir=&#34;ltr&#34;&gt;
  To browse, you’ll need our &lt;a title=&#34;orweb&#34; href=&#34;https://guardianproject.info/apps/orweb&#34; target=&#34;_blank&#34;&gt;Orweb&lt;/a&gt; app. It’s currently only available for Android and you can &lt;a title=&#34;Orweb anonymous browser&#34; href=&#34;https://play.google.com/store/apps/details?id=info.guardianproject.browser &#34; target=&#34;_blank&#34;&gt;get it here&lt;/a&gt;. If you have another type of phone or tablet, unfortunately you’ll have to use a computer.
&lt;/p&gt;

&lt;p dir=&#34;ltr&#34;&gt;
  For Orweb to be anonymous and give you access to the darknet .onion addresses, you’ll need to enable onion routing with our &lt;a title=&#34;orbot&#34; href=&#34;https://guardianproject.info/apps/orbot&#34; target=&#34;_blank&#34;&gt;Orbot&lt;/a&gt; plugin. This plugin gives Orweb and other compatible apps (like our &lt;a href=&#34;https://play.google.com/store/apps/details?id=info.guardianproject.otr.app.im&#34;&gt;Gibberbot secure chat&lt;/a&gt;  for Facebook, Google, &amp; Jabber) the ability to send web traffic through the darknet, thus avoiding tracking as well as blocking. You can &lt;a title=&#34;Orbot on Android&#34; href=&#34;https://play.google.com/store/apps/details?id=org.torproject.android  &#34; target=&#34;_blank&#34;&gt;download Orbot here&lt;/a&gt;. It’s the official app of the &lt;a href=&#34;https://TorProject.org&#34;&gt;Tor Project&lt;/a&gt;, which develops the onion routing protocol, on Android.
&lt;/p&gt;

&lt;p dir=&#34;ltr&#34;&gt;
  Once both are installed, you just need to go to this hidden site: &lt;a title=&#34;Strongbox Onion Site&#34; href=&#34;http://tnysbtbxsf356hiy.onion/&#34; target=&#34;_blank&#34;&gt;http://tnysbtbxsf356hiy.onion&lt;/a&gt; . Make sure that you’re using the Orweb browser and that Orbot is running. From there, you can easily submit messages to The New Yorker. Unfortunately you can’t yet submit files to them through the phone just yet.
&lt;/p&gt;

&lt;p dir=&#34;ltr&#34;&gt;
  Overall, this is an exciting step in the right direction. With an increase in tracking and crackdown on political dissidents and whistleblowers around the world, there need to be safe and trusted ways of sharing information that has the potential of saving lives and making the world a better place. &lt;a title=&#34;the new yorker magazine&#34; href=&#34;http://www.newyorker.com/&#34; target=&#34;_blank&#34;&gt;The New Yorker&lt;/a&gt; is one of the most trusted journalistic outfits in the world and it will be interesting to follow how they understand and vet information that comes in from anonymous sources. It will be a lesson for the entire privacy community.
&lt;/p&gt;

&lt;p dir=&#34;ltr&#34; style=&#34;text-align: center;&#34;&gt;
  &lt;a href=&#34;http://instagram.com/p/PihUXCmJzW/&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;size-medium wp-image-3730 aligncenter&#34; title=&#34;On the Internet, algorithms can infer you&#39;re a dog.&#34; alt=&#34;Dog Algorithm&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/05/Dog-Algorithm-300x300.jpg&#34; width=&#34;300&#34; height=&#34;300&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/05/Dog-Algorithm-300x300.jpg 300w, https://guardianproject.info/wp-content/uploads/2013/05/Dog-Algorithm-150x150.jpg 150w, https://guardianproject.info/wp-content/uploads/2013/05/Dog-Algorithm.jpg 612w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p dir=&#34;ltr&#34;&gt;
  At the same time, it’s not yet a trusted technology. While the code is accessible and &lt;a href=&#34;http://deaddrop.github.io/&#34;&gt;open source&lt;/a&gt; it is unclear whether it’s a full version of the DeadDrop code that it came from or a fork of it. It also hasn’t been audited yet. Already, we’re seeing issues popping up on &lt;a href=&#34;https://github.com/deaddrop/deaddrop/issues&#34;&gt;the code&lt;/a&gt;. Hopefully it will be fully vetted as a solution and stand up to the ambitious and crucial claims that it is able “to provide you with a greater degree of anonymity and security than afforded by conventional e-mail.”
&lt;/p&gt;

&lt;p dir=&#34;ltr&#34;&gt;
  In the months before January, I worked a few seats down from Aaron Swartz in the ThoughtWorks offices. Since those shocking days, it’s been inspiring to continue to see his legacy. I spoke with him a bunch of times about using technology to introduce truly disruptive techniques for empowering people whose rights were otherwise being trampled. At the time, we were working on &lt;a href=&#34;http://markbelinsky.com/crowdring/&#34;&gt;Crowdring&lt;/a&gt;, an intiative from &lt;a href=&#34;http://www.therules.org/&#34;&gt;/The Rules&lt;/a&gt;. And we spoke about the power of leveraging telephony to give voice so widely, and the trade off of handing over personally identifiable information. He recognized the need for constantly evolving and shifting tactics and was expert at integrating that into both strategy and code. It’s an honor to continue to work with him now, and with the rest of the open source community as we all contribute code and ideas to make the world better.
&lt;/p&gt;

&lt;p dir=&#34;ltr&#34;&gt;
  Having just won the Knight News Challenge for our &lt;a href=&#34;https://guardianproject.info/2013/01/27/informacam-wins-knight-news-challenge/&#34;&gt;Informacam project&lt;/a&gt;, we’re excited at the growing interest from the world of journalism in making sure that sources are kept truly secure and anonymous in the digital age. We’re working to build our whole &lt;a href=&#34;https://play.google.com/store/apps/dev?id=6502754515281796553&#34;&gt;suite of tools&lt;/a&gt; to make it easier and better to do so. If you want to reach out to us, anonymously or otherwise, to &lt;a title=&#34;Guardian Contact&#34; href=&#34;https://guardianproject.info/contact/ &#34;&gt;let us know how we can help&lt;/a&gt;, you can use Orbot and Tor to do so over any of these methods. We look forward to it!
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GnuPG for Android progress: we have an command line app!</title>
      <link>https://guardianproject.github.io/info/2013/05/09/gnupg-for-android-progress-we-have-an-command-line-app/</link>
      <pubDate>Thu, 09 May 2013 10:48:52 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2013/05/09/gnupg-for-android-progress-we-have-an-command-line-app/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/05/icon.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2013/05/icon-150x150.png&#34; alt=&#34;GnuPG for Android&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignleft size-thumbnail wp-image-3680&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/05/icon-150x150.png 150w, https://guardianproject.info/wp-content/uploads/2013/05/icon-300x300.png 300w, https://guardianproject.info/wp-content/uploads/2013/05/icon.png 512w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;&lt;br /&gt;
This alpha release of our command-line developer tool brings GnuPG to Android for the first time!&lt;/p&gt;

&lt;p&gt;GNU Privacy Guard Command-Line (gpgcli) gives you command line access to the entire &lt;a href=&#34;http://gnupg.org&#34; title=&#34;Gnu Privacy Guard home page&#34; target=&#34;_blank&#34;&gt;GnuPG&lt;/a&gt; suite of encryption software. GPG is GNU’s tool for end-to-end secure communication and encrypted data storage. This trusted protocol is the free software alternative to PGP. GnuPG 2.1 is the new modularized version of GnuPG that now supports OpenPGP and S/MIME.&lt;/p&gt;

&lt;p&gt;You can get it from the Play Store:&lt;br /&gt;
&lt;a href=&#34;https://play.google.com/store/apps/details?id=info.guardianproject.gpg&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=info.guardianproject.gpg&#34;&gt;https://play.google.com/store/apps/details?id=info.guardianproject.gpg&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or download the &lt;code&gt;.apk&lt;/code&gt; from our nightly builds:&lt;br /&gt;
&lt;a href=&#34;https://guardianproject.info/builds/GnuPrivacyGuard/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://guardianproject.info/builds/GnuPrivacyGuard/&#34;&gt;https://guardianproject.info/builds/GnuPrivacyGuard/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;Before using gpgcli, be sure to launch the app and let it finish its installation process. Once it has completed, then you’re ready to use it. The easiest way to get started with gpgcli is to install &lt;a href=&#34;https://play.google.com/store/apps/details?id=jackpal.androidterm&#34; title=&#34;download Android Terminal emulator from the Google Play Store&#34;  target=&#34;_blank&#34;&gt;Android Terminal Emulator&lt;/a&gt;. gpgcli will automatically configure Android Terminal Emulator as long as you have the _Allow PATH extensions&amp;lt;/em settings enabled.&lt;/p&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;TRUSTED SECURITY: This technology already seamlessly integrates into Linux on Debian, Ubuntu, Fedora, Mac OSX (GPGtools), Windows (gpg4win)&lt;/li&gt;
&lt;li&gt;PUBLIC KEY ENCRYPTION: Full interoperable replacement of the proprietary Pretty Good Privacy (PGP) standard that uses a serial combination of hashing, data compression, symmetric-key cryptography and finally public-key cryptography; each step uses one of several supported algorithms.&lt;/li&gt;
&lt;li&gt;BROAD ALGORITHM LANDSCAPE: Supports 3DES, AES, Blowfish, CAST5, DSA, ElGamal, MD5, RSA, RIPDE-MD-160, SHA-1, TIGER, and Twofish.&lt;/li&gt;
&lt;li&gt;VERIFIABLE INTEGRITY AND AUTHENTICITY: Digital signatures create a trusted trail of ownership.&lt;/li&gt;
&lt;li&gt;CONFIRMED SECURITY: Italian Police, the FBI, and British police have been unable to crack its security and have resorted to demanding private keys. It’s been likened as “the closest you’re likely to get to military-grade encryption” by cryptographer Bruce Schneier.&lt;/li&gt;
&lt;li&gt;HELP SYSTEM: A quick help tool is built in.&lt;/li&gt;
&lt;li&gt;KEYSERVER SUPPORT: Integrated support for HKP and LDAP keyservers (keys.gnupg.net).&lt;/li&gt;

&lt;li&gt;&lt;p&gt;OPEN STANDARD COMPLIANT: Full OpenPGP implementation. Learn more about standards &lt;a href=&#34;http://tools.ietf.org/html/rfc2440&#34; target=&#34;_blank&#34;&gt;RFC2440&lt;/a&gt; &amp;amp; &lt;a href=&#34;http://tools.ietf.org/html/rfc4880&#34; target=&#34;_blank&#34;&gt;RFC4880&lt;/a&gt; &lt;/ul&gt;&lt;/p&gt;

&lt;h2 id=&#34;please-report-bugs&#34;&gt;Please Report Bugs&lt;/h2&gt;

&lt;p&gt;This is an early release of a big project, so there will inevitable be bugs. Help us improve this software by filing bug reports about any problem that you encounter. Feature requests are also welcome!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dev.guardianproject.info/projects/gpgandroid/issues&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://dev.guardianproject.info/projects/gpgandroid/issues&#34;&gt;https://dev.guardianproject.info/projects/gpgandroid/issues&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;coming-soon&#34;&gt;Coming Soon&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;SECURITY FOR APPS: We have an API in the works so that developers can&lt;br /&gt;
easily embed this into any app to give it state of the art security features.&lt;/li&gt;
&lt;li&gt;GUI: We’re building a graphical user interface for easy key management.&lt;/li&gt;
&lt;li&gt;STAY UP TO DATE: Sign up for our low-traffic &lt;a href=&#34;https://lists.mayfirst.org/mailman/listinfo/guardian-dev&#34; title=&#34;subscribe to the guardian-dev mailing list&#34; target=&#34;_blank&#34;&gt;Guardian-Dev&lt;/a&gt; mailing list to&lt;br /&gt;
be notified when the API and GUI are released:&lt;br /&gt;
&lt;a href=&#34;https://lists.mayfirst.org/mailman/listinfo/guardian-dev&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://lists.mayfirst.org/mailman/listinfo/guardian-dev&#34;&gt;https://lists.mayfirst.org/mailman/listinfo/guardian-dev&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Find us in IRC, we want feedback!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;irc://irc.freenode.net/guardianproject&#34;&gt;#guardianproject on freenode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;irc://irc.oftc.net/guardianproject&#34;&gt;#guardianproject on oftc&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;.&lt;/li&gt; &lt;/ul&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>IOCipher beta: easy encrypted file storage for your Android app</title>
      <link>https://guardianproject.github.io/info/2013/02/07/iocipher-beta-easy-encrypted-file-storage-for-your-android-app/</link>
      <pubDate>Thu, 07 Feb 2013 14:45:28 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2013/02/07/iocipher-beta-easy-encrypted-file-storage-for-your-android-app/</guid>
      <description>&lt;p&gt;At long last, we are proud to announce the &lt;a href=&#34;https://guardianproject.info/code/iocipher/&#34;&gt;first beta release of IOCipher&lt;/a&gt;, an easy framework for providing virtual encrypted disks for Android apps.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;does not require root or any special permissions at all&lt;/li&gt;
&lt;li&gt;the API is a drop-in replacement for the standard java.io.File API, so if you have ever worked with files in Java, you already know how to use IOCipher&lt;/li&gt;
&lt;li&gt;works easiest in an app that stores all files in IOCipher, but using standard java.io with IOCipher is possible&lt;/li&gt;
&lt;li&gt;supports android-7 v2.1 and above&lt;/li&gt;
&lt;li&gt;licensed under the LGPL v3+&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can download it here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/code/iocipher/&#34;&gt;https://guardianproject.info/code/iocipher/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Adding IOCipher to our InformaCam and NoteCipher apps is already in the&lt;br /&gt;
works. There is already one app in the Play Store built with IOCipher: &lt;a title=&#34;Gryphn Secure Messaging in the Play Store&#34; href=&#34;https://play.google.com/store/apps/details?id=com.Gryphn.mms&amp;hl=en&#34; target=&#34;_blank&#34;&gt;Gryphn Secure Messaging&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’ve recently done some heavy testing and bug fixing and this is ready for beta status. That means for many applications, it should be stable with reasonable performance. But its not done yet, and there are some known edge cases documented in our bug tracker which we aim to address in the next beta release:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://dev.guardianproject.info/projects/iocipher/issues&#34;&gt;https://dev.guardianproject.info/projects/iocipher/issues&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some additional notes on usage:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;single thread/sequential access is the preferred way of using IOCipher&lt;/li&gt;
&lt;li&gt;multi-threaded access possible, but potentially unstable under very high load&lt;/li&gt;
&lt;li&gt;VFS now has beginTransaction and completeTransaction to optimize performance&lt;/li&gt;
&lt;li&gt;parts of java.io not currently supported: vectored I/O, memory-mapped files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;featured photo &lt;a href=&#34;http://www.flickr.com/photos/pong/288491653/&#34;&gt;“Safe” from Pong on Flickr&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>report on IOCipher beta dev sprint</title>
      <link>https://guardianproject.github.io/info/2013/01/31/report-on-iocipher-beta-dev-sprint/</link>
      <pubDate>Thu, 31 Jan 2013 19:45:44 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2013/01/31/report-on-iocipher-beta-dev-sprint/</guid>
      <description>&lt;p&gt;We are just wrapping up an intensive dev sprint on &lt;a href=&#34;https://guardianproject.info/code/iocipher/&#34;&gt;IOCipher&lt;/a&gt; in order to get the first real beta release out, and it has been a wonderfully productive session on many levels! Before we started this, we had a proof-of-concept project that was crashy and ridiculously slow. We’re talking crashes every 100 or so transactions and 9 minutes to write 2 megs. Abel and I were plodding thru the bugs, trying to find the motivation to dive into the hard problems in the guts of some of the more arcane parts of the code. Aaron Huttner of &lt;a href=&#34;http://gryphn.co/&#34; target=&#34;_blank&#34;&gt;Gryphn&lt;/a&gt; found IOCipher while developing their &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.Gryphn.mms&amp;hl=en&#34; title=&#34;Gryphn Secure Text Messaging in the Google Play store&#34; target=&#34;_blank&#34;&gt;Gryphn Secure Text Messaging&lt;/a&gt; and thought it was a remarkable easy way to add encrypted storage of files, and it worked quickly for him, so he included it his app before we had even announced an alpha release (thanks again for the vote of confidence!).&lt;/p&gt;

&lt;p&gt;Aaron worked through a lot of the bugs with us, providing good bug reports and real, working test cases in code. What more could we ask for? We made progress on them slowly but surely. Gryphn then decided they needed IOCipher to work for them ASAP so they could put out a real release. They approached us about funding a development sprint and we thought it was a great idea. This also allowed us to bring in Stephen Lombardo and Nick Parker of &lt;a href=&#34;http://zetetic.net/&#34; target=&#34;_blank&#34;&gt;Zetetic&lt;/a&gt; to apply their &lt;a href=&#34;https://www.zetetic.net/sqlcipher/&#34; target=&#34;_blank&#34;&gt;SQLCipher&lt;/a&gt; and SQLite expertise. Our very own David Oliver put together the deal, and off we went. So we put our heads down and focused everything on getting IOCipher to be a real file system.&lt;/p&gt;

&lt;p&gt;To begin with, we focused on the core of IOCipher, &lt;a href=&#34;https://github.com/guardianproject/libsqlfs&#34; target=&#34;_blank&#34;&gt;libsqlfs&lt;/a&gt;, since we could run that on GNU/Linux, greatly speeding up the testing cycle. It started out with about 3 full days of Abel and I running &lt;code&gt;fsx&lt;/code&gt; (File System eXersizer) tests of all shapes and sizes on libsqlfs mounts to try to pin down the crashes. It seemed like we were swimming in mountains of test results that vaguely pointed somewhere. We had some vague leads, but were excited to find that memory-mapped writes were far and away the most common crash. Since IOCipher does not use mapped writes at all, we could safely ignore those crashes for now. Turns out that using libsqlfs as a FUSE mount for our test platform has produced this one red herring.&lt;/p&gt;

&lt;p&gt;One thing we knew all along is that both reads and writes were really slow, so Zetetic started with that. We all had the idea that the block sizes should all be aligned, and that should likely speed things up. This means Java stream readers and writers, writes in our Posix-style JNI layer, and the page size of the SQLite database. Zetetic did some testing and found that using 8k block sizes throughout produces some dramatic speed increases, here are some ballpark figures for doing a 2MB write with no contention:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;~710 seconds: default 256 byte blocks and no buffering, one SQLite transaction per block&lt;/li&gt;
&lt;li&gt;~65 seconds: wrapping all the 8192 write calls for each 256 byte block in a single SQLite transaction&lt;/li&gt;
&lt;li&gt;~20 seconds: same as above with the IOCipher FileOutputStream wrapped in a BufferedOutputStream&lt;/li&gt;
&lt;li&gt;~5 seconds: increase internal IOCipher block size to 4k&lt;/li&gt;
&lt;li&gt;~10 seconds: 8k sqlfs block size, 8k sqlite page size, and 8k BufferedOutputStream buffer, one SQLite transaction per block&lt;/li&gt;
&lt;li&gt;~1 second: same as above, all blocks written in a single SQLite transaction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ok, now we had something you could actually use. Pretty slow still, but no longer ridiculous. Through much reading of code and testing, we figured out that there is one spot of the code that assumed it would always be able to read from the database. Under heavy load, this was not possible, especially when you have 9 minute blocking write operations. So the next step was to figure out all of the locking and make sure that was working right. The libsqlfs code from 2006 had the remnants of three separate locking mechanisms in it, SQLite locking, pthread locking, and a delay-retry timeout mechanism. Zetetic dove into updating libsqlfs to replace all that and use all of the modern SQLite tricks like &lt;code&gt;sqlite3_busy_timeout()&lt;/code&gt; to replace the delay-retry logic, &lt;a href=&#34;https://www.sqlite.org/lockingv3.html&#34; target=&#34;_blank&#34;&gt;v3.0 locks&lt;/a&gt; and v3.7 &lt;a href=&#34;https://www.sqlite.org/draft/wal.html&#34; target=&#34;_blank&#34;&gt;Write-Ahead-Logging&lt;/a&gt; which gave libsqlfs a huge improvement in read/write concurrency, and putting libsqlfs and IOCipher reasonable performance in the realm of other encrypted file systems. I’ll let Stephen explain it:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;First, we changed the transaction command in begin_transaction to use “begin immediate”. This seeks an immediate reserved lock on the database, but does not exclusively lock it. This reduces unresolvable contention for write locks that would normally occur with deferred transactions, and is less restrictive than an exclusive lock, since it will continue to allow shared locks for reading.&lt;/p&gt;

&lt;p&gt;It is extremely important that we prevent write operations from failing to execute due to busy timeouts, even if another process/thread has the database locked. Even using WAL, it is still possible for a command to be blocked during attempted concurrent write operations. This causes the write operation to fail leading to corruption. While libsqlfs has some “delay()” code that provides rudimentary busy handling, it is only in use for a small number of operations leaving other critical calls unprotected. Therefore, our second change was to register SQLite’s internal busy handler with a relatively high timeout (currently 10 seconds, but open for discussion) via sqlite3_busy_timeout. This provides protection for all operations in libsqlfs, reducing the likelihood that a write operation would fail outright, though it may be delayed.&lt;/p&gt;

&lt;p&gt;Finally, we enabled WAL mode to speed up write operations and further improve concurrency between readers and writers. Note that WAL mode only fsync()s on checkpoint operations, so it may be possible to enable NORMAL synchronous mode with lower overhead than the standard journal mode (we didn’t change this yet).&lt;/p&gt;

&lt;p&gt;With these changes in place, three concurrent fsx processes running in parallel on a single fuse mount produced no errors in a 24hr test run. The tests also shows improved performance on read and writes. In light of these results, we’d like to get your feedback on these changes, and request that you run your own tests in the multi-threaded Android application to see if they resolve the problems that were reported.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was the final kicker. Who would of thought we could again get performance improvements of an order of magnitude twice in a single dev sprint. Now we have a encrypted filesystem that is stable and with reasonable performance that is really easy to use. And since that means that there is only very short chunks of time where everything is blocked (no more 9 minute writes), the crashes have basically vanished under real world loads. We have run super heavy file system tests over hundreds of thousands of operations without data corruption or crashes. We know that there is the theoretical potential for crashes in certain operations under super heavy load. We aim to address that in upcoming releases. And in conclusion, I’ll quote Aaron since he summarized what we are trying to achieve when we make developer tools:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Between &lt;a href=&#34;https://www.zetetic.net/sqlcipher/sqlcipher-for-android/&#34; target=&#34;_blank&#34;&gt;SQLCipher-for-Android&lt;/a&gt; and &lt;a href=&#34;https://guardianproject.info/code/iocipher/&#34; target=&#34;_blank&#34;&gt;IOCipher&lt;/a&gt; I don’t think it could get any easier to implement cryptography on Android, hopefully people pick up on this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So grab the code now from git, if you’re ready to dive in! Or for the more patient, we’re developing tutorials to go along with the beta release that is coming any day now.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Proposal for Secure Connection Notification on Android</title>
      <link>https://guardianproject.github.io/info/2012/11/15/proposal-for-secure-connection-notification-on-android/</link>
      <pubDate>Thu, 15 Nov 2012 10:07:49 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2012/11/15/proposal-for-secure-connection-notification-on-android/</guid>
      <description>&lt;p&gt;A major problem of mobile applications being increasingly used over web-based applications, is that there is no standard established for notifying the user of the state of security on the network connection. With a web browser, the evolution of the “lock” icon when an &lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP_Secure&#34;&gt;HTTPS connection&lt;/a&gt; is made, has been one that evolved originally out of Netscape’s first implementation, to an adhoc, defact industry-standard way of letting the user know if their connection is secure. Beyond just a binary on/off, the lock icon is also the entry point into viewing more information about the digital security tokens, keys and certificates that are powering the connection – who authorized them, who requested them, and so on. More recently, with browsers such as Chrome, there has been the user of color schemes (Green is good, Red is bad), verified domain display and other indicators to help ensure the user knows when to trust their connection, and when to be wary.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2012/11/Firefox_3_rc1_Extended_Validation_SSL_address_bar_and_certificate_detail.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-2952&#34; title=&#34;Firefox_3_rc1_Extended_Validation_SSL_address_bar_and_certificate_detail&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/11/Firefox_3_rc1_Extended_Validation_SSL_address_bar_and_certificate_detail-300x182.png&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;182&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2012/11/Firefox_3_rc1_Extended_Validation_SSL_address_bar_and_certificate_detail-300x182.png 300w, https://guardianproject.info/wp-content/uploads/2012/11/Firefox_3_rc1_Extended_Validation_SSL_address_bar_and_certificate_detail.png 429w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;br /&gt;
&lt;/a&gt; &lt;em&gt;Firefox’s HTTPS certificate display&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;While many people claim that HTTPS/TLS/SSL are fundamentally broken, they are still an essential piece of basic frontline security on the web. In addition, when making a connection through a proxy network like Tor or a free VPN service, utilizing TLS/SSL is critical in making sure you network is not being intercepted along the way. The notification icon and related certificate viewing, is a critical component for the user, and one that is entirely missing in the mobile application space. The Android API does not provide a standardized method to share this information with the user, and the implementation on iOS is unclear, as well. Even worse, the proper implementation of a strong HTTP/S connection that properly handles verification of certificates, and provides an interactive option for users to accept or decline is entirely missing for the majority of mobile apps.&lt;/p&gt;

&lt;p&gt;With that in mind, we have added a Secure Connection Notification feature into our new &lt;a href=&#34;https://github.com/guardianproject/OnionKit&#34;&gt;OnionKit for Android&lt;/a&gt; library. Build upon our previous work on &lt;a href=&#34;https://github.com/guardianproject/cacert&#34;&gt;implementing custom Root CA Certificate stores for Android&lt;/a&gt;, this library not only provides a clear way to enable HTTP and SOCKS proxying for your network requests (to enable use with our app, &lt;a href=&#34;https://guardianproject.info/apps/orbot/&#34;&gt;Orbot: Tor for Android&lt;/a&gt;), but it also includes a &lt;a href=&#34;https://github.com/guardianproject/OnionKit/blob/master/library/src/info/guardianproject/onionkit/trust/StrongTrustManager.java&#34;&gt;StrongTrustManager&lt;/a&gt; and a &lt;a href=&#34;https://github.com/guardianproject/OnionKit/blob/master/library/src/info/guardianproject/onionkit/trust/StrongHttpsClient.java&#34;&gt;StrongHTTPSClient&lt;/a&gt; implementation, that works to defend against man-in-the-middle attacks, and other means to intercept a TLS or SSL connection between a mobile app and a remote server. Part of the defense, is providing a clear indicator to the user when a secure connection is in use.&lt;/p&gt;

&lt;p&gt;We have provided a &lt;a href=&#34;https://github.com/guardianproject/OnionKit/blob/master/sample/src/sample/onionkit/OnionKitSampleActivity.java&#34;&gt;sample Android app&lt;/a&gt; to demonstrate how simple it is to enable this capability. The screenshots below are from that app.&lt;/p&gt;

&lt;p&gt;In this first screenshot, the app has connected to &lt;a href=&#34;https://check.torproject.org&#34;&gt;https://check.torproject.org&lt;/a&gt; and you can see in the Notification bar a “key” icon indicating there is a secure connection active.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2012/11/noTor.png&#34;&gt;&lt;img class=&#34;size-medium wp-image-2947 alignnone&#34; title=&#34;noTor&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/11/noTor-254x300.png&#34; alt=&#34;&#34; width=&#34;254&#34; height=&#34;300&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2012/11/noTor-254x300.png 254w, https://guardianproject.info/wp-content/uploads/2012/11/noTor.png 800w&#34; sizes=&#34;(max-width: 254px) 100vw, 254px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;When you drag the notification bar down, you can see a more complete view of the Secure Connection Notification (SCN) message, which indicates the connection is Active and shows a summary of the secure certificate information. In a recent update to the OnionKit SCN code, it also allows for the application to include its name and icon in this notification.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2012/11/device-2012-11-08-204130.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-2948&#34; title=&#34;device-2012-11-08-204130&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/11/device-2012-11-08-204130-300x139.png&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;139&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2012/11/device-2012-11-08-204130-300x139.png 300w, https://guardianproject.info/wp-content/uploads/2012/11/device-2012-11-08-204130.png 800w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Finally, you can tap on the SCN notification and bring up a larger pop-over view of the certificate information. We intend to develop this view further, to allow for better manual management of trust – meaning you may have the option to accept/decline or disable trust of this certificate or the certificate authority that provides it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2012/11/device-2012-11-08-203216.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-2949&#34; title=&#34;device-2012-11-08-203216&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/11/device-2012-11-08-203216-300x222.png&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;222&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2012/11/device-2012-11-08-203216-300x222.png 300w, https://guardianproject.info/wp-content/uploads/2012/11/device-2012-11-08-203216.png 800w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Beyond “Active” messages, the notification system will also warn or block connections that are deemed risky, invalid or otherwise unverifiable. You can use OnionKit in concert with the &lt;a href=&#34;https://github.com/ge0rg/MemorizingTrustManager&#34;&gt;MemorizingTrustManager&lt;/a&gt; to manually override this verification process, if your application is expected to often connect to servers with unverifiable certificates. Finally, using our &lt;a href=&#34;https://github.com/guardianproject/cacert&#34;&gt;CACert project&lt;/a&gt;, you can generate custom Root CA stores for use with OnionKit, that utilize your own certificate authorities, or a custom rolled set.&lt;/p&gt;

&lt;p&gt;Our goal is not to overwhelm the user, but instead to provide them a simple notification so they can understand which applications have their best interests in mind, and which do not. It is amazing how many popular mobile apps transmit personal information using HTTP completely in plain text, in the clear, allowing any number of parties along the network path between the device and server to passively vacuum up this data. Users generally are not aware or do not care about this issue. It is up to the mobile application developer, to adopt an approach like our Secure Connection Notification, or to directly utilize our OnionKit library itself.&lt;/p&gt;

&lt;p&gt;Finally, we would like to see Android and other mobile operating systems, adopt a system such as this device-wide, such that it becomes as standard as the desktop web browser HTTPS lock.&lt;/p&gt;

&lt;p&gt;If you are a developer, please check out OnionKit for Android today, and let us know what you think: &lt;a href=&#34;https://github.com/guardianproject/OnionKit/&#34;&gt;https://github.com/guardianproject/OnionKit/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IOCipher lives! encrypted virtual file system for Android</title>
      <link>https://guardianproject.github.io/info/2012/05/17/iocipher-lives-encrypted-virtual-file-system-for-android/</link>
      <pubDate>Thu, 17 May 2012 16:44:35 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2012/05/17/iocipher-lives-encrypted-virtual-file-system-for-android/</guid>
      <description>&lt;p&gt;Nathan and I just got the first complete test of IOCipher working in the IOCipherServer/SpotSync app. We created a filesystem sqlite.db file, then mounted it and got all the files via HTTP. In the test suite, I have lots of operations all running fine and encrypting! The core idea here is a java.io API replacement that transparently writes to an encrypted store. So for the most part, just change your import statements from:&lt;/p&gt;

&lt;pre&gt;java.io.*   ---&gt;   info.guardianproject.iocipher.*&lt;/pre&gt;

&lt;p&gt;Then in your code, make a &lt;code&gt;VirtualFileSystem&lt;/code&gt; instance and mount it, and unmount it. That’s about it. Right now, you can have only a single filesystem per app, but you can unmount one and mount another. We hope to add support for multiple filesystems in the not-too-distant future.&lt;/p&gt;

&lt;p&gt;Its ready for people to try, some kind of early alpha. Here’s the framework itself:&lt;br /&gt;
&lt;a href=&#34;https://github.com/guardianproject/IOCipher&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/guardianproject/IOCipher&#34;&gt;https://github.com/guardianproject/IOCipher&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;THe easiest way to get started right now is probably the test suite:&lt;br /&gt;
&lt;a href=&#34;https://github.com/guardianproject/IOCipherTests&#34; title=&#34;IOCipherTests&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/guardianproject/IOCipherTests&#34;&gt;https://github.com/guardianproject/IOCipherTests&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our first app using it is here:&lt;br /&gt;
&lt;a href=&#34;https://github.com/guardianproject/IOCipherServer&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/guardianproject/IOCipherServer&#34;&gt;https://github.com/guardianproject/IOCipherServer&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Comments, feedback, criticism, welcome and wanted!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mobile mesh in a real world test</title>
      <link>https://guardianproject.github.io/info/2012/05/02/mobile-mesh-in-a-real-world-test/</link>
      <pubDate>Wed, 02 May 2012 15:37:37 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2012/05/02/mobile-mesh-in-a-real-world-test/</guid>
      <description>&lt;p&gt;Nathan, Mark, Lee, and I tried some OLSR mesh testing during the May Day protests and marches. We were able to get 4 devices to associate and mesh together, but not without some trials and travails. Two pairs of devices setup two separate BSSIDs, so were on separate networks. We turned them all off, then associated them one at a time, and then they all got onto the same BSSID and olsrd started doing its thing. This made us think that we should just use a hard-coded BSSID in the setup, with a preference to allow standard ad-hoc association to find a BSSID. &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2012/05/526191_338865336181237_184749301592842_866151_1316470506_n.jpg&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2012/05/526191_338865336181237_184749301592842_866151_1316470506_n-300x225.jpg&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;225&#34; class=&#34;alignright size-medium wp-image-2037&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2012/05/526191_338865336181237_184749301592842_866151_1316470506_n-300x225.jpg 300w, https://guardianproject.info/wp-content/uploads/2012/05/526191_338865336181237_184749301592842_866151_1316470506_n.jpg 600w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Next we tried to use some services. We were going to try running a &lt;a href=&#34;https://crypto.cat/&#34; target=&#34;_blank&#34;&gt;cryptocat&lt;/a&gt; session, but the phone that was running cryptocat via a &lt;a href=&#34;https://github.com/guardianproject/lildebi&#34; target=&#34;_blank&#34;&gt;Lil’ Debi&lt;/a&gt; Debian install was having trouble staying connected to the mesh. Next we tried a serverless direct SIP call using &lt;a href=&#34;https://code.google.com/p/csipsimple/&#34; target=&#34;_blank&#34;&gt;CSIPSimple&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;CSIPSimple uses the Android Java API to determine if the device is online. The current approach to configuring the ad-hoc mode used by Android-Wifi-Tether-based apps including Serval and Barnacle-based apps including OLSR-Mesh-Tether disables the wifi via the Android Java API, then configures ad-hoc mode using command line tools. This means that Android believe that the wifi is off, and when apps query the network status via the normal Android API, Android will tell it what it believes: there is no network connection.&lt;/p&gt;

&lt;p&gt;This works in &lt;a href=&#34;http://www.servalproject.org/&#34; target=&#34;_blank&#34;&gt;Serval&lt;/a&gt; because Serval is a self-contained system with its own SIP client and server, etc. This does not work for situations where we want to provide generic IP service using OLSR mesh on Android phones. I’m going to try to see if I can get the ad-hoc setup to work while making Android believe that the wifi is an and associated with infrastructure-mode network.&lt;/p&gt;

&lt;p&gt;Also, in the process of setting up the mesh while mixing in a crowd and walking with a crowd down the street we realized two key things: 1) the setup process should be tolerant of frequent interruptions, and 2) it should be as easy as possible for people to give the mesh app itself from one phone to another. We’ll be working on #1 as part of our &lt;a href=&#34;https://code.commotionwireless.net/projects&#34; target=&#34;_blank&#34;&gt;Commotion&lt;/a&gt; work and we will focus on making a UI that clearly shows its status and lets the user continue where they left off. We will be working directly on #2 as part of a separate project, so we’ll try to keep everyone informed on our progress with that.&lt;/p&gt;

&lt;p&gt;Another idea we discussed was how to have a “strength meter” for mesh, like the GSM or wifi bars. We talked about taking a tally of how many first hop connections there are, the total connections, and the total willingness of all of the first hop connections.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Transparent encrypted virtual disks for Android (we call it IOCipher)</title>
      <link>https://guardianproject.github.io/info/2012/04/03/transparent-encrypted-virtual-disks-for-android-we-call-it-iocipher/</link>
      <pubDate>Tue, 03 Apr 2012 13:16:41 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2012/04/03/transparent-encrypted-virtual-disks-for-android-we-call-it-iocipher/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2012/04/blog_sed.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2012/04/blog_sed.png&#34; alt=&#34;&#34; width=&#34;200&#34; height=&#34;200&#34; class=&#34;alignleft size-full wp-image-1764&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2012/04/blog_sed.png 200w, https://guardianproject.info/wp-content/uploads/2012/04/blog_sed-150x150.png 150w&#34; sizes=&#34;(max-width: 200px) 100vw, 200px&#34; /&gt;&lt;/a&gt;When using phones, laptops, computers, etc. it feels like a private experience, as if our screen was the same as a piece of paper, and when that paper is gone, then no one can see it anymore. Digital media works very differently. While the user interface portrays the deletion of files as very final, for someone with the right tools, it is actually not hard to recover deleted files. Also, digital information takes up so little space, we now regularly carry vast amounts of information in our pockets. Our phones have become amazingly powerful computers, storing as many photos, videos, documents, etc. in our pockets as would have required a room not so long ago. So when you lose this phone, or it gets stolen, or accessed against your wishes, the lies of the interface are laid bare, and vast troves of your information is now in someone else’s hands. So how can we capitalize on all this power without giving up control of our information?&lt;/p&gt;

&lt;p&gt;Encryption provides the building blocks for making the experience no longer a lie. With properly encrypted data, it is possible to throw away the key and delete it, and then no one can get the data ever again. The problem now is how best to use encryption to make our private information actually private with as few complicated decisions or onerous interfaces as possible. Full disk encryption is one popular choice. It does a good job of providing a transparent experience, merely type in a password when you boot up your computer, and the rest is totally normal. But it also offers limited protection. When your full disk encryption is unlocked and your computer is running, that disk behaves no differently than an unencrypted disk. Someone with access to the computer has full access to the files, malware does too, undelete tools will still work, etc. You have to power off the computer to get the protection that full disk encryption provides.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2012/04/fde.jpg&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2012/04/fde.jpg&#34; alt=&#34;&#34; width=&#34;350&#34; height=&#34;250&#34; class=&#34;alignright size-full wp-image-1763&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2012/04/fde.jpg 350w, https://guardianproject.info/wp-content/uploads/2012/04/fde-300x214.jpg 300w&#34; sizes=&#34;(max-width: 350px) 100vw, 350px&#34; /&gt;&lt;/a&gt;Another option is providing virtual encrypted disks like &lt;a href=&#34;http://www.truecrypt.org/&#34; target=&#34;_blank&#34;&gt;TrueCrypt&lt;/a&gt; or &lt;a href=&#34;http://support.apple.com/kb/HT1578&#34; target=&#34;_blank&#34;&gt;Apple’s encrypted disk images&lt;/a&gt;. Then you can decide on what needs to be in which compartment and what is always unlocked versus what is locked away behind a long, cryptic password with a short timeout. This provides good security and privacy when managed properly, but requires a fair amount of skill and time to setup and manage everything. These techniques also require root access since they mount these virtual disks as file systems. We focus a lot on Android, where most people do not have root access.&lt;/p&gt;

&lt;p&gt;A related approach is to have a software layer automatically encrypt each file. This is how the &lt;a href=&#34;http://support.apple.com/kb/HT1578&#34; target=&#34;_blank&#34;&gt;EncFS FUSE module&lt;/a&gt; and the &lt;a href=&#34;https://mapl.certgate.com/&#34; target=&#34;_blank&#34;&gt;Certgate MAPL&lt;/a&gt; file access work. This provides transparent encryption, but since each file is individually encrypted, a lot of information is still available without decrypting anything: the file size, modification and access times, etc.&lt;/p&gt;

&lt;p&gt;We’re working on another approach similar to the approach we took with &lt;a href=&#34;https://guardianproject.info/code/sqlcipher/&#34; target=&#34;_blank&#34;&gt;SQLCipher for Android&lt;/a&gt;. We’re calling it &lt;a href=&#34;https://github.com/guardianproject/IOCipher&#34; target=&#34;_blank&#34;&gt;IOCipher&lt;/a&gt;. In SQLCipher for Android, we took the code from Android’s core android.database.* classes used for working with the built-in SQLite and replaced the guts with the SQLCipher encrypted database. This allows Android app developers to use the familiar and well documented android.database.* API to build in encrypted storage into their apps. With IOCipher, we are again using SQLCipher as the core, but this time we are wrapping it with &lt;a href=&#34;https://github.com/guardianproject/libsqlfs&#34; target=&#34;_blank&#34;&gt;libsqlfs&lt;/a&gt; to make it behave like a filesystem, then grabbing the code to Android’s java.io.* API and replacing the guts with calls to libsqlfs on top of SQLCipher. libsqlfs is also a &lt;a href=&#34;http://fuse.sourceforge.net/&#34; target=&#34;_blank&#34;&gt;FUSE&lt;/a&gt;&lt;em&gt;(Filesystem in Userspace)&lt;/em&gt; module, so it provides an API very similar to the POSIX API for working with files and directories. So that makes it easy to take &lt;code&gt;java.io.File&lt;/code&gt;, for example, and replace all the calls to &lt;code&gt;read()&lt;/code&gt;, &lt;code&gt;open()&lt;/code&gt;, &lt;code&gt;write()&lt;/code&gt;, &lt;code&gt;stat()&lt;/code&gt;, etc. with calls to &lt;code&gt;sqlfs_proc_read()&lt;/code&gt;, &lt;code&gt;sqlfs_proc_open()&lt;/code&gt;, &lt;code&gt;sqlfs_proc_write()&lt;/code&gt;, &lt;code&gt;sqlfs_proc_stat()&lt;/code&gt;, etc. Then all the Android developer needs to do is to java their &lt;code&gt;import java.io.*&lt;/code&gt; to &lt;code&gt;import info.guardianproject.iocipher.*&lt;/code&gt;, specify the database file to use, and the key to lock/unlock it, and the rest is normal Java programming.&lt;/p&gt;

&lt;p&gt;The beauty of using libsqlfs+SQLCipher is that its built of top of SQLite, which gives us a single, very portable file that is the whole filesystem, like a Mac OS X .dmg file or TrueCrypt .tc file. SQLite also allows multiple processes to access the same database file, so that means multiple apps can mount an IOCipher virtual disk, and can use Android permissions and native filesystem permissions to control access to the virtual filesystem. Lastly, libsqlfs is already a FUSE module. FUSE is already nicely integrated into most GNU/Linux distributions, and also available for Mac OS X and BSD. That means that the single file that represents a IOCipher file system could also be easily mounted on GNU/Linux, Mac OS X and BSD (we are already doing this on Debian and Ubuntu, Mac OS X will require some more work).&lt;/p&gt;

&lt;p&gt;All in all we think this approach will make filesystem encryption easier to include in Android apps, and also make it possible to have the encryption be trivial to setup and very transparent to the user. Its close to being usable, once it is, we’ll post instructions on how you can use it in your apps. For now, you can follow our progress here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/guardianproject/libsqlfs&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/guardianproject/libsqlfs&#34;&gt;https://github.com/guardianproject/libsqlfs&lt;/a&gt;&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/guardianproject/libsqlfs&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/guardianproject/IOCipher&#34;&gt;https://github.com/guardianproject/IOCipher&lt;/a&gt;&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://github.com/guardianproject/libsqlfs&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://guardianproject.info/wiki/Products_of_PSST_Work&#34;&gt;https://guardianproject.info/wiki/Products_of_PSST_Work&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adventures in Porting: GnuPG 2.1.x to Android!</title>
      <link>https://guardianproject.github.io/info/2012/03/15/adventures-in-porting-gnupg-2.1.x-to-android/</link>
      <pubDate>Thu, 15 Mar 2012 13:00:30 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2012/03/15/adventures-in-porting-gnupg-2.1.x-to-android/</guid>
      <description>&lt;p&gt;PGP started with Phil Zimmerman’s Pretty Good Privacy, which is now turned into an open IETF standard known as OpenPGP. These days, the reference OpenPGP platform seems to be &lt;a href=&#34;http://gnupg.org/&#34;&gt;GnuPG&lt;/a&gt;: its used by Debian and all its derivatives in the OS itself for verifying packages and more. It is also at the core of all Debian development work, allowing the very diffuse body of Debian, Ubuntu, etc developers to communicate and share work effectively while maintaining a high level of security. It is also used for email encryption in Thunderbird + Enigmail, Apple Mail + GPGMail, GNOME Evolution, KDE KMail, Microsoft Outlook + Gpg4win.&lt;/p&gt;

&lt;div id=&#34;attachment_1651&#34; style=&#34;width: 160px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2012/03/Encryption.jpg&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-1651&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/03/Encryption-150x150.jpg&#34; alt=&#34;lots of one and zeros&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;size-thumbnail wp-image-1651&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-1651&#34; class=&#34;wp-caption-text&#34;&gt;
    Yes, encryption means lots of ones and zeros that you can&#39;t read!
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;After actively using GnuPG for a few years, I thought it would be a good idea and not too difficult to port it to Android. I dove in and started with the code from git since I was hoping to involve the GnuPG developers. I had recently seen that they were stopping development on the 1.4.x branch, so the 2.1.x branch seemed like the logical choice to give us a reasonably complete OpenPGP implementation. Now I am happy to say we have it working on Android, with a couple of loose ends to tie up in order to get everything working.&lt;/p&gt;

&lt;p&gt;One thing I do have to say is that GnuPG has evolved into a large and elaborate project that not only covers OpenPGP, but also PGP/MIME and things that have nothing to do with PGP like AES symmetric encryption and S/MIME email cryptography. That means it know is made up of many moving parts. It uses many libraries: libassuan, libgpg-error, libksba, npth, openldap, pinentry, and more if you want. It is also made up of a handful of programs to handle different aspects: &lt;code&gt;gpg&lt;/code&gt; is the command line interface, &lt;code&gt;gpg-agent&lt;/code&gt; seems to be the central key handler and task broker, &lt;code&gt;dirmngr&lt;/code&gt; manages connections with directories like OpenPGP keyservers, &lt;code&gt;pinentry&lt;/code&gt; handles getting passphrases from the user, etc.&lt;/p&gt;

&lt;p&gt;The complexity does not stop there for our purposes: we need a Java API so we can make an Android app. So next up we built the &lt;a href=&#34;http://www.gnupg.org/related_software/gpgme/&#34; target=&#34;_blank&#34;&gt;GPGME&lt;/a&gt; (Gnu Privacy Guard Made Easy) library to provide a C/C++ API which is then wrapped in &lt;a href=&#34;https://github.com/smartrevolution/gnupg-for-java&#34; target=&#34;_blank&#34;&gt;gpgme-for-java&lt;/a&gt;, a JNI library to make the GPGME functions available in Java. And just to heap on the layers, we are making a GUI on top of all that so that when you use it, you have no idea that all these little pieces that I have just described are even there at all.&lt;/p&gt;

&lt;p&gt;You can follow our progress on this work on our &lt;a href=&#34;https://guardianproject.info/wiki/PSST&#34; target=&#34;_blank&#34;&gt;PSST wiki: &lt;a href=&#34;https://guardianproject.info/wiki/PSST&#34;&gt;https://guardianproject.info/wiki/PSST&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;_(coming soon: sketching a mobile UI for OpenPGP, follow our notes here: &lt;a href=&#34;https://guardianproject.info/wiki/GnuPrivacyGuard_for_Android&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://guardianproject.info/wiki/GnuPrivacyGuard_for_Android&#34;&gt;https://guardianproject.info/wiki/GnuPrivacyGuard_for_Android&lt;/a&gt;&lt;/a&gt;)_&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Our new F-Droid App Repository (out of date!)</title>
      <link>https://guardianproject.github.io/info/2012/03/15/our-new-f-droid-app-repository-out-of-date/</link>
      <pubDate>Thu, 15 Mar 2012 01:27:43 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2012/03/15/our-new-f-droid-app-repository-out-of-date/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: this blog post has been changed to reference our new FDroid repository at &lt;a href=&#34;https://guardianproject.info/fdroid&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://guardianproject.info/fdroid&#34;&gt;https://guardianproject.info/fdroid&lt;/a&gt;&lt;/a&gt;. If you are still using the old one originally described here which has the URL &lt;a href=&#34;https://guardianproject.info/repo&#34;&gt;https://guardianproject.info/repo&lt;/a&gt;, you should switch to the new repo as soon as possible!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For all of you out there looking for a safe way to find and download apps outside of the Play Store (aka Android Market) or random, sketchy third-party app stores and file sharing sites, then your wait is over:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;a href=&#34;http://f-droid.org&#34;&gt;FDroid Repository&lt;/a&gt; is an easily-installable catalogue of FOSS applications for the Android platform. The server contains the details of multiple versions of each application, and the Android client makes it easy to browse, install them onto your device, and keep track of updates.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, F-Droid is like an app store for open-source. More importantly, there is not just one “store”. Anyone can deploy their own repositories of apps, or Repos, much like the way the Debian repo model works.&lt;/p&gt;

&lt;p&gt;We’ve now begun creating our own hosted F-Droid compliant repo where we can easily provide the latest greatest versions of all our apps. As we update the apps, F-Droid should notify you and allow you to update quickly and without hassle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick Steps for using F-Droid with Guardian Project Repo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1) Install the F-Droid Client app. You can get it here: &lt;a href=&#34;https://f-droid.org/FDroid.apk&#34;&gt;https://f-droid.org/FDroid.apk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) Run the app and go to Menu &amp;gt; Manage Repos&lt;/p&gt;

&lt;p&gt;3) Turn on the “Guardian Project Official Releases” repo&lt;/p&gt;

&lt;p&gt;3) &lt;del datetime=&#34;2015-02-24T16:10:07+00:00&#34;&gt;Enter: &lt;a href=&#34;https://guardianproject.info/repo/&#34;&gt;https://guardianproject.info/repo/&lt;/a&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;4) Optionally, disable the default repo if you just want GP apps&lt;/p&gt;

&lt;p&gt;5) Return to the main screen, and Menu &amp;gt; Update&lt;/p&gt;

&lt;p&gt;&lt;del datetime=&#34;2015-02-24T16:10:07+00:00&#34;&gt;6) Verify the repo fingerprint by clicking on the repo to see the repo details view. The fingerprint you see there should match this: &lt;code&gt;59050C8155DCA377F23D5A15B77D3713400CDBD8B42FBFBE0E3F38096E68CECE&lt;/code&gt;. &lt;/del&gt;&lt;/p&gt;

&lt;p&gt;From here you will see the “Available” tab for apps you don’t have the “Installed” tab for apps you have the latest version of, and the “Updates” tab for apps you have, but that are not up to date.&lt;/p&gt;

&lt;p&gt;You can open each app by browsing and selecting them, and then via Menu options, choose to install them, or access their websites, source code links, or issue tracking pages.&lt;/p&gt;

&lt;div id=&#39;gallery-6&#39; class=&#39;gallery galleryid-1632 gallery-columns-3 gallery-size-thumbnail&#39;&gt;
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2012/03/cats.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/03/cats-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2012/03/device-2012-03-15-110254.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/03/device-2012-03-15-110254-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2012/03/device-2012-03-15-110305.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/03/device-2012-03-15-110305-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;br style=&#34;clear: both&#34; /&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2012/03/device-2012-03-15-110320.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/03/device-2012-03-15-110320-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2012/03/device-2012-03-15-110341.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/03/device-2012-03-15-110341-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2012/03/device-2012-03-15-110351.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/03/device-2012-03-15-110351-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;br style=&#34;clear: both&#34; /&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2012/03/device-2012-03-15-110404.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/03/device-2012-03-15-110404-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2012/03/device-2012-03-15-110434.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/03/device-2012-03-15-110434-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;br style=&#39;clear: both&#39; /&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Don’t Get Burned, Anonymize Your Fire</title>
      <link>https://guardianproject.github.io/info/2011/11/16/dont-get-burned-anonymize-your-fire/</link>
      <pubDate>Wed, 16 Nov 2011 22:37:24 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2011/11/16/dont-get-burned-anonymize-your-fire/</guid>
      <description>&lt;p&gt;Thanks to Jesse Vincent, aka &lt;a href=&#34;https://twitter.com/obra&#34;&gt;@obra&lt;/a&gt; of the &lt;a href=&#34;https://code.google.com/p/k9mail/&#34;&gt;K-9 mail project&lt;/a&gt;, we can say that &lt;a href=&#34;https://guardianproject.info/apps/orbot&#34;&gt;Orbot (Tor on Android)&lt;/a&gt; and &lt;a href=&#34;https://guardianproject.info/apps/orweb&#34;&gt;Orweb (Privacy Browser)&lt;/a&gt; work just fine on the new &lt;a href=&#34;http://www.amazon.com/Kindle-Fire-Amazon-Tablet/dp/B0051VVOB2&#34;&gt;Amazon Kindle Fire&lt;/a&gt;. This means that while everything you do through Amazon’s store and browser are tracked and accounted for by Team Bezos, you can use our apps to more safely and privately access web content through the &lt;a href=&#34;https://torproject.org&#34;&gt;Tor network&lt;/a&gt;. While we are mostly &lt;a href=&#34;https://guardianproject.info/hardware/&#34;&gt;Nook Color fans&lt;/a&gt; around here, we know that the Kindle Fire is going to be quite popular this Christmas, and are glad to see that mobile privacy now has a toehold on the device from Seattle.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://twitpic.com/7f2bo3&#34;&gt;&lt;img title=&#34;448565907&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2011/11/448565907-300x224.jpg&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;224&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This provides a nice counterpoint to some of the &lt;a href=&#34;http://www.slashgear.com/eff-talks-silk-browser-privacy-with-amazon-19189281/&#34;&gt;earlier privacy concerns about the Amazon Silk browser&lt;/a&gt;, which proxies all your http connections through their data center. In addition, the fact that our &lt;a href=&#34;https://gitweb.torproject.org/orbot.git/blob_plain/HEAD:/BUILD&#34;&gt;very complex apps&lt;/a&gt; work without modification on Amazon’s stripped down flavor of Android, shows that the reports of fragmentation have been greatly exaggerated. From our perspective, the power of Android comes from the compatibility of the underlying platform APIs and Linux-based foundation, and not about having a one size fits all user interface or a single-point of control app marketplace.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2011/11/Kindle-Fire.jpg&#34;&gt;&lt;img class=&#34;size-medium wp-image-1306 alignnone&#34; title=&#34;Kindle-Fire&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2011/11/Kindle-Fire.jpg&#34; alt=&#34;&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2011/11/Kindle-Fire.jpg 500w, https://guardianproject.info/wp-content/uploads/2011/11/Kindle-Fire-300x168.jpg 300w&#34; sizes=&#34;(max-width: 500px) 100vw, 500px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Installation Instructions&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1) Under the settings section labeled “Device,” there is an option that says “Allow Installation of Applications From Unknown Sources.” Enable this!&lt;/p&gt;

&lt;p&gt;2) Then download these files directly via the Fire’s browser, or side-load them from the desktop using the Android SDK “adb” tool.&lt;/p&gt;

&lt;p&gt;Orbot: &lt;a href=&#34;https://www.torproject.org/dist/android/Orbot-1.0.6-Tor-0.2.3.7-alpha-FINAL.apk&#34;&gt;https://www.torproject.org/dist/android/Orbot-1.0.6-Tor-0.2.3.7-alpha-FINAL.apk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Orweb: &lt;a href=&#34;https://github.com/downloads/guardianproject/Orweb/Orwebv2-20010809-0.2.2.apk&#34;&gt;https://github.com/downloads/guardianproject/Orweb/Orwebv2-20010809-0.2.2.apk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;3) Start Orbot, follow the wizard, and press the power up button to connect to Tor.&lt;/p&gt;

&lt;p&gt;4) Start Orweb to connect to the Tor Check page to verify your connection, then browse away to your (private) heart’s content.&lt;/p&gt;

&lt;p&gt;5) Do a happy dance because your Kindle Fire just got way more l33t and slightly less p0wn3d.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Orbot Update: New Setup Wizard at Startup</title>
      <link>https://guardianproject.github.io/info/2010/07/29/orbot-update-new-setup-wizard-at-startup/</link>
      <pubDate>Thu, 29 Jul 2010 17:17:08 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2010/07/29/orbot-update-new-setup-wizard-at-startup/</guid>
      <description>&lt;p&gt;We’ve been working away at the 0.0.9 release of &lt;a href=&#34;https://guardianproject.info/apps/orbot&#34;&gt;Orbot&lt;/a&gt; over the last few months, and have put a decent amount of effort into usability. Specifically, we hoped to better communicate to users what it means to run Tor on your Android phone. In addition, we wanted to clearly lay out how the various configuration options help to improve your mobile web anonymity and ability to circumvent web filters and tracking by your mobile service provider.&lt;/p&gt;

&lt;p&gt;The screenshots below are what you see the first time you install and run Orbot, and also whenever you open the “Help” menu. One important thing to point out is that Orbot can run with or without root, and our setup UI responds to having the capability or not accordingly.&lt;/p&gt;

&lt;p&gt;Ultimately our goal is to provide a useful bootstrap experience for novice and advanced users alike. We welcome your feedback.&lt;/p&gt;

&lt;div id=&#39;gallery-3&#39; class=&#39;gallery galleryid-488 gallery-columns-3 gallery-size-thumbnail&#39;&gt;
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2010/07/orbot-1.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2010/07/orbot-1-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; aria-describedby=&#34;gallery-3-489&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2010/07/orbot-1-150x150.png 150w, https://guardianproject.info/wp-content/uploads/2010/07/orbot-1-64x64.png 64w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
    
    &lt;dd class=&#39;wp-caption-text gallery-caption&#39; id=&#39;gallery-3-489&#39;&gt;
      permissions… we actually will only be asking for INTERNET – so don’t mind the “phone status” permission
    &lt;/dd&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2010/07/orbot-2.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2010/07/orbot-2-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; aria-describedby=&#34;gallery-3-490&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2010/07/orbot-2-150x150.png 150w, https://guardianproject.info/wp-content/uploads/2010/07/orbot-2-64x64.png 64w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
    
    &lt;dd class=&#39;wp-caption-text gallery-caption&#39; id=&#39;gallery-3-490&#39;&gt;
      Your basic install screen
    &lt;/dd&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2010/07/orbot-3.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2010/07/orbot-3-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; aria-describedby=&#34;gallery-3-491&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2010/07/orbot-3-150x150.png 150w, https://guardianproject.info/wp-content/uploads/2010/07/orbot-3-64x64.png 64w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
    
    &lt;dd class=&#39;wp-caption-text gallery-caption&#39; id=&#39;gallery-3-491&#39;&gt;
      A friendly welcome
    &lt;/dd&gt;
  &lt;/dl&gt;
  
  &lt;br style=&#34;clear: both&#34; /&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2010/07/orbot-4.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2010/07/orbot-4-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; aria-describedby=&#34;gallery-3-492&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2010/07/orbot-4-150x150.png 150w, https://guardianproject.info/wp-content/uploads/2010/07/orbot-4-64x64.png 64w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
    
    &lt;dd class=&#39;wp-caption-text gallery-caption&#39; id=&#39;gallery-3-492&#39;&gt;
      About Orbot!
    &lt;/dd&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2010/07/orbot-5.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2010/07/orbot-5-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; aria-describedby=&#34;gallery-3-493&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2010/07/orbot-5-150x150.png 150w, https://guardianproject.info/wp-content/uploads/2010/07/orbot-5-64x64.png 64w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
    
    &lt;dd class=&#39;wp-caption-text gallery-caption&#39; id=&#39;gallery-3-493&#39;&gt;
      we ask nicely to get root permissions, if possible
    &lt;/dd&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2010/07/orbot-7.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2010/07/orbot-7-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; aria-describedby=&#34;gallery-3-495&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2010/07/orbot-7-150x150.png 150w, https://guardianproject.info/wp-content/uploads/2010/07/orbot-7-64x64.png 64w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
    
    &lt;dd class=&#39;wp-caption-text gallery-caption&#39; id=&#39;gallery-3-495&#39;&gt;
      if the user doesn’t have root, we make sure they understand the implications
    &lt;/dd&gt;
  &lt;/dl&gt;
  
  &lt;br style=&#34;clear: both&#34; /&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2010/07/orbot-8.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2010/07/orbot-8-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; aria-describedby=&#34;gallery-3-496&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2010/07/orbot-8-150x150.png 150w, https://guardianproject.info/wp-content/uploads/2010/07/orbot-8-64x64.png 64w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
    
    &lt;dd class=&#39;wp-caption-text gallery-caption&#39; id=&#39;gallery-3-496&#39;&gt;
      Offer direct downloads of Orbot/Tor enabled apps
    &lt;/dd&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2010/07/orbot-9.5.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2010/07/orbot-9.5-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; aria-describedby=&#34;gallery-3-497&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2010/07/orbot-9.5-150x150.png 150w, https://guardianproject.info/wp-content/uploads/2010/07/orbot-9.5-64x64.png 64w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
    
    &lt;dd class=&#39;wp-caption-text gallery-caption&#39; id=&#39;gallery-3-497&#39;&gt;
      (Root only) choose whether to “Torify All” or choose app by app
    &lt;/dd&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2010/07/orbot-9.6.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2010/07/orbot-9.6-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; aria-describedby=&#34;gallery-3-498&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2010/07/orbot-9.6-150x150.png 150w, https://guardianproject.info/wp-content/uploads/2010/07/orbot-9.6-64x64.png 64w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
    
    &lt;dd class=&#39;wp-caption-text gallery-caption&#39; id=&#39;gallery-3-498&#39;&gt;
      (Root only) Select to send all network traffic through Tor
    &lt;/dd&gt;
  &lt;/dl&gt;
  
  &lt;br style=&#34;clear: both&#34; /&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2010/07/orbot-9.7.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2010/07/orbot-9.7-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; aria-describedby=&#34;gallery-3-499&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2010/07/orbot-9.7-150x150.png 150w, https://guardianproject.info/wp-content/uploads/2010/07/orbot-9.7-64x64.png 64w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
    
    &lt;dd class=&#39;wp-caption-text gallery-caption&#39; id=&#39;gallery-3-499&#39;&gt;
      (Root only) Select which apps you want to route through Tor
    &lt;/dd&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2010/07/orbot-9.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2010/07/orbot-9-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; aria-describedby=&#34;gallery-3-500&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2010/07/orbot-9-150x150.png 150w, https://guardianproject.info/wp-content/uploads/2010/07/orbot-9-64x64.png 64w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
    
    &lt;dd class=&#39;wp-caption-text gallery-caption&#39; id=&#39;gallery-3-500&#39;&gt;
      This is the final step
    &lt;/dd&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2010/07/orbot-10.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2010/07/orbot-10-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; aria-describedby=&#34;gallery-3-501&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2010/07/orbot-10-150x150.png 150w, https://guardianproject.info/wp-content/uploads/2010/07/orbot-10-64x64.png 64w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
    
    &lt;dd class=&#39;wp-caption-text gallery-caption&#39; id=&#39;gallery-3-501&#39;&gt;
      We’ve got root!
    &lt;/dd&gt;
  &lt;/dl&gt;
  
  &lt;br style=&#34;clear: both&#34; /&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>How To: Lockdown Your Mobile E-Mail</title>
      <link>https://guardianproject.github.io/info/2010/07/09/how-to-lockdown-your-mobile-e-mail/</link>
      <pubDate>Fri, 09 Jul 2010 11:00:25 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2010/07/09/how-to-lockdown-your-mobile-e-mail/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Update 2015-04-27&lt;/strong&gt;: _We now recommend &lt;a href=&#34;http://www.openkeychain.org/&#34; target=&#34;_blank&#34;&gt;OpenKeychain&lt;/a&gt; over APG, the app described in this blog post. The set up is drastically easier, so you probably don’t even need this HOWTO anymore. Start by downloading K-9 and &lt;a href=&#34;http://www.openkeychain.org/&#34; target=&#34;_blank&#34;&gt;OpenKeychain&lt;/a&gt;, then go into OpenKeychain and start the config there._&lt;/p&gt;

&lt;p&gt;Over the past few years it’s become &lt;a href=&#34;https://www.youtube.com/watch?v=Gm8NdNy4wOM&#34;&gt;increasingly popular&lt;/a&gt; to sound the call that ‘&lt;a href=&#34;http://www.pcmag.com/article2/0,2817,2343209,00.asp&#34; title=&#34;dead&#34;&gt;email is dead&lt;/a&gt;{#y8a0}.’ And while many complementary forms of synchronous and asynchronous communication – from IM to social networking – have evolved since email first came on the scene, it’s hard to see email suddenly disappearing from its role as the most important way organizations communicate. I expect to be scooting around on my &lt;a href=&#34;https://en.wikipedia.org/wiki/Hoverboard&#34;&gt;hoverboard&lt;/a&gt; by the time email goes the way of the dinosaur.&lt;/p&gt;

&lt;p&gt;Unfortunately, many of the protocols involved in sending and receiving e-mail are not considered secure – in the sense that they are vulnerable to eavesdropping. Simple Mail Transport Protocol (SMTP) – the Internet standard for e-mail transmission across IP networks  most commonly used by client applications for sending messages to a mail server for relaying – is typically implemented without any type of transport encryption. Internet Message Access Protocol (IMAP) and Post Office Protocol (POP) suffer from the same eavesdropping issues as SMTP when implemented without transport encryption. Even when SMTP is implemented with transport encryption it does not, by default, require the authentication of e-mail message senders. As a result, mail servers cannot be sure that the senders of messages are really who they claim to be. And even though POP and IMAP require users to authenticate, messages are sent and delivered using SMTP.&lt;/p&gt;

&lt;p&gt;The result is a situation where the &lt;em&gt;recipient&lt;/em&gt; of an e-mail message can be positively identified but the &lt;em&gt;sender&lt;/em&gt; cannot. Along with the eavesdropping concerns mentioned at the top of the paragraph, this is an alarming state of affairs. Imagine if the same were true of snail mail – there would be rioting in the streets! Fortunately there has been a lot of great work done to combat these fears – the main issue being that the problem itself is  still one  that is often ignored or not fully understood by the layperson. As secure solutions for mobile platforms gain momentum, we’re hoping to change things.&lt;/p&gt;

&lt;p&gt;Enter &lt;a href=&#34;https://en.wikipedia.org/wiki/Pretty_Good_Privacy#OpenPGP&#34;&gt;OpenPGP&lt;/a&gt;, an IETF standard for encryption and decryption of data. The version of OpenPGP that exists today is the evolution of PGP, which was created in 1991 as a means for secure BBSs communication and message storage (it ironically also stands for “Pretty Good Privacy”). Why do you need PGP? In the words of its inventory, Phil Zimmerman: “&lt;a href=&#34;http://www.spectacle.org/795/byzim.html&#34;&gt;It empowers people to take their privacy into their own hands&lt;/a&gt;.” How it works is a whole other story – one too complex for the purposes of this posting – but we’ll do our  best to scrape the surface quickly. Disclaimer: The following is meant solely as an introduction. There are many people out there who are experts in these topics, and we welcome any and all comments – especially if we misstate or misrepresent anything!&lt;/p&gt;

&lt;p&gt;PGP uses a serial combination of hashing, data compression, symmetric-key cryptography, and, finally, public-key cryptography. From the user’s perspective, it creates two &lt;a href=&#34;https://en.wikipedia.org/wiki/Cryptographic_key&#34;&gt;cryptographic keys&lt;/a&gt; to encrypt and decrypt data. The first of these two is called the &lt;a href=&#34;https://en.wikipedia.org/wiki/Public-key&#34;&gt;Public Key&lt;/a&gt; – which can be freely shared with anyone the user wishes and is used by others to encrypt data so that it can be decrypted by &lt;strong&gt;only the intended recipient&lt;/strong&gt;. The second key is the Private Key, which should be kept as private and safe as possible. It is used to decrypt data that has been encrypted using a specific Public Key. As long as the Private Key is kept secret, only the owner is  able to decrypt data that has been encrypted with a Public Key. One problem with older methods of encryption was the relative ease with which codes could be broken. With increasingly powerful computers that are able to crack codes via pure ‘brute force,’ encoding methods must be incredibly complex to stand up. To combat this, PGP uses a key that is astronomically large,  meaning that the security of PGP encryption lies entirely with the key as opposed to keeping the method for key generation a secret. In fact, the methods that PGP encryption uses are known and widely documented. In addition, the size of keys can be increased whenever necessary to stay one step ahead of technological advances. And for the time being, each of the algorithms in current use by PGP is not known to have cryptanalytic weaknesses.&lt;/p&gt;

&lt;p&gt;So how secure does this make your information? Italian Police, the &lt;a href=&#34;http://www.pcworld.com/article/110841/pgp_encryption_proves_powerful.html&#34;&gt;FBI&lt;/a&gt;, and &lt;a href=&#34;http://www.theregister.co.uk/2007/11/14/ripa_encryption_key_notice/&#34;&gt;British police&lt;/a&gt; have been unable to crack its security and have resorted to demanding private keys. It’s been likened as “the closest you’re likely to get to military-grade encryption” by cryptographer &lt;a href=&#34;https://en.wikipedia.org/wiki/Bruce_Schneier&#34;&gt;Bruce Schneier&lt;/a&gt;. Short answer: pretty darn good, as long as you guard your private key wisely.&lt;/p&gt;

&lt;p&gt;You’ve probably guessed by now that the reason for this posting is to show you how to effectively use OpenPGP to secure your mobile email. And while we would’ve loved to just jump right into the tutorial, there are a few more things you should know first. &lt;a href=&#34;https://code.google.com/p/android-privacy-guard/&#34; title=&#34;Android Privacy Guard&#34;&gt;Android Privacy Guard&lt;/a&gt;{#udlg} (or APG for short), is a first step at bringing &lt;a href=&#34;https://en.wikipedia.org/wiki/Pretty_Good_Privacy&#34; title=&#34;PGP&#34;&gt;OpenPGP&lt;/a&gt;{#qtjc} to the Android platform, letting you manage OpenPGP keys directly from your Android phone – and use them to encrypt, sign and decrypt emails and files. &lt;a href=&#34;http://groups.google.com/group/k-9-mail/browse_thread/thread/921051bc0a61ed0b/d6085b925805ebf2?lnk=raot&#34;&gt;Very recently&lt;/a&gt; the teams behind APG and the popular, open-source Android email client &lt;a href=&#34;https://code.google.com/p/k9mail/&#34;&gt;K-9 Mail&lt;/a&gt; have joined forces in a limited edition &lt;a href=&#34;https://en.wikipedia.org/wiki/Marvel_Team-Up&#34;&gt;team-up&lt;/a&gt; to create a beta version of K-9 that plays nice with APG quite seamlessly. We’ve been using it as our default email solution at Guardian for weeks now and want to share it with you!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Currently APG only supports importing and deleting keys – not generating them – so you’ve got to use a desktop implementation of OpenPGP (such as &lt;a href=&#34;http://www.gnupg.org/&#34; title=&#34;GNU Privacy Guard&#34;&gt;GNU Privacy Guard&lt;/a&gt;{#vrm_}) to actually generate your keypair if you don’t already have one. A number of front-end applications and libraries are available to perform this task. If you already have a keypair set up, you should skip the first step.&lt;/p&gt;

&lt;p style=&#34;padding-left: 30px;&#34;&gt;
  &lt;strong&gt;1. Download and Install GnuPG Generate an OpenPGP keypair&lt;/strong&gt;
&lt;/p&gt;

&lt;p style=&#34;padding-left: 30px;&#34;&gt;
  Install GnuPG  &lt;a href=&#34;http://www.gnupg.org/download.html&#34;&gt;here&lt;/a&gt;. There are binaries available for &lt;a href=&#34;http://www.gnupg.org/download/supported_systems.en.html&#34;&gt;whatever OS flavor&lt;/a&gt; you prefer, and since they do a great job of making documentation and &lt;a href=&#34;http://www.dewinter.com/gnupg_howto/english/GPGMiniHowto.html&#34;&gt;How-To Guides&lt;/a&gt; available, we’ll skip the part where we reinvent the wheel.
&lt;/p&gt;

&lt;p style=&#34;padding-left: 30px;&#34;&gt;
  &lt;strong&gt;2. Generate and export your keypair&lt;/strong&gt;
&lt;/p&gt;

&lt;p style=&#34;padding-left: 30px;&#34;&gt;
  Follow the instructions &lt;a href=&#34;http://www.dewinter.com/gnupg_howto/english/GPGMiniHowto-3.html#ss3.1&#34;&gt;here&lt;/a&gt; to create a new keypair. &lt;a href=&#34;http://www.dewinter.com/gnupg_howto/english/GPGMiniHowto-3.html#ss3.2&#34;&gt;Export&lt;/a&gt; your public and private keys (re-direct from stdout to a file) and stick that file on your Android device’s SD card. Usually it’s best to create a new folder /APG to keep things organized, especially if your SD card is a mess like ours 🙂
&lt;/p&gt;

&lt;p style=&#34;padding-left: 30px;&#34;&gt;
  &lt;strong&gt;3. Download APG and import your keys&lt;/strong&gt;
&lt;/p&gt;

&lt;p style=&#34;padding-left: 30px;&#34;&gt;
  &lt;strong&gt; &lt;/strong&gt;If you don’t already have it, download Android Privacy Guard from its repository &lt;a href=&#34;https://code.google.com/p/android-privacy-guard/downloads/list&#34;&gt;here&lt;/a&gt; or point your barcode scanner to the QR code below. You can also find it on the Market if you prefer.
&lt;/p&gt;

&lt;p style=&#34;padding-left: 30px;&#34;&gt;
  &lt;span style=&#34;line-height: 1px; font-size: 13.2px;&#34;&gt; &lt;/span&gt;
&lt;/p&gt;

&lt;p style=&#34;padding-left: 30px; text-align: center;&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2010/06/qrcode_apg.png&#34;&gt;&lt;img class=&#34;size-full wp-image-385 aligncenter&#34; title=&#34;qrcode_apg&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2010/06/qrcode_apg.png&#34; alt=&#34;&#34; width=&#34;120&#34; height=&#34;120&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2010/06/qrcode_apg.png 120w, https://guardianproject.info/wp-content/uploads/2010/06/qrcode_apg-64x64.png 64w&#34; sizes=&#34;(max-width: 120px) 100vw, 120px&#34; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p style=&#34;padding-left: 30px;&#34;&gt;
  Fire up APG and select ‘Manage Public Keys’ from the menu:
&lt;/p&gt;

&lt;p style=&#34;padding-left: 30px; text-align: center;&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2010/06/apg_menu1.png&#34;&gt;&lt;img class=&#34;size-medium wp-image-390 aligncenter&#34; title=&#34;apg_menu&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2010/06/apg_menu1-180x300.png&#34; alt=&#34;&#34; width=&#34;180&#34; height=&#34;300&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2010/06/apg_menu1-180x300.png 180w, https://guardianproject.info/wp-content/uploads/2010/06/apg_menu1.png 480w&#34; sizes=&#34;(max-width: 180px) 100vw, 180px&#34; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p style=&#34;padding-left: 30px; text-align: center;&#34;&gt;
  &lt;p style=&#34;padding-left: 30px;&#34;&gt;
    From the ‘Manage Public Keys’ screen, select ‘Import Keys’:
  &lt;/p&gt;
  

&lt;p&gt;&lt;p style=&#34;padding-left: 30px; text-align: center;&#34;&gt;
    &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2010/06/apg_manage_public_keys_blur.png&#34;&gt;&lt;img class=&#34;size-medium wp-image-391 aligncenter&#34; title=&#34;apg_manage_public_keys_blur&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2010/06/apg_manage_public_keys_blur-180x300.png&#34; alt=&#34;&#34; width=&#34;180&#34; height=&#34;300&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2010/06/apg_manage_public_keys_blur-180x300.png 180w, https://guardianproject.info/wp-content/uploads/2010/06/apg_manage_public_keys_blur.png 480w&#34; sizes=&#34;(max-width: 180px) 100vw, 180px&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p style=&#34;padding-left: 30px;&#34;&gt;
    &lt;p style=&#34;padding-left: 30px;&#34;&gt;
      From the popup dialog, select the public key that you’ve transferred to your SD card. It’s helpful to use a file browser program like Astro File Manager if you don’t already have it installed:
    &lt;/p&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p style=&amp;quot;padding-left: 30px; text-align: center;&amp;quot;&amp;gt;
  &amp;lt;span style=&amp;quot;line-height: 8px;&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;https://guardianproject.info/wp-content/uploads/2010/06/apg_import_keys_blur.png&amp;quot;&amp;gt;&amp;lt;img class=&amp;quot;size-medium wp-image-392 aligncenter&amp;quot; title=&amp;quot;apg_import_keys_blur&amp;quot; src=&amp;quot;https://guardianproject.info/wp-content/uploads/2010/06/apg_import_keys_blur-180x300.png&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;180&amp;quot; height=&amp;quot;300&amp;quot; srcset=&amp;quot;https://guardianproject.info/wp-content/uploads/2010/06/apg_import_keys_blur-180x300.png 180w, https://guardianproject.info/wp-content/uploads/2010/06/apg_import_keys_blur.png 480w&amp;quot; sizes=&amp;quot;(max-width: 180px) 100vw, 180px&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;/p&amp;gt;

&amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
  &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
    Once your public key(s) are successfully imported, return to the main APG menu, select ‘Manage Secret Keys’ and repeat the steps above for your Private Key.
  &amp;lt;/p&amp;gt;

  &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
    &amp;lt;strong&amp;gt;4. Download and Configure K-9 Mail&amp;lt;/strong&amp;gt;
  &amp;lt;/p&amp;gt;

  &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
    Download the latest version of K-9 mail featuring APG integration. You can find it on the Downloads page &amp;lt;a href=&amp;quot;https://code.google.com/p/k9mail/downloads/list&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt; or, again, point your barcode scanner to the QR Code below. Whatever floats your boat.
  &amp;lt;/p&amp;gt;

  &amp;lt;p style=&amp;quot;padding-left: 30px; text-align: center;&amp;quot;&amp;gt;
    &amp;lt;img class=&amp;quot;aligncenter&amp;quot; src=&amp;quot;https://chart.apis.google.com/chart?chs=150x150&amp;amp;cht=qr&amp;amp;chl=http://k9mail.googlecode.com/files/k9-apg-2900-beta.apk&amp;amp;chld=L|1&amp;amp;choe=UTF-8&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;125&amp;quot; height=&amp;quot;125&amp;quot; /&amp;gt;
  &amp;lt;/p&amp;gt;

  &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
    Set up your email account by entering your email address and password, then give it a name.
  &amp;lt;/p&amp;gt;

  &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
    &amp;lt;a href=&amp;quot;https://guardianproject.info/wp-content/uploads/2010/07/k9_setup1.png&amp;quot;&amp;gt;&amp;lt;img class=&amp;quot;aligncenter size-medium wp-image-451&amp;quot; title=&amp;quot;k9_setup&amp;quot; src=&amp;quot;https://guardianproject.info/wp-content/uploads/2010/07/k9_setup1-168x300.png&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;168&amp;quot; height=&amp;quot;300&amp;quot; srcset=&amp;quot;https://guardianproject.info/wp-content/uploads/2010/07/k9_setup1-168x300.png 168w, https://guardianproject.info/wp-content/uploads/2010/07/k9_setup1-84x150.png 84w, https://guardianproject.info/wp-content/uploads/2010/07/k9_setup1.png 480w&amp;quot; sizes=&amp;quot;(max-width: 168px) 100vw, 168px&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;
  &amp;lt;/p&amp;gt;

  &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
    &amp;lt;p style=&amp;quot;padding-left: 30px; text-align: center;&amp;quot;&amp;gt;
      &amp;lt;img class=&amp;quot;aligncenter&amp;quot; title=&amp;quot;k9_almost_done&amp;quot; src=&amp;quot;https://guardianproject.info/wp-content/uploads/2010/07/k9_almost_done-168x300.png&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;168&amp;quot; height=&amp;quot;300&amp;quot; /&amp;gt;
    &amp;lt;/p&amp;gt;

    &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
      For more popular accounts such as gmail, Yahoo!, etc., K-9 will automatically detect the correct configuration. For more complex accounts such as Exchange, please check out the K-9 wiki page &amp;lt;a href=&amp;quot;https://code.google.com/p/k9mail/w/list&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;.
    &amp;lt;/p&amp;gt;

    &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
      &amp;lt;strong&amp;gt;5. Send and Receive Encrypted Email!&amp;lt;/strong&amp;gt;
    &amp;lt;/p&amp;gt;

    &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
      Thanks to the integration effort by the teams at APG and K-9, actually using secure mobile email becomes easy. The compose screen features a prominent checkbox and button that allow you to sign and encrypt your outbound messages, respectively.
    &amp;lt;/p&amp;gt;

    &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
      &amp;lt;a href=&amp;quot;https://guardianproject.info/wp-content/uploads/2010/07/k9_compose.png&amp;quot;&amp;gt;&amp;lt;img class=&amp;quot;aligncenter size-medium wp-image-453&amp;quot; title=&amp;quot;k9_compose&amp;quot; src=&amp;quot;https://guardianproject.info/wp-content/uploads/2010/07/k9_compose-168x300.png&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;168&amp;quot; height=&amp;quot;300&amp;quot; srcset=&amp;quot;https://guardianproject.info/wp-content/uploads/2010/07/k9_compose-168x300.png 168w, https://guardianproject.info/wp-content/uploads/2010/07/k9_compose-84x150.png 84w, https://guardianproject.info/wp-content/uploads/2010/07/k9_compose.png 480w&amp;quot; sizes=&amp;quot;(max-width: 168px) 100vw, 168px&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;
    &amp;lt;/p&amp;gt;

    &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
      Decrypting messages with your private key is even easier and is literally a 1-touch experience:
    &amp;lt;/p&amp;gt;

    &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
      &amp;lt;a href=&amp;quot;https://guardianproject.info/wp-content/uploads/2010/07/k9_almost_done.png&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;a href=&amp;quot;https://guardianproject.info/wp-content/uploads/2010/07/k9_view_decrypt.png&amp;quot;&amp;gt;&amp;lt;img class=&amp;quot;aligncenter size-medium wp-image-455&amp;quot; title=&amp;quot;k9_view_decrypt&amp;quot; src=&amp;quot;https://guardianproject.info/wp-content/uploads/2010/07/k9_view_decrypt-180x300.png&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;180&amp;quot; height=&amp;quot;300&amp;quot; srcset=&amp;quot;https://guardianproject.info/wp-content/uploads/2010/07/k9_view_decrypt-180x300.png 180w, https://guardianproject.info/wp-content/uploads/2010/07/k9_view_decrypt-90x150.png 90w, https://guardianproject.info/wp-content/uploads/2010/07/k9_view_decrypt.png 480w&amp;quot; sizes=&amp;quot;(max-width: 180px) 100vw, 180px&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt;
    &amp;lt;/p&amp;gt;

    &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
      &amp;lt;strong&amp;gt;Enjoy! &amp;lt;/strong&amp;gt;As always, please post all questions, concerns, and jokes (only good ones please) in the Comments section. We’re very excited about the powerful combination that these two apps bring and we’d love to hear from you!
    &amp;lt;/p&amp;gt;

    &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
      If you find any issues with APG, please report them &amp;lt;a href=&amp;quot;https://code.google.com/p/android-privacy-guard/issues/list&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;:
    &amp;lt;/p&amp;gt;

    &amp;lt;p style=&amp;quot;padding-left: 30px;&amp;quot;&amp;gt;
      &amp;lt;span style=&amp;quot;line-height: 13px;&amp;quot;&amp;gt;&amp;lt;span style=&amp;quot;line-height: 16px;&amp;quot;&amp;gt;Likewise, report issues with K-9 &amp;lt;a href=&amp;quot;https://code.google.com/p/k9mail/issues/list&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;. &amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;
    &amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
