<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Security on Guardian Project</title>
    <link>https://guardianproject.github.io/info/tags/security/</link>
    <description>Recent content in Security on Guardian Project</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 01 Feb 2025 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://guardianproject.github.io/info/tags/security/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>IOCipher 1.0 community reboot</title>
      <link>https://guardianproject.github.io/info/2025/02/01/iocipher-1.0-community-reboot/</link>
      <pubDate>Sat, 01 Feb 2025 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2025/02/01/iocipher-1.0-community-reboot/</guid>
      <description>

&lt;h2 id=&#34;iocipher-update-to-version-1-0&#34;&gt;IOCipher update to version 1.0&lt;/h2&gt;

&lt;p&gt;We are thrilled to announce that a community contributor has picked up maintaining a fork of IOCipher and updated to IOCipher 1.0,
designed to enhance your development experience and empower you to create more secure applications with ease. Here’s what’s new and why it matters to you:&lt;/p&gt;

&lt;h3 id=&#34;1-enhanced-features&#34;&gt;1. Enhanced Features&lt;/h3&gt;

&lt;p&gt;We introduced a few new features. Most notably IOCipher is also available on Desktop Java for Linux and Windows now. (Although not all IOCipher features are fully supported on Windows).
The latest release even includes some example code for accessing IOCipher VFS using Python.&lt;/p&gt;

&lt;h3 id=&#34;2-dependency-updates&#34;&gt;2. Dependency updates&lt;/h3&gt;

&lt;p&gt;We updated to the newest SQLCipher and OpenSSL.&lt;/p&gt;

&lt;h3 id=&#34;3-bug-fixes-and-stability&#34;&gt;3. Bug Fixes and Stability&lt;/h3&gt;

&lt;p&gt;Now your virtual files can be as large as you want, there is no longer a hard limit at 4 GB.
We fixed some bugs that testing the JNI code with ASAN has found.&lt;/p&gt;

&lt;h2 id=&#34;iocipher-encrypted-virtual-disk-for-android-and-linux-jvm&#34;&gt;IOCipher: Encrypted Virtual Disk (for Android and Linux JVM)&lt;/h2&gt;

&lt;p&gt;IOCipher is a virtual encrypted disk for apps without requiring the device to be rooted. It uses a clone of the standard java.io API for working with files. Just password handling &amp;amp; opening the virtual disk are what stand between developers and fully encrypted file storage. It is based on libsqlfs and SQLCipher.&lt;/p&gt;

&lt;p&gt;IOCipher is based on transactions in SQLite, which means that it does not require being mounted in the normal sense. There is no open state once a transaction is complete. Each read or write operation is a self-contained SQLite transaction, so if the file system is forcably quit, SQLite’s transactions prevent the whole file system from being corrupted. This is important in Android since an Activity or Service can be killed at any moment without warning.&lt;/p&gt;

&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Comes with &lt;strong&gt;all batteries included&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Secure transparent app-level &lt;strong&gt;virtual encrypted disk&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Multi-threaded access&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;No root&lt;/strong&gt; required&lt;/li&gt;
&lt;li&gt;Only &lt;strong&gt;three new methods&lt;/strong&gt; to learn: &lt;code&gt;VirtualFileSystem.get()&lt;/code&gt;, &lt;code&gt;VirtualFileSystem.mount(dbFile, password)&lt;/code&gt;, and &lt;code&gt;VirtualFileSystem.unmount()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Supports Android API 21 and above&lt;/li&gt;
&lt;li&gt;Supports Java version 8 and above on Desktop&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;adding-iocipher-to-your-app&#34;&gt;Adding IOCipher to your App&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s a minimal example for using IOCipher to encrypt all files your app is storing on a phone:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add to your project build.gradle
&lt;pre&gt;
allprojects {
repositories {
    google()
    mavenCentral()
    maven {
        url &amp;ldquo;&lt;a href=&#34;https://jitpack.io&amp;quot;&#34;&gt;https://jitpack.io&amp;quot;&lt;/a&gt;
    }
}
}
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;add to your module build.gradle
&lt;pre&gt;
implementation &amp;lsquo;com.github.zoff99:pkgs_guardianprojectIOCipher:1.0.5&amp;rsquo;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;get the VFS singleton using &lt;code&gt;VirtualFileSystem.get()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;on first run, create the container file with a password using &lt;code&gt;VirtualFileSystem.createNewContainer(dbFile, password)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;mount the container file with a password using &lt;code&gt;VirtualFileSystem.mount(dbFile, password)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;replace the relevant &lt;code&gt;java.io&lt;/code&gt; import statements with &lt;code&gt;info.guardianproject.iocipher&lt;/code&gt;
&lt;pre&gt;
import info.guardianproject.iocipher.File;
import info.guardianproject.iocipher.FileOutputStream;
import info.guardianproject.iocipher.FileReader;
import info.guardianproject.iocipher.IOCipherFileChannel;
import info.guardianproject.iocipher.VirtualFileSystem;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a full Android example project see: &lt;a href=&#34;https://github.com/zoff99/iocipher_pack/tree/master/007_example_android&#34;&gt;https://github.com/zoff99/iocipher_pack/tree/master/007_example_android&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;./android_example_app.png&#34; alt=&#34;Showing the Android IOCipher Example App running on the Android Emulator&#34; height=&#34;400px&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;source-code&#34;&gt;Source Code&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;all you need for your project: &lt;a href=&#34;https://github.com/zoff99/iocipher_pack&#34;&gt;https://github.com/zoff99/iocipher_pack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;optional&#34;&gt;optional:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;a simple test app for Android: &lt;a href=&#34;https://github.com/zoff99/iocipher_pack/tree/master/007_example_android&#34;&gt;https://github.com/zoff99/iocipher_pack/tree/master/007_example_android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;a simple example desktop file manager app: &lt;a href=&#34;https://github.com/zoff99/iocipher_pack/tree/master/004_example_jvm&#34;&gt;https://github.com/zoff99/iocipher_pack/tree/master/004_example_jvm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;a simple python example for Linux: &lt;a href=&#34;https://github.com/zoff99/iocipher_pack/tree/master/006_example_python&#34;&gt;https://github.com/zoff99/iocipher_pack/tree/master/006_example_python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;a simple C API example for Linux: &lt;a href=&#34;https://github.com/zoff99/iocipher_pack/tree/master/005_example_c&#34;&gt;https://github.com/zoff99/iocipher_pack/tree/master/005_example_c&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;a simple C API example for Windows: &lt;a href=&#34;https://github.com/zoff99/iocipher_pack/tree/master/005_example_c_win64&#34;&gt;https://github.com/zoff99/iocipher_pack/tree/master/005_example_c_win64&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the core: &lt;a href=&#34;https://github.com/zoff99/iocipher_pack/tree/master/002_src_libsqlfs&#34;&gt;https://github.com/zoff99/iocipher_pack/tree/master/002_src_libsqlfs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;usage-notes&#34;&gt;Usage notes&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;only one active mount per-app is supported&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>EU should not require sharing unpatched vulnerabilities</title>
      <link>https://guardianproject.github.io/info/2023/06/11/eu-should-not-require-sharing-unpatched-vulnerabilities/</link>
      <pubDate>Sun, 11 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2023/06/11/eu-should-not-require-sharing-unpatched-vulnerabilities/</guid>
      <description>&lt;p&gt;We, the undersigned organisations, write to express our concern with vulnerability disclosure requirements under the proposed Cyber Resilience Act (CRA). The CRA’s objective to encourage software publishers to patch vulnerabilities and report cyber incidents is salutary. However, the CRA’s mandatory disclosure of unmitigated vulnerabilities will undermine the security of digital products and the individuals who use them.&lt;/p&gt;

&lt;p&gt;The CRA would require organisations to disclose software vulnerabilities to government agencies within 24 hours of exploitation (&lt;em&gt;Cyber Resilience Act, Articles 11.1, 13.6, 14.4&lt;/em&gt;). However, such recently exploited vulnerabilities are unlikely to be mitigated within such a short time, leading to real-time databases of software with unmitigated vulnerabilities in the  possession of potentially dozens of government agencies. The more this kind of information is spread, the more likely it is to be misused for state intelligence or offensive purposes, or to be inadvertently exposed to adversaries before a mitigation is in place. In addition, laws that require disclosure of unmitigated vulnerabilities to government agencies create an international precedent that may be reflected by other countries.&lt;/p&gt;

&lt;p&gt;We call on you to help improve the CRA by including safeguards that help prevent misuse of vulnerability information:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Limit details. The regulation should not require disclosure of technical details of unmitigated vulnerabilities to government bodies that would enable another party to reconstruct the vulnerability or develop code to exploit it.&lt;/li&gt;
&lt;li&gt;Prohibit offensive uses. The regulation should include a clear restriction on the use of software vulnerabilities by public bodies, i.e. for intelligence, surveillance, or offensive purposes.&lt;/li&gt;
&lt;li&gt;Provide time to mitigate. In the absence of user harm or a substantial incident, organisations should have a reasonable time to remediate or address the vulnerability before requiring disclosure of its details to governments. A typical standard period for the mitigation of known vulnerabilities is 90 days.&lt;/li&gt;
&lt;li&gt;Secure vulnerability information. Agencies should be obligated to protect vulnerability information with robust security safeguards and shared only on a very strict need-to-know basis.&lt;/li&gt;
&lt;li&gt;Protect good faith security researchers. The regulation should distinguish between vulnerabilities discovered in good faith for defensive purposes and those that are exploited by malicious actors. Good faith security researchers who follow coordinated vulnerability disclosure standards should be protected from retaliation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We share the goal of strengthening the security of digital products and protecting individuals. The above safeguards will help the CRA achieve its goals of a more resilient and protective technology ecosystem. We appreciate your consideration of our recommendations.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://edri.org/wp-content/uploads/2023/06/CRA-Vulnerability-Handling-Open-Letter.pdf&#34;&gt;original PDF with all signers&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Steps towards trusted VPNs</title>
      <link>https://guardianproject.github.io/info/2023/02/28/steps-towards-trusted-vpns/</link>
      <pubDate>Tue, 28 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2023/02/28/steps-towards-trusted-vpns/</guid>
      <description>

&lt;p&gt;VPNs have become quite popular in recent years for a number of reasons, and more and more they are being touted as a privacy tool.  The question is whether using a VPN does improve privacy.  It is clear that VPNs are quite useful for getting access to things on the internet when direct connections are blocked.  VPN providers include a number of tactics in both their client apps and server infrastructure to ensure that their users are able to make a connection.  Then once users are connected, all of their traffic that goes over the VPN will see the internet from the point of view of the VPN&amp;rsquo;s server.  That is how VPNs &amp;ldquo;unblock&amp;rdquo; the internet.  In contrast, some are using VPNs to selectively block things, like making a system-wide &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-block-advertisements-at-the-dns-level-using-pi-hole-and-openvpn-on-ubuntu-16-04&#34;&gt;adblocker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To answer the question about whether they are a useful privacy tool, let&amp;rsquo;s start with the history of where VPNs came from.  VPN stands for Virtual Private Network.  They were developed by large companies with multiple offices and travelling employees.  The goal was to link together all of these offices so that internal data could be freely shared between them without that data going over the internet as easily readable unencrypted plain text.  Then travelling employees could also safely access the internal data via any internet connection.  The key piece of this picture is that the users, employees in this case, already had to trust their VPN provider.  The VPN provider was the company they worked for, and the data they were handling belonged to the company.  So there was no attempt to hide user information from the VPN provider.  Indeed quite the opposite: companies linked the VPN access to each employee&amp;rsquo;s &amp;ldquo;single sign-on&amp;rdquo; account.  Built into the design of VPNs is full trust of the VPN provider, with the aim of keeping the data private from the internet. This setup was also by design, since many large companies wanted to ensure their employees work laptops were still going through the corporate firewall, where the company could block certain sites (e.g. malware, porn), then also &lt;a href=&#34;https://www.fortinet.com/resources/cyberglossary/data-exfiltration&#34;&gt;monitor employees&lt;/a&gt; internet activity to ensure they are not exposing files that the company does not want to be public.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/File:Virtual_Private_Network_overview.svg&#34;&gt;&lt;img src=&#34;Virtual_Private_Network_overview.svg.png&#34; alt=&#34;Virtual Private Network overview&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This does not paint a good picture for a tool to protect privacy.  But there is hope!  It is possible to use a VPN to improve your privacy if you pay attention to some key details.  For VPN services to provide privacy, you have to put a lot of trust in the people who are operating the service.  The VPN provider can see &lt;strong&gt;all&lt;/strong&gt; of your traffic that goes over the VPN, and they have a strong link to your user account with them.  The privacy advantage of a VPN is that the destination sites cannot see which IP address your device is coming from, they will see the VPN provider&amp;rsquo;s IP address.  And your ISP will see you are using a VPN, but not which sites you visit.  With HTTPS, TLS, and end-to-end encryption being widespread, any encrypted content will be protected from the VPN provider also.  But the VPN provider can still see where you are connecting from, which sites and services you are using, what time of day, and even potentially correlate traffic to link activities of their users.  In other words, the VPN operator sees lots of metadata about you, so much so that they could paint a quite detailed portrait of your personal life if they ever did let their data be analyzed.&lt;/p&gt;

&lt;h2 id=&#34;how-to-build-a-privacy-respecting-vpn-service&#34;&gt;How to build a privacy-respecting VPN service&lt;/h2&gt;

&lt;p&gt;There are good signals that VPN services can send to show that they are tackling the real issues.  For example, shipping free software clients, maintaining a &lt;a href=&#34;https://www.eff.org/deeplinks/2016/05/canary-watch-one-year-later&#34;&gt;warrant canary&lt;/a&gt;, posting a clear privacy policy describing the logging policy, and publishing the unredacted results of third party audits.  If the VPN operator is doing the right thing, then VPNs can provide a relatively private way to access the internet.  With a consistent track record of transparency, they can build up a trusted reputation for protecting privacy.  Unfortunately, we cannot rest there since a VPN provider can change their setup quite easily, whether willingly or under duress.  Maintaining consistent, regular, and transparent communications is therefore essential.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Calyx Institute&amp;rsquo;s &lt;a href=&#34;https://calyxinstitute.org/legal/privacy-policy&#34;&gt;Privacy Policy&lt;/a&gt;
and &lt;a href=&#34;https://calyxinstitute.org/about/financials-and-annual-reports&#34;&gt;Financials and Annual Reports&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mozilla&amp;rsquo;s &lt;a href=&#34;https://www.mozilla.org/en-US/privacy/principles/&#34;&gt;Data Privacy Principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mullvad&amp;rsquo;s &lt;a href=&#34;https://mullvad.net/help/swedish-legislation/&#34;&gt;Swedish legislation relevant to us as a VPN provider&lt;/a&gt; and &lt;a href=&#34;https://mullvad.net/help/no-logging-data-policy/&#34;&gt;Privacy Policy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On top of that, the &lt;a href=&#34;https://vpnalyzer.org/&#34;&gt;VPNalyzer&lt;/a&gt; project is working to make monitoring VPN services a lot easier and possible to crowdsource.  This gives a third party perspective from some respected organizations.&lt;/p&gt;

&lt;h3 id=&#34;know-as-little-as-possible-about-your-users&#34;&gt;Know as little as possible about your users&lt;/h3&gt;

&lt;p&gt;Many VPN providers require an account and payment information.  This is usually personally identifiable information, like name, credit card information, email address, phone number, billing address, etc.  The most private services have &lt;a href=&#34;https://f-droid.org/2022/02/28/no-user-accounts-by-design.html&#34;&gt;no user accounts by design&lt;/a&gt;.  Calyx, Lavabit, and Riseup VPNs do not require any account or payment at all, so they do not have that information to give out or leak.  Providers that accept payment need a way to tie payment to service, that is usually done using accounts tied to email addresses or phone numbers.  Personal details are not required to make accounts and payments work.  Mullvad uses a randomly generated account number only, there is no link to other identifiers unless you provide them.  Additionally, Mullvad is one of the few VPN vendors that accepts cash payments.  Many technically minded implementers laugh at the idea of processing envelopes of cash, but it is an effective, real world solution to minimizing personal data that software methods struggle to match.&lt;/p&gt;

&lt;h3 id=&#34;keep-as-little-information-as-possible&#34;&gt;Keep as little information as possible&lt;/h3&gt;

&lt;p&gt;The VPN servers unavoidably see lots of information about what users are doing.  The default with most servers is to keep logs of that data. The longer this data is kept, the greater the risk it will be used to identify users and their activities. It does not help that standard practice for running servers is to keep logs for a long time.  Many service providers keep those logs for years.&lt;/p&gt;

&lt;p&gt;VPN providers must be clear about what logs they are keeping, and how long they are stored.  Even better, they will provide information about how they do store the data that they do keep.  For example, if the servers do not use full disk encryption, then it would be straightforward to recover the deleted logs.  That is much harder on systems using full disk encryption.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;a href=&#34;https://cure53.de/audit-report_ivpn.pdf&#34;&gt;2019 audit&lt;/a&gt; of &lt;a href=&#34;https://www.ivpn.net/blog/independent-security-audit-concluded&#34;&gt;IVPN&lt;/a&gt; showed that, at that time, the auditors confirmed that IVPN performed no &amp;ldquo;statistical logging of customer-traffic&amp;rdquo;, &amp;ldquo;logging of traffic, IP addresses or DNS requests&amp;rdquo; on the servers that the auditors were given access to.&lt;/li&gt;
&lt;li&gt;Mullvad says, &amp;ldquo;we never store any activity logs of any kind.&amp;rdquo; in their &lt;a href=&#34;https://mullvad.net/en/help/no-logging-data-policy/&#34;&gt;no logging data policy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;proven-track-record-of-resisting-unjust-legal-intrusion&#34;&gt;Proven track record of resisting unjust legal intrusion&lt;/h3&gt;

&lt;p&gt;There are many legal ways for authorities to get private data, this is an essential part of a functioning justice system.  But these powers are sadly abused in basically every country in the world, it is only a question of degrees.  A VPN provider needs to represent its users legal interests, and push back on legal orders when there is the possibility they are unjust.  Calyx Institute&amp;rsquo;s Nick Merrill provides the shining example in this regard.  With the ACLU, he fought a &lt;a href=&#34;https://en.wikipedia.org/wiki/Doe_v._Ashcroft&#34;&gt;legal case&lt;/a&gt; for over a decade to prevent unjust intrusion for his users.  Ladar Levison shut down his email company &lt;a href=&#34;https://en.wikipedia.org/wiki/Lavabit&#34;&gt;Lavabit&lt;/a&gt; rather than allow the US Government to monitor Edward Snowden&amp;rsquo;s email account.&lt;/p&gt;

&lt;p&gt;There are other ways to ensure that the legal processes are not abused.  These include warrant canaries and disclosure when data had to be turned over via legal procedures.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mozilla&amp;rsquo;s &lt;a href=&#34;https://www.mozilla.org/en-US/about/policy/transparency/&#34;&gt;Transparency&lt;/a&gt; policy&lt;/li&gt;
&lt;li&gt;ProtonVPN&amp;rsquo;s &lt;a href=&#34;https://protonvpn.com/blog/transparency-report/&#34;&gt;Transparency Report &amp;amp; Warrant Canary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Riseup&amp;rsquo;s &lt;a href=&#34;https://riseup.net/canary&#34;&gt;Canary Statement&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;publish-as-much-as-possible-as-free-open-source-software&#34;&gt;Publish as much as possible as free open source software&lt;/h3&gt;

&lt;p&gt;F-Droid works to build &lt;a href=&#34;https://f-droid.org/2022/05/24/buildserver-overhaul-sponsored-by-calyx-institute.html&#34;&gt;services&lt;/a&gt; where free software, &lt;a href=&#34;https://f-droid.org/2022/07/22/maven-central.html&#34;&gt;code&lt;/a&gt; &lt;a href=&#34;https://f-droid.org/2022/09/30/free-software-and-inspection-are-key-to-software-we-can-trust.html&#34;&gt;inspection&lt;/a&gt;, &lt;a href=&#34;https://f-droid.org/2023/01/15/towards-a-reproducible-fdroid.html&#34;&gt;reproducible builds&lt;/a&gt; provide a method to ensure that the software we deliver is trustworthy.  VPN vendors recognize how important trust is, so the good ones work to get their apps into f-droid.org.  The F-Droid community provides the best screening for ensuring Android apps are truly free software.  On top of that, F-Droid flags apps for &lt;a href=&#34;https://f-droid.org/docs/Anti-Features/&#34;&gt;Anti-Features&lt;/a&gt;, which are things that users may not like, but might accept.  Here are VPN clients that do maintain their free software clients in f-droid.org:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/se.leap.bitmaskclient/&#34;&gt;Bitmask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/org.calyxinstitute.vpn/&#34;&gt;Calyx VPN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/nl.eduvpn.app/&#34;&gt;eduVPN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/net.ivpn.client/&#34;&gt;IVPN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/com.lavabit.pahoehoe/&#34;&gt;Lavabit Encrypted Proxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/net.mullvad.mullvadvpn/&#34;&gt;Mullvad VPN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/org.outline.android.client/&#34;&gt;Outline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/ch.protonvpn.android/&#34;&gt;ProtonVPN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/one.librem.tunnel/&#34;&gt;Purism Librem Tunnel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/se.leap.riseupvpn/&#34;&gt;Riseup VPN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/com.tailscale.ipn/&#34;&gt;Tailscale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/com.wireguard.android/&#34;&gt;WireGuard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;use-external-auditors-to-confirm-source-code-and-operations&#34;&gt;Use external auditors to confirm source code and operations&lt;/h3&gt;

&lt;p&gt;External auditors are important because they can bring fresh eyes on the source code, and good auditors are experts at finding issues in source code and server setups.  And responsible organizations will publish the full, unredacted audit report once they have fixed the issues.  Even if a VPN app is included in F-Droid, there are key aspects of the service that cannot be independently verified.  For this, we must rely on the people who run the service to do the right thing.  Audits can demonstrate that they were doing the right thing at the point of time of the audit.  Here are some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IVPN&amp;rsquo;s &lt;a href=&#34;https://cure53.de/audit-report_ivpn.pdf&#34;&gt;2019 audit of IVPN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mozilla VPN had their app source code &lt;a href=&#34;https://blog.mozilla.org/security/files/2021/08/FVP-02-report.final_.pdf&#34;&gt;audited&lt;/a&gt; in 2021 and fixed the issues that were found.&lt;/li&gt;
&lt;li&gt;Mullvad&amp;rsquo;s &lt;a href=&#34;https://cure53.de/pentest-report_mullvad_2020_v2.pdf&#34;&gt;Pentest-Report Mullvad Apps, Clients &amp;amp; API 05.2020&lt;/a&gt;, &lt;a href=&#34;https://cure53.de/pentest-report_mullvad_v2.pdf&#34;&gt;Pentest-Report Mullvad VPN Clients 09.2018&lt;/a&gt;, and &lt;a href=&#34;https://mullvad.net/en/blog/2021/1/20/no-pii-or-privacy-leaks-found-cure53s-infrastructure-audit/&#34;&gt;2020 Infrastructure Audit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Outline&amp;rsquo;s &lt;a href=&#34;https://s3.amazonaws.com/outline-vpn/static_downloads/ros-report.pdf&#34;&gt;2017 Pentratration Test Report&lt;/a&gt; and &lt;a href=&#34;https://s3.amazonaws.com/outline-vpn/static_downloads/cure53-report.pdf&#34;&gt;Pentest &amp;amp; Audit Report Jigsaw Outline 09.-12.2018&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Proton VPN open sourced their client apps and had them &lt;a href=&#34;https://www.zdnet.com/article/protonvpn-apps-handed-to-open-source-community-in-transparency-security-push/&#34;&gt;audited&lt;/a&gt; in 2019.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;publicly-verifiable-binaries-via-reproducible-builds&#34;&gt;Publicly verifiable binaries via reproducible builds&lt;/h3&gt;

&lt;p&gt;Source code is the easiest place to conduct an audit of software, but it is the binary files that actually run on your device.  Auditing binaries rarely happens since it is so much more time intensive.  And yet, there are ways to change how software works without changing the source code. This can be done by injecting changes into the process that converts the source code into the executable binary.  &lt;a href=&#34;https://reproducible-builds.org/&#34;&gt;Reproducible Builds&lt;/a&gt; is the indisputable method for proving that a given binary was generated by given source code.&lt;/p&gt;

&lt;p&gt;There are some generic VPN clients in Debian that are built reproducibly, but there are no Android or iOS VPN apps or  branded desktop client apps that meet this standard yet.  We recommend that VPN providers work with &lt;a href=&#34;https://wiki.debian.org/ReproducibleBuilds&#34;&gt;Debian&lt;/a&gt;, &lt;a href=&#34;f-droid.org/docs/Reproducible_Builds&#34;&gt;F-Droid&lt;/a&gt;, the &lt;a href=&#34;https://reproducible-builds.org/&#34;&gt;Reproducible Builds&lt;/a&gt; group, or any other relevant &lt;a href=&#34;https://reproducible-builds.org/who/projects/&#34;&gt;project&lt;/a&gt; to achieve this key step.&lt;/p&gt;

&lt;h3 id=&#34;apple-ios&#34;&gt;Apple iOS&lt;/h3&gt;

&lt;p&gt;This post focuses on Android because iOS has a number of issues that make using VPNs for privacy less effective.  For example, VPNs on iOS will &lt;a href=&#34;https://www.bleepingcomputer.com/news/security/unpatched-ios-bug-blocks-vpns-from-encrypting-all-traffic/&#34;&gt;leak IP addresses&lt;/a&gt;.  Apple knows about this issue, yet still has &lt;a href=&#34;https://www.theregister.com/2022/08/19/apple_ios_vpn/&#34;&gt;not fixed&lt;/a&gt; it after a couple years.  On top of that, it is not possible to have reproducible builds on iOS because the actual executable binaries are encrypted by Apple&amp;rsquo;s proprietary Digital Restrictions Management (DRM), so only Apple could ever reproducibly build something.  If you are running Apple iOS, you are stuck trusting Apple to do the right thing, since they operate a relatively opaque, proprietary, strictly walled garden.&lt;/p&gt;

&lt;h2 id=&#34;run-your-own-vpn&#34;&gt;Run your own VPN&lt;/h2&gt;

&lt;p&gt;The VPN security model means you have to put a ton of trust in the operator.  Questions of trust get much easier when you are talking about yourself or own organization.  There are many projects that aim to make it as easy as possible to run your own VPN service.  The good ones are all free software and have been audited, both the client source code and the server side setup.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://amnezia.org&#34;&gt;Amnezia&lt;/a&gt; is a free service to create a personal VPN on your server.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leap.se/&#34;&gt;LEAP VPN&lt;/a&gt; is a &amp;ldquo;white label&amp;rdquo; VPN setup used to build Bitmask, CalyxVPN, RiseupVPN and more.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://getoutline.org/&#34;&gt;Outline&lt;/a&gt; &amp;ldquo;makes it easy to create a VPN server, giving anyone access to the free and open internet.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://we-pn.com/&#34;&gt;WEPN&lt;/a&gt; is a free software kit to become your own VPN provider, designed around a small hardware device.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are also generic VPN client apps based on standard protocols:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/nl.eduvpn.app/&#34;&gt;eduVPN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/de.blinkt.openvpn/&#34;&gt;OpenVPN for Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/en/packages/com.github.shadowsocks/&#34;&gt;Shadowsocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/org.strongswan.android/&#34;&gt;strongSwan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://f-droid.org/packages/com.WireGuard.android/&#34;&gt;WireGuard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;comparing-vpns-to-tor-and-masque&#34;&gt;Comparing VPNs to Tor and MASQUE&lt;/h2&gt;

&lt;p&gt;If it is privacy that you seek, then there are other tools to review.  Tor is a longstanding community project that aims to make privacy proxies without compromise. Tor works similarly to VPN in that it is tunneling traffic to shared servers, the big difference is that your traffic is tunneled through three relays (in comparison to single hop VPNs). Each individual Tor relay cannot see the enough to put together a picture of who is doing what. At most, a relay can see what is done, but not who.  Or that someone is accessing Tor, but not their destination.  &lt;a href=&#34;https://guardianproject.info/apps/org.torproject.android/&#34;&gt;Orbot&lt;/a&gt; provides a VPN mode, but this is still full Tor protection, since it is just using the device&amp;rsquo;s VPN user experience to provide access to the Tor network.  &lt;a href=&#34;https://www.torproject.org/&#34;&gt;Tor Browser&lt;/a&gt; then adds whole other layers of privacy protection that can only be implemented in the internet-enabled app.  This includes things like reducing metadata leaks in the HTTPS connection or web APIs, or isolating websites from each other within the browser, so they cannot read data about other sites the user has visited.&lt;/p&gt;

&lt;p&gt;A new approach that is somewhere in between a VPN and Tor are multi-hop &lt;a href=&#34;https://guardianproject.info/2020/02/25/masque-review/&#34;&gt;MASQUE&lt;/a&gt; relays.  MASQUE is a new protocol that is similar to VPN and proxy protocols.  MASQUE is built on HTTP/3 aka QUIC, so it does not stick out as much as VPN or WireGuard traffic.  It also allows for multi-hop configurations.  MASQUE is only newly deployed, so there is not the two decades of experience working to minimize metadata leaks in the processes for relaying traffic.&lt;/p&gt;

&lt;p&gt;Apple iCloud Private Relay is a &lt;a href=&#34;https://blog.cloudflare.com/icloud-private-relay/&#34;&gt;two hop deployment&lt;/a&gt; on MASQUE, which means that the Apple side can see that the user is sending traffic, and the Cloudflare side can see the destination, but not the user.  That does provide a real privacy improvement over a single hop system.  Unfortunately, Apple iCloud Private Relay fails most of the other tests laid out in this post.  Plus given the history of NSA programs like PRISM, and the willingness for US companies like Apple and Google to &lt;a href=&#34;https://www.theguardian.com/world/2013/jun/06/us-tech-giants-nsa-data&#34;&gt;take part&lt;/a&gt;, this setup is not clear protection from NSA and Five Eyes surveillance and targeting.  It would be relatively straightforward for those kinds of agencies to correlate the data from the Apple and Cloudflare side if they have access to the metadata from both sides.&lt;/p&gt;

&lt;p&gt;If privacy is your primary concern, then it is worth investing time into tools like Tor.  If you have limited time and are mostly concerned about mass surveillance, then a good VPN is worth considering for some added privacy protection.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spearphishing for developers</title>
      <link>https://guardianproject.github.io/info/2022/02/23/spearphishing-for-developers/</link>
      <pubDate>Wed, 23 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2022/02/23/spearphishing-for-developers/</guid>
      <description>&lt;p&gt;I received an interesting email that points to a new direction in targeting
developers to exploit them.  This email is a reply to a message that I actually
wrote to an &lt;a href=&#34;https://mail.gnu.org/archive/html/bug-gnulib/2012-01/msg00336.html&#34;&gt;email list&lt;/a&gt;
in 2012, that was posted on a public thread on a public list.  It also uses the
name of a person that posted on that thread: &amp;ldquo;Paul Eggers&amp;rdquo;.  Oddly, it did not
use that person&amp;rsquo;s actual email from the original thread.  Especially considering
that I replied to the message to ask for more info, but got no answer.  I guess
this was just to ensure that the real &amp;ldquo;Paul Eggers&amp;rdquo; did not respond.&lt;/p&gt;

&lt;p&gt;The focus of the message is a link to download a file.  This uses a respectable
file sharing service, &lt;em&gt;onecloud.live.com&lt;/em&gt; and it even includes a password for
the downloaded file, which seems like it builds up the look of authenticity.
The use of a password-protected ZIP also means it won&amp;rsquo;t be automatically scanned
by malware and anti-virus checkers.&lt;/p&gt;

&lt;p&gt;I wasn&amp;rsquo;t able to fully unzip the file using the ZIP tools I used.  That made me
think that perhaps the password method only works in specific ZIP software
packages.  Then the password method would ensure that the ZIP is only run in ZIP
software that is vulnerable to the included exploit. And otherwise, the contents
would not be readable for further inspection.&lt;/p&gt;

&lt;p&gt;This points to an attack method that I have not encountered before.
Spearphishing relies on building up a story so that even a careful user will
want to click the link and execute the contents.  Getting a reply to a thread is
an effective way to do that.  The contents of public lists are easily readable
and indexable, so this kind of attack can be highly automated.  Just put in a
target email, and the automation sends the target a message with context.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the full email source:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Return-Path: &amp;lt;info@long.frog.tw&amp;gt;
Delivered-To: gphans@rodolpho.mayfirst.org
Received: from rodolpho.mayfirst.org
	by rodolpho.mayfirst.org with LMTP
	id hSGSC25fFmL8LAAAME+P1Q
	(envelope-from &amp;lt;info@long.frog.tw&amp;gt;)
	for &amp;lt;gphans@rodolpho.mayfirst.org&amp;gt;; Wed, 23 Feb 2022 11:23:10 -0500
Received: from rodolpho.mayfirst.org (localhost [127.0.0.1])
	by rodolpho.mayfirst.org (Postfix) with ESMTP id D9F313CE34
	for &amp;lt;hans@guardianproject.info&amp;gt;; Wed, 23 Feb 2022 11:23:06 -0500 (EST)
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on
	rodolpho.mayfirst.org
X-Spam-Level: 
X-Spam-Status: No, score=0.7 required=5.0 tests=DKIM_SIGNED,DKIM_VALID,
	HTML_MESSAGE,HTML_MIME_NO_HTML_TAG,MIME_HTML_ONLY,RCVD_IN_MSPIKE_H2,
	SPF_HELO_PASS,SPF_PASS,T_SCC_BODY_TEXT_LINE autolearn=disabled
	version=3.4.2
X-Spam-Language: en
X-Envelope-From: &amp;lt;info@long.frog.tw&amp;gt;
X-Greylist: delayed 1661 seconds by postgrey-1.36 at rodolpho; Wed, 23 Feb 2022 11:23:06 EST
Received: from mg3.eee.tw (mg3.eee.tw [103.17.10.233])
	(using TLSv1.2 with cipher AECDH-AES256-SHA (256/256 bits))
	(No client certificate requested)
	by rodolpho.mayfirst.org (Postfix) with ESMTPS id 858E03CE1E
	for &amp;lt;hans@guardianproject.info&amp;gt;; Wed, 23 Feb 2022 11:23:06 -0500 (EST)
Received: from cp21.g-dns.com (cp21.g-dns.com [103.17.8.40])
	(using TLSv1.2 with cipher ECDHE-RSA-AES256-GCM-SHA384 (256/256 bits))
	(No client certificate requested)
	by mg3.eee.tw (Postfix) with ESMTPS id AF4F419009B3
	for &amp;lt;hans@guardianproject.info&amp;gt;; Wed, 23 Feb 2022 23:54:59 +0800 (CST)
DKIM-Filter: OpenDKIM Filter v2.11.0 mg3.eee.tw AF4F419009B3
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/simple; d=mg3.eee.tw;
	s=default; t=1645631699;
	bh=MvWrTbFx4VjqxMbQ1oeJJLPDVIB1s899FwwgZkbZ1wQ=;
	h=Date:From:To:Subject:From;
	b=JwtVM6G26JoedbLznxwWCmDxeFdQK2eAjM0spiAV8JGrfqpH1+MVTJ7V+8jItocF6
	 PbzZ70Ryif/OnczcFbObjb966oc8G4HfyXFid8QzoCc2x///YtHxybz/dpv01grV+/
	 7Nu86lLukMGzGcQr2C3Lhgz9Gakdx8j2fNSoWIBw=
Received: from 104.120.6.109.rev.sfr.net ([109.6.120.104]:40052 helo=mail.long.frog.tw)
	by cp21.g-dns.com with esmtpsa  (TLS1.2) tls TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA
	(Exim 4.94.2)
	(envelope-from &amp;lt;info@long.frog.tw&amp;gt;)
	id 1nMtyx-005qBz-Pz
	for hans@guardianproject.info; Wed, 23 Feb 2022 23:54:59 +0800
MIME-Version: 1.0
Date: Wed, 23 Feb 2022 07:54:58 -0800
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: 7bit
X-Priority: 3 (Normal)
From: &amp;quot;Paul Eggert&amp;quot; &amp;lt;info@long.frog.tw&amp;gt;
To: &amp;quot;Hans-Christoph Steiner&amp;quot; &amp;lt;hans@guardianproject.info&amp;gt;
Subject: Re: sys/types.h on Android includes stdint.h before defining time_t
Message-ID: &amp;lt;uwhaose67qs7epo7ckd62gsd8qqz0kkn@long.frog.tw&amp;gt;
X-YuanJhen-MailScanner-Information: Please contact the ISP for more information
X-YuanJhen-MailScanner-ID: AF4F419009B3.AB186
X-YuanJhen-MailScanner: Not scanned: please contact your Internet E-Mail Service Provider for details
X-YuanJhen-MailScanner-SpamCheck: not spam, SpamAssassin (not cached,
	score=1.79, required 6, autolearn=disabled, BAYES_60 0.80,
	DKIM_VALID -0.10, HTML_MESSAGE 0.30, HTML_MIME_NO_HTML_TAG 0.38,
	MIME_HTML_ONLY 0.42, T_SCC_BODY_TEXT_LINE -0.01)
X-YuanJhen-MailScanner-SpamScore: 1
X-YuanJhen-MailScanner-From: info@long.frog.tw
X-Virus-Scanned: ClamAV using ClamSMTP

Hi,&amp;lt;br /&amp;gt;
I have not seen any reply about the receipt documentation I sent you before. Have you checked it?&amp;lt;br /&amp;gt;
In case it wasn&#39;t delivered, here I upload it again:&amp;lt;br /&amp;gt;
&amp;lt;br /&amp;gt;
&amp;lt;br /&amp;gt;
https://onedrive.live.com/download?cid=8E46FC281A596F46&amp;amp;amp;resid=8E46FC281A596F46%21106&amp;amp;amp;authkey=AOYFYKwyPe_KuGI&amp;lt;br /&amp;gt;
&amp;lt;br /&amp;gt;
&amp;lt;br /&amp;gt;
&amp;lt;br /&amp;gt;
&amp;lt;br /&amp;gt;
&amp;lt;br /&amp;gt;
File password: WT5667&amp;lt;br /&amp;gt;
&amp;lt;br /&amp;gt;
On 01/26/2012 12:14 PM, Hans-Christoph Steiner wrote:
&amp;gt; ./stdint.h:32:3: error: invalid preprocessing directive #@

This looks like some sort of problem in the way the patch
was applied.  Perhaps you need to re-run gnulib-tool,
or ./bootstrap, or ./autogen.sh, or whatever-it-is-with
your package, to re-import the patched gnulib from scratch.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Update March 23rd, 2022&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So I never received a reply from the email I replied to, so this does not seem
to be a very sophisticated attack.  Plus now, I&amp;rsquo;ve received the same kind of
message again responding to the same thread.  It has a different email address
in the &lt;em&gt;From:&lt;/em&gt; field, and talks about invoices.  So it seems clear that this is
an automated mass spam operation, not so targeted.  Plus replying to a technical
thread with a message about invoices or receipts seems quite tone deaf.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the full source text of this new message:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Return-Path: &amp;lt;INSERT.INTO@arbonnetruth.com&amp;gt;
Delivered-To: gphans@rodolpho.mayfirst.org
Received: from rodolpho.mayfirst.org
	by rodolpho.mayfirst.org with LMTP
	id SAA4IDlXO2KkcgAAME+P1Q
	(envelope-from &amp;lt;INSERT.INTO@arbonnetruth.com&amp;gt;)
	for &amp;lt;gphans@rodolpho.mayfirst.org&amp;gt;; Wed, 23 Mar 2022 13:22:01 -0400
Received: from rodolpho.mayfirst.org (localhost [127.0.0.1])
	by rodolpho.mayfirst.org (Postfix) with ESMTP id AE00E3CE3B
	for &amp;lt;hans@guardianproject.info&amp;gt;; Wed, 23 Mar 2022 13:21:59 -0400 (EDT)
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on
	rodolpho.mayfirst.org
X-Spam-Level: ***
X-Spam-Status: No, score=3.2 required=5.0 tests=DKIM_SIGNED,DKIM_VALID,
	DKIM_VALID_AU,DKIM_VALID_EF,HTML_MESSAGE,HTML_MIME_NO_HTML_TAG,
	MIME_HTML_ONLY,RCVD_IN_PSBL,SPF_HELO_PASS,SPF_PASS,
	T_SCC_BODY_TEXT_LINE autolearn=disabled version=3.4.2
X-Spam-Language: en
X-Envelope-From: &amp;lt;INSERT.INTO@arbonnetruth.com&amp;gt;
X-Greylist: delayed 601 seconds by postgrey-1.36 at rodolpho; Wed, 23 Mar 2022 13:21:59 EDT
Received: from arbonnetruth.com (arbonnetruth.com [93.170.123.227])
	(using TLSv1.3 with cipher TLS_AES_256_GCM_SHA384 (256/256 bits)
	 key-exchange X25519 server-signature RSA-PSS (2048 bits) server-digest SHA256)
	(No client certificate requested)
	by rodolpho.mayfirst.org (Postfix) with ESMTPS id 596443CE1C
	for &amp;lt;hans@guardianproject.info&amp;gt;; Wed, 23 Mar 2022 13:21:59 -0400 (EDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; s=mail; d=arbonnetruth.com;
 h=MIME-Version:Date:Content-Type:Content-Transfer-Encoding:From:To:Subject:
 Message-ID; i=INSERT.INTO@arbonnetruth.com;
 bh=tyizJcC18eXfvncOzYHJ5lCpMuLeYzPK5gBPVLAfqRw=;
 b=O19O9I/UZQxRYOrfLzW3V+Olc/uEnUNezLzdN+XqMNb4Boj5KBxyjgsQy5h18K0uBoyNF5UKQyg8
   tqaKIYKt4PPu8K4BqLrbyXZ0UfpeTQ2oxZ7uTILWi1W+LUTz9fVGfC5lulA1q2YOlJ+Q2YNEDnFq
   +m+bHLzVQwIJX8wT04A=
MIME-Version: 1.0
Date: Wed, 23 Mar 2022 09:11:54 -0800
Content-Type: text/html; charset=utf-8
Content-Transfer-Encoding: 7bit
X-Priority: 3 (Normal)
From: &amp;quot;Paul Eggert&amp;quot; &amp;lt;INSERT.INTO@arbonnetruth.com&amp;gt;
To: &amp;quot;Hans-Christoph Steiner&amp;quot; &amp;lt;hans@guardianproject.info&amp;gt;
Subject: Re: sys/types.h on Android includes stdint.h before defining time_t
Message-ID: &amp;lt;2lixlvd5g6qeonv0dkkyzyjbbx1foep1@arbonnetruth.com&amp;gt;
X-Virus-Scanned: ClamAV using ClamSMTP

Greetings,&amp;lt;br /&amp;gt;
Kindly review a next invoice documentation:&amp;lt;br /&amp;gt;
&amp;lt;br /&amp;gt;
&amp;lt;br /&amp;gt;
https://onedrive.live.com/download?cid=1D05D1D2994A703C&amp;amp;amp;resid=1D05D1D2994A703C%21116&amp;amp;amp;authkey=AALIqV8bfVVLE9E&amp;lt;br /&amp;gt;
&amp;lt;br /&amp;gt;
File password: MT7658&amp;lt;br /&amp;gt;
&amp;lt;br /&amp;gt;
On 01/26/2012 12:14 PM, Hans-Christoph Steiner wrote:
&amp;gt; ./stdint.h:32:3: error: invalid preprocessing directive #@

This looks like some sort of problem in the way the patch
was applied.  Perhaps you need to re-run gnulib-tool,
or ./bootstrap, or ./autogen.sh, or whatever-it-is-with
your package, to re-import the patched gnulib from scratch.

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Onion Browser Release 2.6 Tutorial</title>
      <link>https://guardianproject.github.io/info/2020/06/02/onion-browser-release-2.6-tutorial/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2020/06/02/onion-browser-release-2.6-tutorial/</guid>
      <description>

&lt;p&gt;In this tutorial we&amp;rsquo;re going to talk about the best practices to browse the web securely on iOS using &lt;a href=&#34;https://onionbrowser.com&#34;&gt;Onion Browser&lt;/a&gt; Release 2.6 and the &lt;a href=&#34;https://torproject.org&#34;&gt;Tor network&lt;/a&gt;. &lt;a href=&#34;https://onionbrowser.com&#34;&gt;Onion Browser for iOS&lt;/a&gt; is a free, open-source web browser app developed originally by &lt;a href=&#34;https://mike.tig.as/&#34;&gt;Mike Tigas&lt;/a&gt;, with Release 2.6 as a collaboration with the Guardian Project. Onion Browser has Tor built-in and uses Tor to protect your web activity.&lt;/p&gt;

&lt;p&gt;You can also watch the &lt;a href=&#34;https://www.youtube.com/playlist?list=PL4-CVUWabKWeHeBpadBLjzlWVa7binXpj&#34;&gt;Onion Browser Video Tutorial&lt;/a&gt; on YouTube.&lt;/p&gt;

&lt;!-- ![](image25.jpg) --&gt;

&lt;p class=&#34;ctr&#34;&gt;
    &lt;a href=&#34;image25.jpg&#34;&gt;
        &lt;img class=&#34;size1&#34; src=&#34;image25.jpg&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;h2 id=&#34;who-is-this-tutorial-designed-for&#34;&gt;Who is this Tutorial designed for?&lt;/h2&gt;

&lt;p&gt;A few questions for you:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Is your internet content being blocked?&lt;/li&gt;
&lt;li&gt;Are you concerned about your privacy while browsing the web?&lt;/li&gt;
&lt;li&gt;Do you want to protect your data from aggressive advertisers?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If any of these are true, this tutorial is for you!&lt;/p&gt;

&lt;h2 id=&#34;don-t-have-an-ios-device&#34;&gt;Don&amp;rsquo;t have an iOS device?&lt;/h2&gt;

&lt;!-- ![](image21.png) --&gt;

&lt;p class=&#34;ctr&#34;&gt;
    &lt;a href=&#34;image21.png&#34;&gt;
        &lt;img class=&#34;size1&#34; src=&#34;image21.png&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/apps/orbot&#34;&gt;Try Orbot&lt;/a&gt;, the Tor connection for Android devices developed by the Guardian Project. Orbot allows you to route the apps on your phone through Tor.&lt;/p&gt;

&lt;!-- ![](image20.png) --&gt;

&lt;p class=&#34;ctr&#34;&gt;
    &lt;a href=&#34;image20.png&#34;&gt;
        &lt;img class=&#34;size1&#34; src=&#34;image20.png&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;You may also try the &lt;a href=&#34;https://torproject.org&#34;&gt;Tor Browser for Android&lt;/a&gt;, the official Tor browser for Android developed by the Tor Project team.&lt;/p&gt;

&lt;h2 id=&#34;first-what-exactly-is-the-tor-network&#34;&gt;First, what exactly is the Tor network?&lt;/h2&gt;

&lt;!-- ![](image11.png) --&gt;

&lt;p class=&#34;ctr&#34;&gt;
    &lt;a href=&#34;image11.png&#34;&gt;
        &lt;img class=&#34;size1&#34; src=&#34;image11.png&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;The Tor network is a collection of servers, run by volunteers, that allows users to improve their privacy and security on the Internet. Tor&amp;rsquo;s users employ this network by connecting to their favorite services through a series of virtual tunnels rather than making a direct connection, thus allowing both organizations and individuals to share information over public networks without compromising their privacy.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s how Tor works: When you connect to the internet using Tor, a circuit is created. A circuit is a group of 3 different Tor relays located in different parts of the world that work together with encryption to obfuscate your connection to websites and web services, making it hard for third parties to trace the activity back to you.&lt;/p&gt;

&lt;!-- ![](image17.png) --&gt;

&lt;p class=&#34;ctr&#34;&gt;
    &lt;a href=&#34;image17.png&#34;&gt;
        &lt;img class=&#34;size3&#34; src=&#34;image17.png&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;h2 id=&#34;onion-browser-with-tor-is-an-important-application-for-ios-users&#34;&gt;Onion Browser, with Tor, is an important application for iOS users&lt;/h2&gt;

&lt;p&gt;Why? Because when you use Onion Browser&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All your browsing is private, since your traffic is encrypted through the Tor network&lt;/li&gt;
&lt;li&gt;No one can see your activities, save your history, or influence your browsing&lt;/li&gt;
&lt;li&gt;And there is no trace left behind since tabs don&amp;rsquo;t hang around. They close when you&amp;rsquo;re done, so every search is new&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;how-is-the-onion-browser-different-from-other-browsers-for-ios&#34;&gt;How is the Onion Browser different from other browsers for iOS?&lt;/h2&gt;

&lt;p&gt;Security and privacy require some compromises, and you should be aware that there are some limitations when using the Onion Browser:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Apple requires all web browser apps to use the same core web rendering engine. Due to this limitation, we are unable to compile and include our own web engine, based on Firefox Gecko, as with Tor Browser for desktop and Android&lt;/li&gt;
&lt;li&gt;Onion Browser only tunnels traffic within the Onion Browser app. If you are using a smartphone be aware that information outside of Onion Browser is not protected&lt;/li&gt;
&lt;li&gt;Sometimes your bandwidth speeds will be reduced, depending on the relays you are connecting to&lt;/li&gt;
&lt;li&gt;Websites that flag Tor as suspicious will show a CAPTCHA loop and you won&amp;rsquo;t be able to access them&lt;/li&gt;
&lt;li&gt;Certain features of many websites may be disabled or work poorly on Onion Browser, especially at the higher security levels&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;onboarding&#34;&gt;Onboarding&lt;/h2&gt;

&lt;p&gt;After &lt;a href=&#34;https://apps.apple.com/us/app/onion-browser/id519296448&#34;&gt;downloading Onion Browser from the App Store&lt;/a&gt;, we&amp;rsquo;ll give you a smooth start to using the app. After the initial loading screen, you&amp;rsquo;ll be invited to connect to Tor before you start browsing. Be advised: Onion Browser always needs to connect to Tor before you browse. There&amp;rsquo;s no operational mode that doesn&amp;rsquo;t use Tor.&lt;/p&gt;

&lt;p&gt;&lt;!-- ![](image24.png) --&gt; &lt;!-- ![](image14.png) --&gt;
&lt;p class=&#34;ctr&#34;&gt;
    &lt;a href=&#34;image24.png&#34;&gt;
        &lt;img class=&#34;size2&#34; src=&#34;image24.png&#34;&gt;
    &lt;/a&gt;
    &lt;a href=&#34;image14.png&#34;&gt;
        &lt;img class=&#34;size2&#34; src=&#34;image14.png&#34;&gt;
    &lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;There are two options here: connecting directly to Tor, as most users do, or connecting via a special &amp;ldquo;bridge&amp;rdquo;. This latter option requires configuration, and we&amp;rsquo;ll discuss it in a separate section of this tutorial. Select &amp;ldquo;Connect to Tor&amp;rdquo; and the app will let you know when it is ready.&lt;/p&gt;

&lt;!-- ![](image18.png) --&gt;

&lt;p class=&#34;ctr&#34;&gt;
    &lt;a href=&#34;image18.png&#34;&gt;
        &lt;img class=&#34;size3&#34; src=&#34;image18.png&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Click on &amp;ldquo; Next&amp;rdquo; to set up your security level.&lt;/p&gt;

&lt;!-- ![](image30.png) --&gt;

&lt;p class=&#34;ctr&#34;&gt;
    &lt;a href=&#34;image30.png&#34;&gt;
        &lt;img class=&#34;size3&#34; src=&#34;image30.png&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;There are three levels of security you can select, according to your needs. For many users, Level 2 is the best choice to start. Click on &amp;ldquo;Learn More&amp;rdquo; to see more details about each option. Tap &amp;ldquo;Start Browsing&amp;rdquo; to begin using Onion Browser.&lt;/p&gt;

&lt;h2 id=&#34;the-onion-browser-home-page&#34;&gt;The Onion Browser Home Page&lt;/h2&gt;

&lt;p&gt;On the home page of Onion Browser you&amp;rsquo;ll see a couple of website suggestions, as well as more information about the app. We&amp;rsquo;d welcome your support for our work. Use the Donate Link to see the ways you can contribute with a donation. You can also subscribe to the Tor Newsletter to get updates about security and privacy on the Internet from the Tor team.&lt;/p&gt;

&lt;!-- ![](image22.png) --&gt;

&lt;p class=&#34;ctr&#34;&gt;
    &lt;a href=&#34;image22.png&#34;&gt;
        &lt;img class=&#34;size3&#34; src=&#34;image22.png&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;On the home page, in the top navigation bar, you&amp;rsquo;ll see there are two icons you don&amp;rsquo;t find in other browsers, a Shield on the top left side and an Onion on the top right side.&lt;/p&gt;

&lt;p&gt;&lt;!-- ![](image15.jpg) --&gt; &lt;!-- ![](image5.jpg) --&gt;
&lt;p class=&#34;ctr&#34;&gt;
    &lt;a href=&#34;image15.jpg&#34;&gt;
        &lt;img class=&#34;size2&#34; src=&#34;image15.jpg&#34;&gt;
    &lt;/a&gt;
    &lt;a href=&#34;image5.jpg&#34;&gt;
        &lt;img class=&#34;size2&#34; src=&#34;image5.jpg&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll discuss these in a bit. The Onion Browser also includes features you&amp;rsquo;ll recognize like Bookmarks, Share, New Tab, Switch Tabs, and Accessing Settings. These are common in other browsers and work in the same manner here.&lt;/p&gt;

&lt;h2 id=&#34;visiting-websites&#34;&gt;Visiting websites&lt;/h2&gt;

&lt;p&gt;When you visit websites, Onion Browser will give you additional information about the security and nature of your connection.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTPS websites will show a green lock on the right side of the URL bar, tap on it to verify the Certificate Information.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- ![](image1.png) --&gt;

&lt;p class=&#34;ctr&#34;&gt;
    &lt;a href=&#34;image1.png&#34;&gt;
        &lt;img class=&#34;size3&#34; src=&#34;image1.png&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tap on the Shield icon to see your current security level&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- ![](image13.png) --&gt;

&lt;p class=&#34;ctr&#34;&gt;
    &lt;a href=&#34;image13.png&#34;&gt;
        &lt;img class=&#34;size3&#34; src=&#34;image13.png&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Tap on the Onion icon to see the Tor circuit you are using, sometimes your current circuit will be too slow or it will not work properly, for those cases use the &amp;ldquo;New Circuit&amp;rdquo; button and you will be automatically connected to a new one.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- ![](image7.png) --&gt;

&lt;p class=&#34;ctr&#34;&gt;
    &lt;a href=&#34;image7.png&#34;&gt;
        &lt;img class=&#34;size3&#34; src=&#34;image7.png&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;On this drop-down menu, you will also find the option to connect to Tor using bridges. Please remember that you should always try to connect to Tor without using bridges and only use them if that fails. We&amp;rsquo;ll talk more about bridges later.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Share icon allows you to send a link to the website you are looking at using other apps in your device. It also allows you to open the link using Safari if the site is not opening properly using Tor. This will be out of the Tor network and is not safe&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- ![](image19.png) --&gt;

&lt;p class=&#34;ctr&#34;&gt;
    &lt;a href=&#34;image19.png&#34;&gt;
        &lt;img class=&#34;size3&#34; src=&#34;image19.png&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The same applies to open images and links with Safari. But you can also open links safely on a new tab, and navigate them the same way you will do it on any other browser&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- ![](image12.png) --&gt;

&lt;p class=&#34;ctr&#34;&gt;
    &lt;a href=&#34;image12.png&#34;&gt;
        &lt;img class=&#34;size3&#34; src=&#34;image12.png&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If your screen times out or you send the browser to the background all your current tabs will disappear when you return to your browser, this is a security feature that can be changed in your settings&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Downloading content is easiest with the Share icon. Display your content (such as a PDF-formatted article) in a tab, then tap the Share icon. Select &amp;lsquo;Save to Files&amp;rsquo;, then on the next screen, choose the desired locations (&amp;ldquo;Downloads&amp;rdquo; folder is shown here). Tap &amp;lsquo;Save&amp;rsquo; and the content will be saved in the Downloads folder for later use or further sharing.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;!-- ![](image23.png) --&gt; &lt;!-- ![](image16.png) --&gt;
&lt;p class=&#34;ctr&#34;&gt;
    &lt;a href=&#34;image23.png&#34;&gt;
        &lt;img class=&#34;size2&#34; src=&#34;image23.png&#34;&gt;
    &lt;/a&gt;
    &lt;a href=&#34;image16.png&#34;&gt;
        &lt;img class=&#34;size2&#34; src=&#34;image16.png&#34;&gt;
    &lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;h2 id=&#34;security-connectivity&#34;&gt;Security &amp;amp; Connectivity&lt;/h2&gt;

&lt;h3 id=&#34;bridges&#34;&gt;Bridges&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s a special way to connect to the Tor network, designed for users in the most restrictive geographies or users personally at risk of invasive monitoring. Bridges are like special on-ramps for Tor that are more aggressive about defeating monitoring. That comes at a cost in performance, though. We like to reserve these pathways for most impacted users, so please use them sparingly.&lt;/p&gt;

&lt;p&gt;If you know bad actors are monitoring Tor usage in your geography, you&amp;rsquo;ll want to configure a bridge immediately when you first open Onion Browser. You can do that right from the first onboarding screen, before connecting to Tor&lt;/p&gt;

&lt;!-- ![](image6.jpg) --&gt;

&lt;p class=&#34;ctr&#34;&gt;
    &lt;a href=&#34;image6.jpg&#34;&gt;
        &lt;img class=&#34;size3&#34; src=&#34;image6.jpg&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Whether you configure your bridge immediately or after you&amp;rsquo;ve been using Onion Browser for a while, you need to be careful how you get your bridge information. You have several options. See the Bridge Configuration settings (accessed during on-boarding as above or by tapping on the Onion icon when viewing a website and then tapping &amp;lsquo;Bridge Configuration&amp;rsquo;).&lt;/p&gt;

&lt;!-- ![](image2.jpg) --&gt;

&lt;p class=&#34;ctr&#34;&gt;
    &lt;a href=&#34;image2.jpg&#34;&gt;
        &lt;img class=&#34;size3&#34; src=&#34;image2.jpg&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Your first option should be the list of bridges using the so-called Obfs4 technology, a list already built into Onion Browser. Select the &amp;ldquo;Built-in Obfs4&amp;rdquo; option and Onion Browser will instruct Tor to use that selection of bridges as it attempts to connect. Tap &amp;ldquo;connect&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Unfortunately the bridges on that list can become crowded and connection may fail here, too. If you know a trustworthy person who uses a bridge to connect to Tor, your second option is to have your friend help you by sending you a bridge QRCode your device can scan and automatically configure to use that bridge. Or, less securely, you can copy/paste a bridge identifier that your friend sends you via another service (messaging, for example). To use this option, tap &amp;ldquo;Custom Bridges&amp;rdquo;, and then either scan the provided QRCode or paste your provided bridge into the text area shown, then tap &amp;ldquo;Connect&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;!-- ![](image4.jpg) --&gt; &lt;!-- ![](image8.jpg) --&gt;
&lt;p class=&#34;ctr&#34;&gt;
    &lt;a href=&#34;image4.jpg&#34;&gt;
        &lt;img class=&#34;size2&#34; src=&#34;image4.jpg&#34;&gt;
    &lt;/a&gt;
    &lt;a href=&#34;image8.jpg&#34;&gt;
        &lt;img class=&#34;size2&#34; src=&#34;image8.jpg&#34;&gt;
    &lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;If these options fail, you can get access to a fresh selection of Obfs4 bridges using the service called MOAT to get up-to-date information in real-time. This option works in a way that does not expose itself to suspicion. To use this option, select &amp;ldquo;Built-in Meek/Azure&amp;rdquo; and tap &amp;ldquo;connect&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Last, the Tor Project itself also maintains a list of bridges. For this option, tap &amp;lsquo;Custom Bridges&amp;rsquo;, then &amp;lsquo;Request Bridges from torproject.org&amp;rsquo; and follow the instructions there. You&amp;rsquo;ll get a bridge identifier, and you&amp;rsquo;ll paste it into the text area, same as you would if a friend provided it to you. After pasting, tap &amp;ldquo;connect&amp;rdquo;. Note that this method of contacting the Tor Project to get a bridge identifier is an action that itself might be blocked.&lt;/p&gt;

&lt;p&gt;Again, we want to steer you away from using bridges. The degradation of the user experience can be extreme and please remember that there are people who actually require this capability to get any connection at all. As capacity is limited, we want to give those people the first opportunity.&lt;/p&gt;

&lt;h3 id=&#34;biometric-authentication&#34;&gt;BioMetric Authentication&lt;/h3&gt;

&lt;p&gt;You can place a second level of access security on Onion Browser by using its authentication option. You might prefer this option if you believe you face a physical security threat, if there is a chance your device might get stolen or if your device might be otherwise misused by people you don&amp;rsquo;t trust.&lt;/p&gt;

&lt;p&gt;First, you need to set up your iOS device to require security at login via a 6-digit numeric Passcode, FaceID or TouchID. Use the iOS Settings app. Select and configure the method you prefer. If you&amp;rsquo;ve already done that, there&amp;rsquo;s no need to change. Be aware that all manipulations of our authentication settings here will require you to enter your password.&lt;/p&gt;

&lt;!-- ![](image10.png) --&gt;

&lt;p class=&#34;ctr&#34;&gt;
    &lt;a href=&#34;image10.png&#34;&gt;
        &lt;img class=&#34;size3&#34; src=&#34;image10.png&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Now tap the Onion Browser settings icon to get to the Settings page. You&amp;rsquo;ll see a selection option for &lt;strong&gt;&amp;ldquo;Lock App with TouchID/FaceID or Device Passcode&amp;rdquo;&lt;/strong&gt;. Select that option to enable it and restart Onion Browser. On your next use, Onion Browser will require your ID (in whatever form you&amp;rsquo;ve requested) before it will start up.&lt;/p&gt;

&lt;h2 id=&#34;useful-tips&#34;&gt;Useful Tips&lt;/h2&gt;

&lt;h3 id=&#34;dark-mode&#34;&gt;Dark Mode&lt;/h3&gt;

&lt;p&gt;The Onion Browser has a built-in Dark Mode that allows it to comply with the system setting for the &amp;ldquo;dark&amp;rdquo; color scheme. To set Dark Mode, visit the iOS Settings application and tap Display &amp;amp; Brightness. Select your appearance here and Onion Browser will comply with this setting.&lt;/p&gt;

&lt;!-- ![](image3.png) --&gt;

&lt;p class=&#34;ctr&#34;&gt;
    &lt;a href=&#34;image3.png&#34;&gt;
        &lt;img class=&#34;size3&#34; src=&#34;image3.png&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;h3 id=&#34;tab-security-hide-web-pages-when-switching-apps&#34;&gt;Tab Security - Hide Web Pages When Switching Apps&lt;/h3&gt;

&lt;p&gt;Hiding web pages when switching apps is a feature required by people who are in danger of having their device removed from their person by other bad actors. If that happens, the contents of their open tabs can be seen and perhaps screen-shotted by those bad actors and used in prosecution. While hiding web pages sounds great at first, it means you lose your browsing &amp;ldquo;state&amp;rdquo; when switching back to Onion Browser later. Frankly, it is terribly inconvenient for most users. So, there are lesser options, too. From the Onion Browser Settings page, tap &amp;ldquo;Tab Security&amp;rdquo;&lt;/p&gt;

&lt;!-- ![](image29.jpg) --&gt;

&lt;p class=&#34;ctr&#34;&gt;
    &lt;a href=&#34;image29.jpg&#34;&gt;
        &lt;img class=&#34;size3&#34; src=&#34;image29.jpg&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Then select from:&lt;/p&gt;

&lt;h4 id=&#34;forget-in-background&#34;&gt;Forget in Background&lt;/h4&gt;

&lt;p&gt;Happens when you tap the HOME button, otherwise switch apps, or the display times-out and the login screen is presented.&lt;/p&gt;

&lt;h4 id=&#34;forget-at-shutdown&#34;&gt;Forget at Shutdown&lt;/h4&gt;

&lt;p&gt;Happens only when user actually closes the app or shuts down the device&lt;/p&gt;

&lt;h4 id=&#34;remember-tabs&#34;&gt;Remember Tabs&lt;/h4&gt;

&lt;p&gt;Tabs are NOT hidden; this setting is also called &amp;ldquo;Startup in last state&amp;rdquo; and it&amp;rsquo;s the opposite of &amp;ldquo;remove web pages when switching apps&amp;rdquo; because it means your browsing state is saved between sessions. For many, this is a tremendous time-saver, but users concerned about their device being taken from them should not enable this feature.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;NOTE: Your bookmarks are also an indication of your browsing interests. Creating many bookmarks on the device leaves a certain &amp;ldquo;fingerprint&amp;rdquo; about your browsing intentions in the same way open tabs indicate what&amp;rsquo;s actually being used. See the&lt;/em&gt; Nextcloud Bookmarks &lt;em&gt;feature as a way to resolve this problem.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;onion-browser-as-your-default-system-browser&#34;&gt;Onion Browser As Your Default System Browser&lt;/h3&gt;

&lt;p&gt;There are a lot of ways you can acquire a link to web content and resources. Many applications, when seeing a link, will offer the option to open that link in the web browser. On iOS, Safari is the system browser, registered to open links, and iOS doesn&amp;rsquo;t usually allow other browsers to have that privilege. Safari doesn&amp;rsquo;t use Tor, so it&amp;rsquo;s not safe to open links that way. We can&amp;rsquo;t make Onion Browser the &amp;ldquo;system browser&amp;rdquo;, but there is a way to disable Safari and allow Onion Browser to open your links. Follow these steps:&lt;/p&gt;

&lt;p&gt;Open the iOS Settings app. Tap &amp;ldquo;Screen Time&amp;rdquo; (if it&amp;rsquo;s your first time using this feature, several help screens will follow).&lt;/p&gt;

&lt;!-- ![](image28.png) --&gt;

&lt;p class=&#34;ctr&#34;&gt;
    &lt;a href=&#34;image28.png&#34;&gt;
        &lt;img class=&#34;size3&#34; src=&#34;image28.png&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;Tap &amp;ldquo;Content &amp;amp; Privacy Restrictions&amp;rdquo; to enable it. Tap &amp;ldquo;Allowed Apps&amp;rdquo;. Tap &amp;ldquo;Safari&amp;rdquo; to disable it. This way, Safari won&amp;rsquo;t be opened when links are clicked in any app starting with http:// or https://. OnionBrowser can now open the links safely.&lt;/p&gt;

&lt;h3 id=&#34;nextcloud-bookmarks&#34;&gt;NextCloud Bookmarks&lt;/h3&gt;

&lt;p&gt;Bookmarks make it easy to access frequently-desired content as well as to preserve access to infrequently-visited, but necessary, sites. However, bookmarks can also represent intent or interest and, for those in danger of losing their device to bad actors, this can be an issue.&lt;/p&gt;

&lt;p&gt;If you use NextCloud, you can manage your Onion Browser bookmarks on your other devices and synchronize them with Onion Browser. Here&amp;rsquo;s how:&lt;/p&gt;

&lt;p&gt;&lt;!-- ![](image26.png) --&gt; &lt;!-- ![](image9.png) --&gt;
&lt;p class=&#34;ctr&#34;&gt;
    &lt;a href=&#34;image26.png&#34;&gt;
        &lt;img class=&#34;size2&#34; src=&#34;image26.png&#34;&gt;
    &lt;/a&gt;
    &lt;a href=&#34;image9.png&#34;&gt;
        &lt;img class=&#34;size2&#34; src=&#34;image9.png&#34;&gt;
    &lt;/a&gt;&lt;br /&gt;
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;Tap the Bookmarks icon, then tap &amp;lsquo;Sync with Nextcloud&amp;rsquo;.Enter the link for your Nextcloud server along with your username and password, then tap &amp;lsquo;Sync Bookmarks&amp;rsquo;.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re not a Nextcloud user and this sounds interesting, find more about NextCloud at nextcloud.com.&lt;/p&gt;

&lt;h2 id=&#34;some-failure-modes-and-how-to-recover&#34;&gt;Some Failure Modes and How to Recover&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s talk about ways in which Onion Browser - and the mountain of software and Internet network architecture behind it - can let you down. Yes, it DOES happen. Sometimes your network just doesn&amp;rsquo;t have the performance and responsiveness it requires. Sometimes your network is under heavy surveillance. Sometimes the Tor network is under direct attack by bad actors. Let&amp;rsquo;s look at a few of the failures you might experience and see what you can do to mitigate at least some of the impacts. We regret that this list is not complete.&lt;/p&gt;

&lt;h3 id=&#34;on-start-up&#34;&gt;On Start-up&lt;/h3&gt;

&lt;p&gt;What if I have no network connection of any kind and I don&amp;rsquo;t realize it? What if my network connection is very slow? What if Tor is blocked in my country?&lt;/p&gt;

&lt;p&gt;First, if you know - via friends or trusted information sources - that Tor is blocked in your country, you&amp;rsquo;ll need configure access via a bridge on your very first startup. Please revisit the prior discussion on how to properly configure Tor bridge access. Please remember, bridges tend to degrade the user experience in a number of ways. They&amp;rsquo;re a &amp;ldquo;last resort&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re not connected to a local or wide-area network (and don&amp;rsquo;t realize it) or if your connection is very poor (low-bandwidth), or if Tor is blocked in your country, Onion Browser won&amp;rsquo;t be able to start. Unfortunately, there&amp;rsquo;s no safe way to automatically distinguish between these different conditions. First, try to verify that the device itself has a connection or move to another location &amp;amp; network. Please remember, Tor can be slow to start up - especially on your first use - even under the best circumstances because it has to discover its network of nodes (at least partly) before it can build circuits. This does take a little patience.&lt;/p&gt;

&lt;h3 id=&#34;on-restart&#34;&gt;On Restart&lt;/h3&gt;

&lt;p&gt;What if Tor fails to start or restart properly within Onion Browser (can this happen, for example, when switching tabs)?&lt;/p&gt;

&lt;p&gt;If Tor fails on start/restart, Onion Browser assumes that it&amp;rsquo;s because the Tor nodes available from your location are blocked. Onion Browser will urge you to configure bridges. You won&amp;rsquo;t be able to proceed, though. You actually need to stop Onion Browser (switch to another app, or kill the app by swiping it out of iOS&amp;rsquo; app-cards overview) and then start it again.&lt;/p&gt;

&lt;p&gt;If you experience a lot of this type of failure, you may want to consider the Onion Browser setting that allows you to &amp;ldquo;Remember Tabs&amp;rdquo; (also called &amp;ldquo;start up in last state&amp;rdquo;). That&amp;rsquo;s available using &amp;ldquo;Settings -&amp;gt; Tab Security -&amp;gt; Remember Tabs&amp;rdquo;.&lt;/p&gt;

&lt;h3 id=&#34;after-a-heavy-use-session&#34;&gt;After A Heavy-Use Session&lt;/h3&gt;

&lt;p&gt;There&amp;rsquo;s a lot going on within Onion Browser and sometimes after a lot of use (or maybe due to a lot of tabs open for a long time) Onion Browser will run out of working memory on the device. In this case, iOS will probably kill the app by itself (though you may have to swipe it away from the app-cards overview under certain circumstances). When you start it again, it will be a fresh start.&lt;/p&gt;

&lt;p&gt;This is another good time to remember, if your situation allows it, use the &amp;ldquo;Remember Tabs&amp;rdquo; feature.&lt;/p&gt;

&lt;h3 id=&#34;failures-under-regular-use&#34;&gt;Failures Under Regular Use&lt;/h3&gt;

&lt;p&gt;You may experience using Onion Browser in a normal way, seemingly fine, and then when tapping a link or visiting a new site nothing seems to happen. It&amp;rsquo;s hard to know if the link or site is the problem, or if Onion Browser or Tor is the problem.&lt;/p&gt;

&lt;p&gt;You can check if Tor is still running by creating a new tab and visiting, for example, DuckDuckGo.com. If Tor really has failed, you should leave the app and enter back after a few seconds (that is, switch to another app, then return). That action should restart Tor. If that fails to help, go to iOS&amp;rsquo; app-cards overview, swipe-away Onion Browser and start it again.&lt;/p&gt;

&lt;p&gt;If the new tab opening to DuckDuckGo.com does work, then Tor is still operating and that&amp;rsquo;s a good indicator that the link or website you visited contains some JavaScript Onion Browser thinks is unsafe.&lt;/p&gt;

&lt;p&gt;Onion Browser has a pop-up and ad blocker integrated. These, unfortunately, might interfere with the web page in a way that makes it break. These features cannot be switched off, currently.&lt;/p&gt;

&lt;p&gt;Lastly, failure can happen when the Security Level currently set for the page is denying the website from taking certain actions. Loading media is one such action, though not every time. If you&amp;rsquo;re sure leaking your browsing information to somebody listening on your connection isn&amp;rsquo;t a problem, you might want to lower the security level to &amp;ldquo;Bronze&amp;rdquo;, at least for that site.&lt;/p&gt;

&lt;h3 id=&#34;what-are-these-circuits-you-talk-about&#34;&gt;What Are These &amp;ldquo;Circuits&amp;rdquo; You Talk About?&lt;/h3&gt;

&lt;p&gt;The circuit is the path your communications take through the Tor network (whose nodes exist in many countries in the world). Normally, you don&amp;rsquo;t need to take specific care regarding the circuit, because that&amp;rsquo;s Tor&amp;rsquo;s business. However, depending on the &amp;ldquo;exit node&amp;rdquo; Tor has chosen, you might see a website localized wrongly or a website that mistakes you for a hostile due to your country-of-origin (which Tor has set). In those cases you can request a new circuit. It&amp;rsquo;s easy, right there on the circuit display.&lt;/p&gt;

&lt;!-- ![](image7.jpg) --&gt;

&lt;p class=&#34;ctr&#34;&gt;
    &lt;a href=&#34;image7.jpg&#34;&gt;
        &lt;img class=&#34;size3&#34; src=&#34;image7.jpg&#34;&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;The circuit display could also hint to the reason of a slow connection. If you&amp;rsquo;re routed around the world, that might be the problem. However, Tor typically tries to avoid these situations automatically and chooses circuits with hops near you.&lt;/p&gt;

&lt;h3 id=&#34;custom-site-settings&#34;&gt;Custom Site Settings&lt;/h3&gt;

&lt;p&gt;Now that we&amp;rsquo;ve introduced &amp;ldquo;Security Levels&amp;rdquo; in the new Onion Browser, there&amp;rsquo;s much less need to store custom settings for individual websites. That&amp;rsquo;s a good thing because these settings are hard to remember once customized. For example, did you remove all restrictions from a website because you were once on a less restricted network? Well, when you&amp;rsquo;re back on your surveilled network, it&amp;rsquo;s hard to remember that you customized just that one site. That can lead to an unplanned exposure.&lt;/p&gt;

&lt;p&gt;We hope you like the new &amp;ldquo;Security Levels&amp;rdquo; mechanism - it&amp;rsquo;s much easier to monitor how much risk you&amp;rsquo;re exposed to using this mechanism. Enjoy it!&lt;/p&gt;

&lt;h2 id=&#34;support&#34;&gt;Support&lt;/h2&gt;

&lt;p&gt;Work on Onion Browser during 2019 and through mid-2020 was funded by the &lt;a href=&#34;https://www.opentech.fund/&#34;&gt;Open Technology Fund&lt;/a&gt; and sponsored by the &lt;a href=&#34;https://guardianproject.info/&#34;&gt;Guardian Project&lt;/a&gt;. &lt;a href=&#34;https://github.com/mtigas&#34;&gt;Mike Tigas&lt;/a&gt; was development architect, &lt;a href=&#34;https://github.com/tladesignz&#34;&gt;Benjamin Erhart&lt;/a&gt; was lead developer. &lt;a href=&#34;https://okthanks.com/&#34;&gt;OkThanks&lt;/a&gt; provided user-centered design services.&lt;/p&gt;

&lt;p&gt;To contribute to the long-term maintenance of Onion Browser, please visit the &lt;a href=&#34;https://onionbrowser.com/donate&#34;&gt;donation page&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NetCipher &#43; Conscrypt for the best possible TLS</title>
      <link>https://guardianproject.github.io/info/2019/12/17/netcipher-conscrypt-for-the-best-possible-tls/</link>
      <pubDate>Tue, 17 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2019/12/17/netcipher-conscrypt-for-the-best-possible-tls/</guid>
      <description>&lt;p&gt;A new NetCipher library has recently been merged:
&lt;a href=&#34;https://gitlab.com/guardianproject/NetCipher/merge_requests/86&#34;&gt;&lt;em&gt;netcipher-conscrypt&lt;/em&gt;&lt;/a&gt;.
In the same vein as the other NetCipher libraries,
&lt;em&gt;netcipher-conscrypt&lt;/em&gt; wraps the Google
&lt;a href=&#34;https://source.android.com/devices/architecture/modular-system/conscrypt&#34;&gt;Conscrypt&lt;/a&gt;
library, which provides the latest
&lt;a href=&#34;https://en.wikipedia.org/wiki/Transport_Layer_Security&#34;&gt;TLS&lt;/a&gt; for any
app that includes it.  &lt;em&gt;netcipher-conscrypt&lt;/em&gt; lets apps then disable old
TLS versions like TLSv1.0 and TLSv1.1, as well as disable TLS Session
Tickets.  This is an alpha release because it only works on recent
Android versions (8.1 or newer).  The actual functionality works well,
the hard part remains making sure that it is possible to inject
&lt;em&gt;netcipher-conscrypt&lt;/em&gt; as the TLS provider on all Android devices and
versions.  And the last missing piece is finding the right place in
Conscrypt to configure proxying to support Tor or other privacy
proxies&lt;/p&gt;

&lt;p&gt;Before Conscrypt, Android apps relied on the Android OS itself to
provide TLS.  Normally, software uses the TLS provided by the
operating system.  Since too often Android devices do not get software
updates, lots of users are stuck on old TLS versions.  So Google split
out the TLS stack from Android itself and made the Conscrypt library
from it so it can be independently updated.  Guardian Project has been
taking this approach for almost 10 years, starting with
SQLCipher-for-Android and IOCipher libraries.  We are happy to see
Google doing this themselves to give us more platform flexibility and
security.  We plan on using this as a platform for making &lt;a href=&#34;https://tools.ietf.org/html/draft-ietf-tls-sni-encryption&#34;&gt;ESNI
(Encrypted SNI)&lt;/a&gt;
available to all Android apps.&lt;/p&gt;

&lt;p&gt;It is exciting to see ideas that we have been championing over the
past decade to get mainstream adoption.  TLS Session Tickets have
always had serious &lt;a href=&#34;https://blog.filippo.io/we-need-to-talk-about-session-tickets/&#34;&gt;security&lt;/a&gt; and &lt;a href=&#34;https://www.theregister.co.uk/2018/10/19/tls_handshake_privacy/&#34;&gt;privacy&lt;/a&gt; issues, Android 10 &lt;a href=&#34;https://source.android.com/devices/architecture/modular-system/conscrypt#consrypt-q&#34;&gt;now
provides&lt;/a&gt;
an official API for disabling TLS Session Tickets:
&lt;a href=&#34;https://developer.android.com/reference/android/net/ssl/SSLSockets.html&#34;&gt;android.net.ssl.SSLSockets&lt;/a&gt;
and
&lt;a href=&#34;https://developer.android.com/reference/android/net/ssl/SSLEngines.html&#34;&gt;android.net.ssl.SSLEngines&lt;/a&gt;.
And the idea of per-app file encryption, which &lt;em&gt;IOCipher&lt;/em&gt; provides, can
now be largely provided by the built-in &lt;a href=&#34;https://source.android.com/security/encryption/file-based&#34;&gt;Android File-Based Encryption
(FBE)&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Trusted Update Channels vs. Scratching Your Itch</title>
      <link>https://guardianproject.github.io/info/2019/12/02/trusted-update-channels-vs.-scratching-your-itch/</link>
      <pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2019/12/02/trusted-update-channels-vs.-scratching-your-itch/</guid>
      <description>&lt;p&gt;One of the great things about free software is that people can easily take a functional program or library and customize it as they see fit.  Anyone can come along, submit bug fixes or improvements, and they can be easily shared across many people, projects, and organizations.  With distribution systems like Python&amp;rsquo;s &lt;a href=&#34;https://pypi.python.org&#34;&gt;pypi&lt;/a&gt;, there is an update channel that the trusted maintainers can publish fixes so consumers of the library can easily get updates.  When talking about update channels and code, it is unavoidable to also talk about people and trust.  One key piece is the trust relationship between the consumer and the maintainer.  The ideal software distribution system would be a blind, trustworthy pipe between the software maintainers and each end user.&lt;/p&gt;

&lt;p&gt;Since we are talking about libraries of code, the natural relationship turns out to be different than the trust relationship: it is between the consumer and the library itself, not the maintainers.  I use Requests for handling HTTP, not @nateprewitt&amp;rsquo;s fork.  My &lt;em&gt;setup.py&lt;/em&gt; includes a reference to &lt;code&gt;&#39;requests&#39;&lt;/code&gt;, not to the maintainers who I trust to keep the library updated.&lt;/p&gt;

&lt;p&gt;There have been cases were libraries were &lt;a href=&#34;https://www.zdnet.com/article/backdoor-code-found-in-11-ruby-libraries/&#34;&gt;taken&lt;/a&gt; &lt;a href=&#34;https://www.theregister.co.uk/2018/07/12/npm_eslint/&#34;&gt;over&lt;/a&gt; and used to distribute malware.  Or &lt;a href=&#34;https://www.theregister.co.uk/2018/11/26/npm_repo_bitcoin_stealer/&#34;&gt;another case&lt;/a&gt; where someone offered to take over a popular library, then inserted malware into it.  If it is really easy for maintainers to hand over a library to someone else, then that will be abused.  If they are too hard to hand over, then many valuable libraries will be abandoned or forked.  Having to check for forks is an added cost for library consumers, so ideally there would always be a trusted maintainer.&lt;/p&gt;

&lt;p&gt;For large projects like Requests or distros like Debian, there is a process for ensuring that new maintainers are doing the right thing.  There are also many small libraries that are very valuable.  For example, &lt;a href=&#34;https://github.com/rory/apache-log-parser&#34;&gt;apache_log_parser&lt;/a&gt; or &lt;a href=&#34;https://pypi.org/project/PyMTP/&#34;&gt;pymtp&lt;/a&gt;.   In these cases, the cost of doing a proper process of handing over to a new maintainer is quite large as compared to the overall effort the library author put into the library.  Or it might be a single maintainer who is now overburdened with other work.&lt;/p&gt;

&lt;p&gt;In F-Droid, reviewing app merge requests, aka &lt;em&gt;fdroiddata&lt;/em&gt;, is also about reviewing whether the trust relationship is changing.  This is on top of making sure the new code works, ensuring its still free software, and that all of the Anti-Features are properly marked.  Getting this review right is important especially when you consider that in F-Droid, many apps are automatically updated without core contributors reviewing it.&lt;/p&gt;

&lt;p&gt;All developers must consider these trust issues at a number of key points in the process of developing software, including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;when adding a library to any piece of software&lt;/li&gt;
&lt;li&gt;helping a new maintainer take over existing software&lt;/li&gt;
&lt;li&gt;reviewing changes to the URL of the source code reposistory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are also some ideas about how to better map who we need to trust to the process of including software.  One interesting example is &lt;a href=&#34;https://dpc.pw/cargo-crev-and-rust-2019-fearless-code-reuse&#34;&gt;&lt;em&gt;cargo-crev&lt;/em&gt;&lt;/a&gt; for the Rust ecosystem.  It provides a system of describing and cryptographically linking trusted developers and their reviews of software packages.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IOCipher 64-bit builds</title>
      <link>https://guardianproject.github.io/info/2019/10/07/iocipher-64-bit-builds/</link>
      <pubDate>Mon, 07 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2019/10/07/iocipher-64-bit-builds/</guid>
      <description>&lt;p&gt;IOCipher v0.5 includes fulil 64-bit support and works with the latest
SQLCipher versions.  This means that the minimum supported SDK version
had to be bumped to &lt;em&gt;android-14&lt;/em&gt;, which is still older than what
Google Play Services and Android Support libraries require.&lt;/p&gt;

&lt;p&gt;One important thing to note is that newer SQLCipher versions require
an upgrade procedure since they changed how the data is encrypted.
Since IOCipher does use a SQLCipher database, and IOCipher virtual
disks will have to be upgraded.  That can be done by directly using the
&lt;a href=&#34;https://www.zetetic.net/sqlcipher/sqlcipher-api/#cipher_migrate&#34;&gt;SQLCipher migration method&lt;/a&gt;
on your IOCipher database files before opening them again.  It should
be possible to stick with SQLCipher
&lt;a href=&#34;https://github.com/sqlcipher/android-database-sqlcipher/issues/446&#34;&gt;v3.5.9 to avoid this&lt;/a&gt;,
but this has not been tested.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tor Project: Orfox Paved the Way for Tor Browser on Android </title>
      <link>https://guardianproject.github.io/info/2019/09/03/tor-project-orfox-paved-the-way-for-tor-browser-on-android/</link>
      <pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2019/09/03/tor-project-orfox-paved-the-way-for-tor-browser-on-android/</guid>
      <description>&lt;p&gt;Last month, we tagged the &lt;a href=&#34;https://github.com/guardianproject/Orfox/releases/tag/Orfox-Final-RIP-v16&#34;&gt;final release of Orfox&lt;/a&gt;, an important milestone for us in our work on Tor. Today, we pushed this final build out to all the Orfox users on Google Play, which forces them to upgrade to the official Tor Browser for Android..&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;orfoxrip.png&#34; alt=&#34;Orfox RIP app image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Our goal was never to become the primary developer or maintainer of the &amp;ldquo;best&amp;rdquo; tor-enabled web browser app on Android. Instead, we chose to act as a catalyst to get the Tor Project and the Tor Browser development team themselves to take on Android development, and upstream our work into the primary codebase. This has happened, and it is a great news for everyone. The work for developing and updating Tor Browser on the desktop and Android are now coordinated and synchronized, and end-users benefit from more frequent updates and improvements.&lt;/p&gt;

&lt;p&gt;Most importantly, the &lt;a href=&#34;https://github.com/amoghbl1&#34;&gt;Amazing Amogh&lt;/a&gt; can focus on his PhD studies, and not on continuing the heroic task of trying to merge Firefox releases, Tor Browser patches, and Android proxy setting code for four different HTTP network libraries! Thanks, Amogh!&lt;/p&gt;

&lt;p&gt;From the &lt;a href=&#34;https://blog.torproject.org/orfox-paved-way-tor-browser-android&#34;&gt;Tor Project&amp;rsquo;s blog&lt;/a&gt; announcing the last release of Orfox:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Mobile browsing has increasingly become the primary way many people go online. In 2014, Tor Browser was used by millions of people on their desktop computers, but there was not yet a way to use Tor on a mobile device. We have long recognized the need for protecting people&amp;rsquo;s rights to privacy and freedom online, including on mobile devices, but as a small nonprofit organization, we were not yet ready to meet that demand. That&amp;rsquo;s when our friends at Guardian Project began exploring the possibility of providing Tor Browser on Android themselves. Their answer was Orfox.&lt;/p&gt;

&lt;p&gt;Orfox was first released 23 September 2015. Over the next three years, Orfox continously improved and became a popular way for people to browse the internet with more privacy than standard browsers, and Orfox was crucial for helping people circumvent censorship and access blocked sites and critical resources. It was installed over 14 million times, and maintained over 1 million active users.&lt;/p&gt;

&lt;p&gt;In late 2017, we began working on our own Tor Browser for Android. Because of Orfox&amp;rsquo;s success, the development path for us was clearer and more in reach. We were able to build upon Guardian Project&amp;rsquo;s work and bring a browser with the full protections of Tor Browser to Android. We released the alpha version of Tor Browser for Android in September 2018 and launched the stable version this May. After nearly a year since we released the alpha version of Tor Browser on Android, the time for sunsetting Orfox has come.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If you have Orfox, you will see the upgrade and prompt to install Tor Browser for Android soon. Otherwise, you can just &lt;a href=&#34;https://play.google.com/store/apps/details?id=org.torproject.torbrowser&amp;amp;hl=en_US&#34;&gt;go directly to install and get it now!&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NetCipher update: global, SOCKS, and TLSv1.2</title>
      <link>https://guardianproject.github.io/info/2019/06/25/netcipher-update-global-socks-and-tlsv1.2/</link>
      <pubDate>Tue, 25 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2019/06/25/netcipher-update-global-socks-and-tlsv1.2/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://guardianproject.github.io/info/code/netcipher&#34;&gt;NetCipher&lt;/a&gt; has been relatively quiet in recent years, because it kept
on working, doing it was doing. Now, we have had some recent
discoveries about the guts of Android that mean NetCipher is a lot easier
to use on recent Android versions.  On top of that, TLSv1.2 now reigns
supreme and is basically everywhere, so it is time to turn TLSv1.0 and
TLSv1.1 entirely off.&lt;/p&gt;

&lt;h2 id=&#34;a-single-method-to-enable-proxying-for-the-whole-app&#34;&gt;A single method to enable proxying for the whole app&lt;/h2&gt;

&lt;p&gt;As of Android 8.0 (26 aka Oreo), it is now possible to set a
&lt;code&gt;URLStreamHandlerFactory&lt;/code&gt;, which creates &lt;code&gt;URLConnection&lt;/code&gt; instances
with custom configurations.  If an app is using the built-in
&lt;code&gt;HttpURLConnection&lt;/code&gt; API for its networking, it is now possible to
enable global proxying with a single method call when the app starts:
&lt;a href=&#34;https://guardianproject.github.io/NetCipher/libnetcipher/info/guardianproject/netcipher/NetCipher.html#useGlobalProxy--&#34;&gt;&lt;code&gt;NetCipher.useGlobalProxy()&lt;/code&gt;&lt;/a&gt;.
Then the actual proxy configuration can be set dynamically, using
things like
&lt;a href=&#34;https://guardianproject.github.io/NetCipher/libnetcipher/info/guardianproject/netcipher/NetCipher.html#useTor--&#34;&gt;&lt;code&gt;NetCipher.useTor()&lt;/code&gt;&lt;/a&gt;
or
&lt;a href=&#34;https://guardianproject.github.io/NetCipher/libnetcipher/info/guardianproject/netcipher/NetCipher.html#clearProxy--&#34;&gt;&lt;code&gt;NetCipher.clearProxy()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;URL.setURLStreamHandlerFactory()&lt;/code&gt; method is a little odd because it cannot be unset or changed after it has been set.  NetCipher handles this by letting the app configure the proxy settings separately, so they can be disabled even though the custom &lt;code&gt;URLStreamHandlerFactory&lt;/code&gt; is still active.  Also, it is possible to use &lt;code&gt;URL.setURLStreamHandlerFactory&lt;/code&gt; on Android 7.x also, but it leaks DNS, so it is not recommended for privacy proxies.  It would still be useful as a failsafe for apps that use &lt;a href=&#34;https://guardianproject.github.io/NetCipher/libnetcipher/info/guardianproject/netcipher/NetCipher.html#getHttpURLConnection-java.lang.String-&#34;&gt;&lt;code&gt;NetCipher.getHttpURLConnection()&lt;/code&gt;&lt;/a&gt;, in case there are any calls to &lt;code&gt;URL.openConnection()&lt;/code&gt; added with the right proxy setup.  At the very least, the content will be proxied on Android 7.x, even if it leaks DNS.&lt;/p&gt;

&lt;h2 id=&#34;native-socks-support&#34;&gt;Native SOCKS Support&lt;/h2&gt;

&lt;p&gt;In Android 7.0 (24 aka Nougat), Google switched over to OpenJDK, which brought working SOCKS support to Android.  SOCKS is the best protocol for effective proxying, and it is the protocol that Tor itself has always natively supported.  Orbot has always provided a separaete HTTP Proxy to support Android, but that has always proven brittle, and was often the source of problems.  Since Android 7.0 and above natively support SOCKS, calling &lt;code&gt;NetCipher.useTor()&lt;/code&gt; will now default to using SOCKS if the device is running Android 7.0 or higher.&lt;/p&gt;

&lt;h2 id=&#34;bye-bye-tlsv1-0-and-tlsv1-1&#34;&gt;Bye bye TLSv1.0 and TLSv1.1&lt;/h2&gt;

&lt;p&gt;Transport Layer Security (TLS) is the protocol that powers most of the internet these days.  It gives HTTPS the S for &amp;ldquo;Secure&amp;rdquo;. After many years of slow updates and an increasing number of vulnerabilities, there is finally critical mass to stop using the old, broken versions.  TLS version 1.2 is not seriously vulnerable and is supported basically everywhere.  TLSv1.2 was finalized in 2008, so this is very far from the bleeding edge.  TLSv1.2 is supported all the way back to &lt;a href=&#34;https://developer.android.com/reference/javax/net/ssl/SSLSocket#protocols&#34;&gt;Android 4.1&lt;/a&gt;.  TLSv1.0 and TLSv1.1 are due to be officially deprecated by the IETF, the standards body that actually creates the TLS standard.  The major browser vendors have all promised to drop them in 2020.&lt;/p&gt;

&lt;p&gt;One way to enforce TLSv1.2 support would be to configure the server-side to stop supporting TLSv1.0 and TLSv1.1, like is recommend with SSLv2 and SSLv3.  Using NetCipher to do this on the client side
means that old app versions and devices of F-Droid and old devices will continue to work.
Also, doing it client-side means that all TLS connections will gain this protection regardless of which server the client is connecting to.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;NetCipher&lt;/em&gt; approach means apps will never use TLS older than v1.2 since they will refuse to connect unless TLSv1.2 is available.  The server-side can then safely support TLSv1.0 and TLSv1.1, so older clients and Android devices will still be able to connect, even if they do not support TLSv1.2.  It is win-win
for everyone.&lt;/p&gt;

&lt;p&gt;The one case that will fail entirely is connections to servers that do not support TLSv1.2.  If a webserver does not support TLSv1.2, it is really too old to be used safely anyway.  Even the oldest supported Red Hat Enterprise Linux release (6) supports TLSv1.2, and that was released in 2010.&lt;/p&gt;

&lt;h2 id=&#34;webview-proxying&#34;&gt;&lt;code&gt;WebView&lt;/code&gt; Proxying!&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.android.com/reference/android/webkit/WebView&#34;&gt;&lt;code&gt;WebView&lt;/code&gt;&lt;/a&gt; provides an easy way to show a webpage or build a web app.  If you want that page to always go over Tor, that is difficult since &lt;code&gt;WebView&lt;/code&gt; has no API to configure proxying.  NetCipher has a long running collection of hacks that span the Android versions to get proxying working in &lt;code&gt;WebView&lt;/code&gt;.  We have revived those, modernized them, and added a full test suite to confirm whether the proxying is leaking.  The good news is that proxying is working pretty well on all but Android 5.x (21 and 22), where it totally fails.&lt;/p&gt;

&lt;p&gt;Another new Android API we discovered is &lt;a href=&#34;https://developer.android.com/reference/android/webkit/WebViewClient.html#shouldInterceptRequest(android.webkit.WebView,%20android.webkit.WebResourceRequest)&#34;&gt;&lt;code&gt;WebViewClient.shouldInterceptRequest()&lt;/code&gt;&lt;/a&gt;.  This is an official API for manipulating HTTP requests in &lt;code&gt;WebView&lt;/code&gt;.  It is an an easy place to insert custom &lt;code&gt;HttpURLConnection&lt;/code&gt; instances, like NetCipher needs to configure proxy support and stronger TLS.  Using this API means eliminating Java reflection hacks.  But it has a large caveat: it only works for &lt;em&gt;GET&lt;/em&gt; requests.  Since the request body is not accessible via this API, it is not possible to implement &lt;em&gt;POST&lt;/em&gt; or &lt;em&gt;PUT&lt;/em&gt; requests.  One nice approach for the best of both works is to handle &lt;em&gt;GET&lt;/em&gt; with &lt;code&gt;WebViewClient.shouldInterceptRequest()&lt;/code&gt;, then &lt;em&gt;POST&lt;/em&gt; and &lt;em&gt;PUT&lt;/em&gt; could then be implemented separately using the reflection methods in NetCipher WebView.&lt;/p&gt;

&lt;h2 id=&#34;tests&#34;&gt;Tests!&lt;/h2&gt;

&lt;p&gt;This release also brings with it an extensive, new test suite.  These let us confirm that things are working on all the supporting Android versions, while also serving as simple example cases.  For example, the tests now confirm which Android releases support &lt;code&gt;WebView&lt;/code&gt; proxying, based on Cure53&amp;rsquo;s very useful &lt;a href=&#34;https://github.com/cure53/HTTPLeaks&#34;&gt;HTTPLeaks&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PanicKit 1.0: built-in panic button and full app wipes</title>
      <link>https://guardianproject.github.io/info/2019/06/04/panickit-1.0-built-in-panic-button-and-full-app-wipes/</link>
      <pubDate>Tue, 04 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://guardianproject.github.io/info/2019/06/04/panickit-1.0-built-in-panic-button-and-full-app-wipes/</guid>
      <description>

&lt;p&gt;Panic Kit is 1.0!  After over three years of use, it is time to call
this stable and ready for widespread use.&lt;/p&gt;

&lt;link rel=&#34;stylesheet&#34; href=&#34;https://guardianproject.github.io/info/css/jquery.fancybox-3.4.0.min.css&#34; /&gt;
&lt;script src=&#34;https://guardianproject.github.io/info/js/jquery-3.3.1.min.js&#34;&gt;&lt;/script&gt;
&lt;script src=&#34;https://guardianproject.github.io/info/js/jquery.fancybox.min.js&#34;&gt;&lt;/script&gt;
&lt;div class=&#34;gallery&#34;&gt;
  
  
  &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://guardianproject.github.io/info/info/2019/06/04/panickit-1.0-built-in-panic-button-and-full-app-wipes/Screenshot_1559551039.png&#34;&gt;
    &lt;img src=&#34;https://guardianproject.github.io/info/info/2019/06/04/panickit-1.0-built-in-panic-button-and-full-app-wipes/Screenshot_1559551039.png&#34;&gt;  &lt;br/&gt;
  &lt;/a&gt;
  
  &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://guardianproject.github.io/info/info/2019/06/04/panickit-1.0-built-in-panic-button-and-full-app-wipes/Screenshot_1559551407.png&#34;&gt;
    &lt;img src=&#34;https://guardianproject.github.io/info/info/2019/06/04/panickit-1.0-built-in-panic-button-and-full-app-wipes/Screenshot_1559551407.png&#34;&gt;  &lt;br/&gt;
  &lt;/a&gt;
  
  &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://guardianproject.github.io/info/info/2019/06/04/panickit-1.0-built-in-panic-button-and-full-app-wipes/screenshot_fdroid_destructive0.png&#34;&gt;
    &lt;img src=&#34;https://guardianproject.github.io/info/info/2019/06/04/panickit-1.0-built-in-panic-button-and-full-app-wipes/screenshot_fdroid_destructive0.png&#34;&gt;  &lt;br/&gt;
  &lt;/a&gt;
  
  &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://guardianproject.github.io/info/info/2019/06/04/panickit-1.0-built-in-panic-button-and-full-app-wipes/screenshot_fdroid_destructive1.png.png&#34;&gt;
    &lt;img src=&#34;https://guardianproject.github.io/info/info/2019/06/04/panickit-1.0-built-in-panic-button-and-full-app-wipes/screenshot_fdroid_destructive1.png.png&#34;&gt;  &lt;br/&gt;
  &lt;/a&gt;
  
  &lt;a data-fancybox=&#34;gallery&#34; href=&#34;https://guardianproject.github.io/info/info/2019/06/04/panickit-1.0-built-in-panic-button-and-full-app-wipes/screenshot_ripple.png&#34;&gt;
    &lt;img src=&#34;https://guardianproject.github.io/info/info/2019/06/04/panickit-1.0-built-in-panic-button-and-full-app-wipes/screenshot_ripple.png&#34;&gt;  &lt;br/&gt;
  &lt;/a&gt;
  
  
&lt;/div&gt;


&lt;h2 id=&#34;built-in-panic-button&#34;&gt;Built-in panic button&lt;/h2&gt;

&lt;p&gt;This round of work includes a new prototype for embedding PanicKit
directly into Android.  Android 9.0 Pie introduced a new &amp;ldquo;lockdown&amp;rdquo;
mode which follows some of the patterns laid out by PanicKit.  There
is an &lt;em&gt;Enter lockdown&lt;/em&gt; button available on the power button menu, so
it is rapidly available.  This is a great panic trigger button, so we
made a prototype of a System Settings app that lets users connect the
full flexibility of PanicKit responses to this &lt;em&gt;Enter lockdown&lt;/em&gt;
button.  The functionality that Google links to this new button is
extremely limited, it seems to be a &lt;a href=&#34;https://www.androidpolice.com/2018/03/08/android-p-feature-spotlight-new-lockdown-option-power-menu-turns-off-fingerprint-unlocking-something-called-extended-access/&#34;&gt;one time restriction on how you
login&lt;/a&gt;.
The PanicKit responses are in addition to what Google
included. CalyxOS is
&lt;a href=&#34;https://gitlab.com/calyxos/calyxos/issues/72&#34;&gt;working&lt;/a&gt; to integrate
this, look for test releases soon!&lt;/p&gt;

&lt;h2 id=&#34;full-wipes-of-selected-apps&#34;&gt;Full wipes of selected apps&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://f-droid.org&#34;&gt;F-Droid v1.7-alpha1&lt;/a&gt; has alpha support for
uninstalling and wiping all data from selected apps in response to a
panic trigger, including Ripple and F-Droid.  So the whole panic setup
could be wiped as part of the response.  It is essential to have a
complete, tested backup before trying this new feature, since it will
delete all of the data for each app that is uninstalled.&lt;/p&gt;

&lt;p&gt;This requires &lt;a href=&#34;https://f-droid.org/packages/org.fdroid.fdroid.privileged.ota&#34;&gt;F-Droid Privileged
Extension&lt;/a&gt;
be installed on the device, in order to uninstall apps without a
prompt for each app.  Android ROMs like CalyxOS, CopperheadOS,
Fairphone Open, Replicant, and Lineage-for-microG all include F-Droid
Privileged Extension.&lt;/p&gt;

&lt;h2 id=&#34;ripple-is-polished-up&#34;&gt;Ripple is polished up&lt;/h2&gt;

&lt;p&gt;Ripple also received some modernization and polish.  Google has
reinstated the Ripple app in Google Play, so it is again widely
available.  Ripple was of course available the whole time via F-Droid.
Google suspended Ripple without explanation, then a long while later
reinstated it without explanation.&lt;/p&gt;

&lt;p&gt;This work was made possible in part from donations from Handshake Foundation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use Onions/HTTPS for software updates</title>
      <link>https://guardianproject.github.io/info/2019/01/23/use-onions/https-for-software-updates/</link>
      <pubDate>Wed, 23 Jan 2019 06:35:40 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2019/01/23/use-onions/https-for-software-updates/</guid>
      <description>

&lt;p&gt;There is a new &lt;a href=&#34;https://lists.debian.org/debian-security-announce/2019/msg00010.html&#34; target=&#34;_blank&#34;&gt;vulnerability in Debian’s apt&lt;/a&gt; that allows anything that can Man-in-the-Middle (MITM) your traffic to get root on your Debian/Ubuntu/etc boxes. Using encrypted connections for downloading updates, like HTTPS or Tor Onion Services, reduces this vulnerability to requiring root on the mirror server in order to exploit it. That is a drastic reduction in exposure. We have been pushing for this &lt;a href=&#34;https://guardianproject.info/2014/10/16/reducing-metadata-leakage-from-software-updates/&#34;&gt;since 2014&lt;/a&gt;, and &lt;a href=&#34;https://onion.debian.org&#34; target=&#34;_blank&#34;&gt;Debian&lt;/a&gt;, &lt;a href=&#34;https://ftp.fau.de&#34; target=&#34;_blank&#34;&gt;mirror&lt;/a&gt; &lt;a href=&#34;https://mirrors.kernel.org&#34; target=&#34;_blank&#34;&gt;operators&lt;/a&gt;, and others in the ecosystem have taken some big steps towards making this the standard. This should finally put to rest the idea that plain &lt;a href=&#34;https://whydoesaptnotusehttps.com/&#34; target=&#34;_blank&#34;&gt;HTTP is enough&lt;/a&gt; for software updates with signed metadata.&lt;/p&gt;

&lt;p&gt;To this end, we have always supported &lt;a href=&#34;https://f-droid.org/docs/Security_Model/&#34; target=&#34;_blank&#34;&gt;F-Droid’s practice&lt;/a&gt; of requiring HTTPS connections to f-droid.org and mirrors, even though the signed metadata file is the essential mechanism for providing security.&lt;/p&gt;

&lt;h2 id=&#34;using-encrypted-connections-on-your-server&#34;&gt;Using encrypted connections on your server&lt;/h2&gt;

&lt;p&gt;Over the years, we have been honing our &lt;code&gt;apt&lt;/code&gt; sources setup to use encrypted connections as much as possible, while getting updates as fast as possible. The hard part of this is that the &lt;a href=&#34;http://security.debian.org&#34; target=&#34;_blank&#34;&gt;official Debian security server&lt;/a&gt; only provides HTTP. There are mirrors of that that are available over HTTPS, but they can receive updates hours or days later. The best fix for this would be for Debian to provide an HTTPS connection to &lt;code&gt;security.debian.org&lt;/code&gt;. There are still things in the &lt;code&gt;apt&lt;/code&gt; source configuration that can help. There are three levels we use:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;only Tor Onion Services for all updates, this means always encrypted and over Tor, but can mean that updates are delayed, for example if Tor traffic is blocked.&lt;/li&gt;
&lt;li&gt;First try Tor Onion, then try HTTPS. This provides a backup connection method in case Tor is not working, for whatever reason, but still could get updates slower than the official security source&lt;/li&gt;
&lt;li&gt;First try Tor Onion, then try HTTPS, then try HTTP. But HTTP is only enabled for &lt;code&gt;security.debian.org&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can see an example of the final option by looking at &lt;a href=&#34;https://gitlab.com/fdroid/fdroid-cfarm-bootstrap/commit/24389018a164e110e7204f2b2c62a7b81863cdd4&#34; target=&#34;_blank&#34;&gt;F-Droid’s compile farm server config&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;fixing-your-boxes&#34;&gt;Fixing your boxes&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;@abelxluck&lt;/code&gt; aka &lt;code&gt;@abeluck&lt;/code&gt; put out an &lt;a href=&#34;https://gist.github.com/abeluck/67525909a17403060cd1722b53d57d00&#34; target=&#34;_blank&#34;&gt;Ansible Playbook&lt;/a&gt; to do this update. Here is a quick script for securely updating on Debian/stretch/amd64 based on the &lt;a href=&#34;https://lists.debian.org/debian-security-announce/2019/msg00010.html&#34; target=&#34;_blank&#34;&gt;info published&lt;/a&gt; on the debian-security list:&lt;br /&gt;
&lt;code&gt;&amp;lt;br /&amp;gt;
#!/bin/sh -ex&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;apt -o Acquire::http::AllowRedirect=false update || true&amp;lt;br /&amp;gt;
apt -o Acquire::http::AllowRedirect=false upgrade --download-only || true&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;cd /var/cache/apt/archives&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;test -e apt-dbgsym_1.4.9_amd64.deb &amp;amp;&amp;amp; \&amp;lt;br /&amp;gt;
echo &amp;quot;1da507155c7b1ad140739c62fdacceaf5b5ee3765b1a00c3a3527d9d82a8d533  apt-dbgsym_1.4.9_amd64.deb&amp;quot; | sha256sum -c&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;test -e apt-transport-https-dbgsym_1.4.9_amd64.deb &amp;amp;&amp;amp; \&amp;lt;br /&amp;gt;
echo &amp;quot;59f3e1c91664fe3b47048794560ebe9c41f1eeccbdd95f7715282f8cbe449060  apt-transport-https-dbgsym_1.4.9_amd64.deb&amp;quot; | sha256sum -c&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;test -e apt-transport-https_1.4.9_amd64.deb &amp;amp;&amp;amp; \&amp;lt;br /&amp;gt;
echo &amp;quot;c8c4366d1912ff8223615891397a78b44f313b0a2f15a970a82abe48460490cb  apt-transport-https_1.4.9_amd64.deb&amp;quot; | sha256sum -c&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;test -e apt-utils-dbgsym_1.4.9_amd64.deb &amp;amp;&amp;amp; \&amp;lt;br /&amp;gt;
echo &amp;quot;e3e157c291b05b2899a545331c7597ab36ca04e02cd9010562b9985b76af60db  apt-utils-dbgsym_1.4.9_amd64.deb&amp;quot; | sha256sum -c&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;test -e apt-utils_1.4.9_amd64.deb &amp;amp;&amp;amp; \&amp;lt;br /&amp;gt;
echo &amp;quot;fb227d1c4615197a6263e7312851ac3601d946221cfd85f20427a15ab9658d15  apt-utils_1.4.9_amd64.deb&amp;quot; | sha256sum -c&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;test -e apt_1.4.9_amd64.deb &amp;amp;&amp;amp; \&amp;lt;br /&amp;gt;
echo &amp;quot;dddf4ff686845b82c6c778a70f1f607d0bb9f8aa43f2fb7983db4ff1a55f5fae  apt_1.4.9_amd64.deb&amp;quot; | sha256sum -c&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;test -e libapt-inst2.0-dbgsym_1.4.9_amd64.deb &amp;amp;&amp;amp; \&amp;lt;br /&amp;gt;
echo &amp;quot;0e66db1f74827f06c55ac36cc961e932cd0a9a6efab91b7d1159658bab5f533e  libapt-inst2.0-dbgsym_1.4.9_amd64.deb&amp;quot; | sha256sum -c&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;test -e libapt-inst2.0_1.4.9_amd64.deb &amp;amp;&amp;amp; \&amp;lt;br /&amp;gt;
echo &amp;quot;a099c57d20b3e55d224433b7a1ee972f6fdb79911322882d6e6f6a383862a57d  libapt-inst2.0_1.4.9_amd64.deb&amp;quot; | sha256sum -c&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;test -e libapt-pkg-dev_1.4.9_amd64.deb &amp;amp;&amp;amp; \&amp;lt;br /&amp;gt;
echo &amp;quot;cfb0a03ecd22aba066d97e75d4d00d791c7a3aceb2e5ec4fbee7176389717404  libapt-pkg-dev_1.4.9_amd64.deb&amp;quot; | sha256sum -c&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;test -e libapt-pkg5.0-dbgsym_1.4.9_amd64.deb &amp;amp;&amp;amp; \&amp;lt;br /&amp;gt;
echo &amp;quot;cdb03ddd57934e773a579a89f32f11567710a39d6ac289e73efb20e8825874d1  libapt-pkg5.0-dbgsym_1.4.9_amd64.deb&amp;quot; | sha256sum -c&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;test -e libapt-pkg5.0_1.4.9_amd64.deb &amp;amp;&amp;amp; \&amp;lt;br /&amp;gt;
echo &amp;quot;03281e3d1382826d5989c12c77a9b27f5f752b0f6aa28b524a2df193f7296e0b  libapt-pkg5.0_1.4.9_amd64.deb&amp;quot; | sha256sum -c&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&lt;/code&gt;``````````````````&lt;code&gt;apt -o Acquire::http::AllowRedirect=false upgrade&amp;lt;br /&amp;gt;
&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IOCipher is the antidote to “Man-in-the-Disk” attack</title>
      <link>https://guardianproject.github.io/info/2018/08/17/iocipher-is-the-antidote-to-man-in-the-disk-attack/</link>
      <pubDate>Fri, 17 Aug 2018 16:56:00 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2018/08/17/iocipher-is-the-antidote-to-man-in-the-disk-attack/</guid>
      <description>&lt;p&gt;Recently, at DEFCON 2018, researchers at Check Point &lt;a href=&#34;https://blog.checkpoint.com/2018/08/12/man-in-the-disk-a-new-attack-surface-for-android-apps/&#34;&gt;announced a new kind of attack&lt;/a&gt; made possible by the way many Android apps are implemented. In summary, developers use the shared external storage space in an unsafe manner, by not taking into consideration that other apps also have read and write access to the same space. A malicious app can modify data used by another app, as a vector for compromising that app, causing it to be compromised or crash.&lt;/p&gt;

&lt;p&gt;While Google does provide &lt;a href=&#34;https://developer.android.com/training/articles/security-tips&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;guidelines&lt;/a&gt; on safe external storage use, most developers ignore them. Here is what they say:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;“Perform input validation when handling data from external storage”&lt;/li&gt;
&lt;li&gt;“Do not store executables or class files on External Storage”&lt;/li&gt;
&lt;li&gt;“External Storage files should be signed and cryptographically verified prior to dynamic loading”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is most likely due to lack of time or knowledge…. and, that is where our &lt;a href=&#34;https://guardianproject.info/code/iocipher/&#34;&gt;IOCipher encrypted virtual filesystem library for Android&lt;/a&gt; comes in!&lt;/p&gt;

&lt;p&gt;IOCipher provides a virtual encrypted disk for Android apps without requiring the device to be rooted. It uses a clone of the standard &lt;code&gt;java.io&lt;/code&gt; API for working with files, so developers already know how to use it. Only password handling, and opening the virtual disk are what stand between the developer and working encrypted file storage. It is based on and &lt;a href=&#34;https://www.zetetic.net/sqlcipher/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SQLCipher&lt;/a&gt;, and designed to work with &lt;a href=&#34;https://github.com/guardianproject/IOCipher&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CacheWord&lt;/a&gt; for handling the keys and passwords.&lt;/p&gt;

&lt;p&gt;Regarding the three guidelines from Google, by storing downloaded data into an IOCipher virtual volume, you both benefit from the use of external storage, while ensuring, thanks to cryptography, that your data or executable code has not been read or modified by another application. If a malicious application tries to access or modify the encrypted volume, it will be detected and not able to load, without causing a crash in the application.&lt;/p&gt;

&lt;p&gt;You can find IOCipher on Github today (and likely get it implemented in your app today, as well!)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/guardianproject/IOCipher&#34;&gt;https://github.com/guardianproject/IOCipher&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a Signing Server</title>
      <link>https://guardianproject.github.io/info/2017/12/18/building-a-signing-server/</link>
      <pubDate>Mon, 18 Dec 2017 05:43:34 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2017/12/18/building-a-signing-server/</guid>
      <description>

&lt;p&gt;The Android APK signing model sets the expectation that the signing key will be the same for the entire lifetime of the app. That can be seen in the recommended lifetype of an Android signing key: &lt;a href=&#34;https://developer.android.com/studio/publish/app-signing.html#considerations&#34;&gt;20+ years&lt;/a&gt;. On top of that, it is difficult to &lt;a href=&#34;https://guardianproject.info/2015/12/29/how-to-migrate-your-android-apps-signing-key/&#34;&gt;migrate an app to a new key&lt;/a&gt;. Since the signing key is an essential part to preventing APKs from impersonating another, Android signing keys must be kept safe for the entire life of the app.&lt;/p&gt;

&lt;p&gt;The F-Droid repo signing keys follow a very similar model: the signing key is the essential way to safely identify an F-Droid repo. So the same considerations apply to F-Droid repo signing keys as to APK signing keys. This also provides some really useful benefits. Since the integrity of the repo index file and the APKs are guaranteed by the repo signature, the files can be delivered via whatever method is most convenient, and their integrity will be automatically verified by the F-Droid client app, the &lt;em&gt;f-droid.org&lt;/em&gt; deploy process, and Repomaker.&lt;/p&gt;

&lt;p&gt;This means the security burden is shifted from the online, public webserver to a private signing machine. Just keeping that machine out of the public eye goes a long way towards improving security. There are a number of additional measures that can be taken to further improve the security of the signing process. Here are some approaches, starting with the easiest and least security, and going on to more secure setups that require more work to setup and run. Signing is not an resource intensive process, so any machine will work, even a 10 year old, basic laptop. We recommend using a minimal &lt;a href=&#34;https://www.debian.org&#34;&gt;Debian&lt;/a&gt; install, and rebuilding the machine from scratch.&lt;/p&gt;

&lt;h3 id=&#34;automated-signing-server-with-with-hsm&#34;&gt;Automated Signing Server with with HSM&lt;/h3&gt;

&lt;p&gt;For a fully automated signing setup, the machine running the signing needs to be online and running. Ideally this machine would have no remote access, at the very least remote access should be very carefully controlled and monitored. A laptop makes it easy to work with even when remote access is disabled, since it provides a built-in keyboard and monitor. If remote access is required, then any basic PC will work fine. Using a Hardware Security Module (HSM) to store the keys prevents them from being stolen if the server is broken into. An attacker could only run the signing process on that server.&lt;/p&gt;

&lt;p&gt;Ideally, this machine would only be accessible via Tor. That hides the physical location of the server, and hides the traffic from network. This makes it much harder attackers to find the actual machine to attack.&lt;/p&gt;

&lt;p&gt;For the HSM, we recommend using &lt;a href=&#34;https://www.nitrokey.com/&#34;&gt;Nitrokey&lt;/a&gt; hardware, since they are free software/hardware, and provide a wide range of options. Use a separate machine to put the signing keys on HSM. A good HSM will keep an audit trail of how many signatures have been made, so that information could be used to create an automatic auditing process to raise alarms if too many signatures have been made. That could mean that this server was breached and used to sign unauthorized packages.&lt;/p&gt;

&lt;p&gt;Other possibility it to use a setup like &lt;a href=&#34;https://pagure.io/sigul&#34;&gt;Fedora&lt;/a&gt;‘s &lt;a href=&#34;http://www.devops-blog.net/koji/gpg-signing-rpms-with-sigul-signing-server-koji-integration&#34;&gt;Sigul&lt;/a&gt; that involves three machines.&lt;/p&gt;

&lt;h3 id=&#34;basic-laptop-dedicated-to-signing&#34;&gt;Basic laptop dedicated to signing&lt;/h3&gt;

&lt;p&gt;Start with a laptop that can be wiped clean and rebuilt from scratch. What is most important is that only the essential software is installed on it, and nothing else. Do not include any browser at all, for example, since that is the most common vector of attack. No remote access setup (e.g. SSH or VNC) should be installed or configured. To sign apps and repos, someone would take out this laptop, connect it to the network, and run the signing process. The signed results can then be published via the network connection. When the signing is complete, the machine can be turned off and disconnected and kept in a safe place.&lt;/p&gt;

&lt;p&gt;This could be made quite automatic with some custom scripts. The person running the process would only need to take out the machine, connect it, turn it on, wait until the process completes, then put it all away again.&lt;/p&gt;

&lt;h3 id=&#34;fully-offline-signing-laptop-with-usb-thumb-drives&#34;&gt;Fully offline signing laptop with USB thumb drives&lt;/h3&gt;

&lt;p&gt;_&lt;strong&gt;update&lt;/strong&gt;: apt-offline has a &lt;a href=&#34;https://bugs.debian.org/871656&#34;&gt;security bug&lt;/a&gt; so it was removed from Debian/buster. It is no longer recommended! Instead, use the Debian &amp;ldquo;&lt;a href=&#34;https://www.debian.org/doc/manuals/apt-offline&#34;&gt;apt offline&lt;/a&gt;&amp;rdquo; setup._&lt;/p&gt;

&lt;p&gt;This process is based on the same basic, stripped down laptop as the previous example. But this time, the networking should be entirely disabled before the install process. For example, it is easy in many laptops to physically remove the WiFi card. Therefore, it makes sense to use a laptop that does not include an ethernet jack, which are usually not possible to remove. Otherwise, blacklisting all kernel modules related to neworking can suffice. Since this machine is fully offline, the extra work of using an HSM is not as important, but it can’t hurt to include it.&lt;/p&gt;

&lt;p&gt;Download the full &amp;ldquo;CD&amp;rdquo; or &amp;ldquo;DVD&amp;rdquo; image of Debian to run the install. Be sure to &lt;a href=&#34;https://www.debian.org/CD/verify&#34;&gt;verify&lt;/a&gt; the GPG signatures and the SHA-256 hashes. One essential utility is &lt;em&gt;apt-offline&lt;/em&gt;, which automates the process of downloading Debian packages, verifying their signatures, and copying them over to an offline machine.&lt;/p&gt;

&lt;p&gt;To be extra careful, all of the software used should be verified. Chromebooks are nice, cheap laptops that run Linux natively. They also use Coreboot for the BIOS.&lt;/p&gt;

&lt;p&gt;&lt;li id=&#34;buy-a-computer-off-the-shelf-with-cash-avoid-having-it-shipped-especially-across-borders&#34;&gt;
  Buy a computer off the shelf with cash, avoid having it shipped, especially across borders
&lt;/li&gt;
&lt;li id=&#34;buy-a-debian-supported-chromebook-with-removeable-wifi-hardware-and-needs-no-binary-blobs&#34;&gt;
  Buy a Debian-supported &lt;a href=&#34;https://www.chromium.org/chromium-os/developer-information-for-chrome-os-devices/acer-c720-chromebook&#34;&gt;Chromebook&lt;/a&gt; with removeable WiFi hardware, and needs no binary blobs
&lt;/li&gt;
&lt;li id=&#34;install-a-reproducibly-built-coreboot-binary&#34;&gt;
  Install a reproducibly built coreboot binary
&lt;/li&gt;
&lt;li id=&#34;install-from-a-reproducibly-built-debian-image-wiping-out-chrome-os-entirely&#34;&gt;
  Install from a reproducibly built Debian image, wiping out Chrome OS entirely
&lt;/li&gt;&lt;/p&gt;

&lt;h2 id=&#34;the-physical-environment&#34;&gt;The Physical Environment&lt;/h2&gt;

&lt;p&gt;The last thing to consider is the physical location where signatures happen, and where essential equipment is stored. The signing environment must be physically secure. Otherwise, there is no way to prevent laptops or HSMs from being lost or used to sign inappropriate content. For the offline machines, keeping them in a locked room is a good start. For an online machine, forcing all network traffic and remote access over Tor hides the physical location of the machine from network observers.&lt;/p&gt;

&lt;p&gt;For high risk signing keys, using multiple layers of defense is important:&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Restricted physical access to HSMs or smart cards&lt;/li&gt;
&lt;li&gt;Security cameras&lt;/li&gt;
&lt;li&gt;Onsite security guards&lt;/li&gt;
&lt;li&gt;Visitor logging&lt;/li&gt;
&lt;li&gt;A tools-resistant server safe for online code-signing servers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The signing server should be physically separate from the rest of the infrastructure. And the logs, machine, and network should be periodically audited.&lt;/p&gt;

&lt;h2 id=&#34;difficult-decisions&#34;&gt;Difficult decisions&lt;/h2&gt;

&lt;p&gt;Ideally all of these practices would be put into place, but each of these security measures comes at a cost of difficulty, expense, and complexity. They can also delay the process of getting regular updates out. So there are risks of implementing too strict security policies, much like the risks of not implementing enough.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>No more “Root” features in Orbot… use Orfox &amp; VPN instead!</title>
      <link>https://guardianproject.github.io/info/2017/10/27/no-more-root-features-in-orbot-use-orfox-vpn-instead/</link>
      <pubDate>Fri, 27 Oct 2017 13:02:02 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2017/10/27/no-more-root-features-in-orbot-use-orfox-vpn-instead/</guid>
      <description>&lt;p&gt;Since I first announced the available of Orbot: Tor for Android about &lt;a href=&#34;https://nathan.freitas.net/2009/10/22/orbot-proxy/&#34;&gt;8 years ago&lt;/a&gt; (wow!), myself and others have been working on various methods in which to make the capabilities of Tor available through the operating system. This post is to announce that as of the next, imminent release, &lt;a href=&#34;https://github.com/n8fr8/orbot/releases/tag/15.5.0-RC-1-multi-SDK16&#34;&gt;Orbot v15.5,&lt;/a&gt; we will no longer be supporting the Root-required “Transproxy” method. This is due to many reasons.&lt;/p&gt;

&lt;p&gt;First, it turns out that allowing applications to get “root” access on your device seems like a good idea, it can also be seen as huge security hole. I am on the fence myself, but considering that the ability to access root features hasn’t been standardized as part of Android, which 8 years ago I hoped it would, it means there are a whole variety of ways that this capability is managed and safeguarded (or not, in most cases). At this point in time, given the sophistication we are seeing mobile malware and rootkits, it seems like a capability that we did not want to focus time and energy on promoting.&lt;/p&gt;

&lt;p&gt;Second, for those who do want to use root features, and know what they are doing, there are a bunch of other apps that do that job better than Orbot did. I admit, we let our code in that area degrade a bit, as the dev team themselves moved away from phones with root features. So, instead, if you really want to do cool things with iptables rules, you can use AFWall+, available on &lt;a href=&#34;https://f-droid.org/packages/dev.ukanth.ufirewall/&#34;&gt;F-Droid&lt;/a&gt; and &lt;a href=&#34;https://play.google.com/store/apps/details?id=dev.ukanth.ufirewall&#34;&gt;Google Play&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignnone &#34; src=&#34;https://raw.githubusercontent.com/ukanth/afwall/0502e6f17ceda08069720ff2f260902690e65e9b/screenshots/Main_2.0.png&#34; width=&#34;240&#34; height=&#34;384&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In order to make AFWall+ work with Orbot, you can follow Mike Perry’s excellent &lt;a href=&#34;https://blog.torproject.org/mission-impossible-hardening-android-security-and-privacy&#34;&gt;“Mission Impossible Android”&lt;/a&gt; guide in which he provides “DroidWall Scripts” necessary to enable automatic Tor routing on boot. You can also check out the sadly no longer maintained, but useful, &lt;a href=&#34;https://orwall.org/&#34;&gt;Orwall app&lt;/a&gt; which was meant to take on all the root features of Orbot.&lt;/p&gt;

&lt;p&gt;Third, we really, really think it is a bad idea to just send all of the traffic of your device through the Tor network. While it sounds like a great idea in theory, much like many “magical” Tor router kickstarter projects, it turns out that unless you can be assured an app is using TLS properly, then there is a chance that bad things could happen to your traffic as it exits the Tor network. Rather than promote some kind of auto-magical “enable Tor for my whole device”, we want to focus on ways to enable specific apps to go through Tor, in a way we can ensure is as safe as possible.&lt;/p&gt;

&lt;p&gt;For instance, we now have an excellent browser app, &lt;a href=&#34;https://guardianproject.info/apps/orfox&#34;&gt;Orfox&lt;/a&gt;, that is based on Tor Browser, and works perfectly with Orbot. If you just want to access the web and onion services, like the &lt;a href=&#34;https://open.nytimes.com/https-open-nytimes-com-the-new-york-times-as-a-tor-onion-service-e0d0b67b7482&#34;&gt;new New York Times onion&lt;/a&gt; at &lt;a href=&#34;https://www.nytimes3xbfgragh.onion/&#34;&gt;https://www.nytimes3xbfgragh.onion/&lt;/a&gt;, then just use &lt;a href=&#34;https://guardianproject.info/apps/orfox&#34;&gt;Orfox&lt;/a&gt;. There is no need for any fancy rooting or transproxying. There are also many others that supporting routing through Orbot directly, such as Conversations.im, Facebook for Android, DuckDuckGo, F-Droid, OpenArchive and many more to come! If you are interested in enabling your app to work with Orbot, check out our &lt;a href=&#34;https://github.com/guardianproject/netcipher&#34;&gt;NetCipher SDK&lt;/a&gt;, which makes it easy to do just that.&lt;/p&gt;

&lt;p&gt;Fourth, Orbot has for some time supported use of Android’s VPN features as a way to tunnel traffic through Tor. You just open the left-side menu, and tap “Apps VPN Mode” or tap on “Apps…” on the main screen. Choose the apps you want to run through Tor, press the back button, and then the VPN will start up, rerouting outbound traffic back through the local Tor port. This method is 100% support by Android, and requires no vulnerabilities or exploits of your device to gain root access.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2017/10/orbotvpn3.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-13829&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2017/10/orbotvpn3-169x300.png&#34; alt=&#34;&#34; width=&#34;169&#34; height=&#34;300&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2017/10/orbotvpn3-169x300.png 169w, https://guardianproject.info/wp-content/uploads/2017/10/orbotvpn3-768x1365.png 768w, https://guardianproject.info/wp-content/uploads/2017/10/orbotvpn3-576x1024.png 576w, https://guardianproject.info/wp-content/uploads/2017/10/orbotvpn3.png 1080w&#34; sizes=&#34;(max-width: 169px) 100vw, 169px&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2017/10/orbotvpn2.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-13830&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2017/10/orbotvpn2-169x300.png&#34; alt=&#34;&#34; width=&#34;169&#34; height=&#34;300&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2017/10/orbotvpn2-169x300.png 169w, https://guardianproject.info/wp-content/uploads/2017/10/orbotvpn2-768x1365.png 768w, https://guardianproject.info/wp-content/uploads/2017/10/orbotvpn2-576x1024.png 576w, https://guardianproject.info/wp-content/uploads/2017/10/orbotvpn2.png 1080w&#34; sizes=&#34;(max-width: 169px) 100vw, 169px&#34; /&gt;&lt;/a&gt; &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2017/10/orbotvpn1.png&#34;&gt;&lt;img class=&#34;alignnone size-medium wp-image-13831&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2017/10/orbotvpn1-169x300.png&#34; alt=&#34;&#34; width=&#34;169&#34; height=&#34;300&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2017/10/orbotvpn1-169x300.png 169w, https://guardianproject.info/wp-content/uploads/2017/10/orbotvpn1-768x1365.png 768w, https://guardianproject.info/wp-content/uploads/2017/10/orbotvpn1-576x1024.png 576w, https://guardianproject.info/wp-content/uploads/2017/10/orbotvpn1.png 1080w&#34; sizes=&#34;(max-width: 169px) 100vw, 169px&#34; /&gt;&lt;br /&gt;
Orbot Apps VPN view, home screen with Apps… button, and VPN sidebar&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I know that even with all of these justifications, some users will be disappointed with the fact we have removed root features from Orbot. Perhaps that will motivate some to reignite development of Orwall, or maybe help us make the VPN features in Orbot work even better. Another route is to support the &lt;a href=&#34;https://blog.torproject.org/mission-impossible-hardening-android-security-and-privacy&#34;&gt;Tor’s Android phone prototype&lt;/a&gt; or perhaps integrate Tor “root” features directly into a community Android OS project like Copperhead or Legacy. We would be happy to see all of these happen.&lt;/p&gt;

&lt;p&gt;For us, though, removing root means we can focus on making Orbot more streamlined, more stable, and more compatible with Android, for our 2 million+ active users, who are mostly focused on finding an easy solution for unblocking sites and apps, and allowing them to communicate and browse freely without fear of reprisal.&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Announcing new libraries: F-Droid Update Channels</title>
      <link>https://guardianproject.github.io/info/2017/05/31/announcing-new-libraries-f-droid-update-channels/</link>
      <pubDate>Wed, 31 May 2017 11:40:27 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2017/05/31/announcing-new-libraries-f-droid-update-channels/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2017/05/refresh-525698_640.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2017/05/refresh-525698_640-150x150.png&#34; alt=&#34;&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignleft size-thumbnail wp-image-13626&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2017/05/refresh-525698_640-150x150.png 150w, https://guardianproject.info/wp-content/uploads/2017/05/refresh-525698_640-300x297.png 300w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;&lt;br /&gt;
In many places in the world, it is very common to find Android apps via a multitude of sources: third party app stores, Bluetooth transfers, swapping SD cards, or directly downloaded from websites. As developers, we want to make sure that our users get secure and timely update no matter how they got our apps. We still recommend that people get apps from trusted sources like F-Droid or Google Play.&lt;/p&gt;

&lt;p&gt;Building upon the F-Droid distribution ecosystem, there is a new suite of libraries: “&lt;a href=&#34;https://gitlab.com/fdroid/update-channels/&#34; target=&#34;_blank&#34;&gt;F-Droid Update Channels&lt;/a&gt;“. It is a suite of libraries for making sure your that your app can always find updates, no matter where someone got it from. Currently, there are two specific libraries: “Get F-Droid” and “App Updater”.&lt;/p&gt;

&lt;h4 id=&#34;get-f-droid-aka-org-fdroid-getfdroid&#34;&gt;“Get F-Droid” aka &lt;code&gt;org.fdroid.getfdroid&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Checks whether F-Droid is installed. If not, it will help the user to download and install F-Droid. F-Droid then provides the update channel. This is the preferred method of getting updates since F-Droid provides strong privacy protection and lets the user control when and where updates happen. Also, if F-Droid came pre-installed on the device or was “flashed” onto it as part of a custom Android ROM, then F-Droid does not need “Unknown Sources” enabled.&lt;/p&gt;

&lt;h4 id=&#34;app-updater-aka-org-fdroid-appupdater&#34;&gt;“App Updater” aka &lt;code&gt;org.fdroid.appupdater&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Keeps the app current by checking the hard-coded app repository set up by the developer. This is similar to the popular “App Updater” library, but is secure due to the F-Droid signed metadata. The _&lt;a href=&#34;https://gitlab.com/fdroid/fdroidserver&#34; target=&#34;_blank&#34;&gt;fdroidserver&lt;/a&gt;_ tools handle the creation and maintenance of the app repository.&lt;/p&gt;

&lt;p&gt;Both of these libraries also check whether Google Play is installed, if so, will disable itself. This allows apps to include this library in APKs that are uploaded to Google Play since it will not violate the Google Play Terms of Service.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New research report on the challenges developers face</title>
      <link>https://guardianproject.github.io/info/2017/05/15/new-research-report-on-the-challenges-developers-face/</link>
      <pubDate>Mon, 15 May 2017 05:07:17 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2017/05/15/new-research-report-on-the-challenges-developers-face/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2017/06/tccw.png&#34;&gt;&lt;img class=&#34;aligncenter size-full wp-image-13792&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2017/06/tccw.png&#34; alt=&#34;&#34; width=&#34;845&#34; height=&#34;375&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2017/06/tccw.png 845w, https://guardianproject.info/wp-content/uploads/2017/06/tccw-300x133.png 300w, https://guardianproject.info/wp-content/uploads/2017/06/tccw-768x341.png 768w&#34; sizes=&#34;(max-width: 845px) 100vw, 845px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The Guardian Project has been working with the &lt;a href=&#34;https://f-droid.org&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt;F-Droid&lt;/a&gt; community to make it a secure, streamlined, and verifiable app distribution channel for high-risk environments. While doing this we have started to become more aware of the challenges and risks facing software developers who build software in closed and closing spaces around the world.&lt;/p&gt;

&lt;p&gt;There are a wealth of resources available on how to support and collaborate with high-risk users. Surprisingly, we could not find any guidance on how to support and collaborate with developers where the internet is heavily monitored and/or filtered, let alone developers who might be at risk because of the software they develop.&lt;/p&gt;

&lt;p&gt;This report explores some key challenges that developers in closed and closing spaces face when collaborating with international groups who support Human Rights and freedom (IHRFG). These groups include privacy and security software projects, civil society focused donors, and non-governmental organizations (NGOs).&lt;/p&gt;

&lt;p&gt;IHRFG can benefit greatly from collaborations with local developers. IHRFGs who are trying to design or localize software for a specific region often have difficulty&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;understanding the types of technologies that are needed to address the problems IHRDGs are trying to solve,&lt;/li&gt;
&lt;li&gt;addressing the local economic, social, infrastructural, and/or legal challenges that software of its type often faces in the local context,&lt;/li&gt;
&lt;li&gt;identifying the interaction and design patterns that will drive initial adoption,&lt;/li&gt;
&lt;li&gt;evaluating the quality of the translations of software into the local language,&lt;/li&gt;
&lt;li&gt;finding local individuals for focus groups, and testing, and&lt;/li&gt;
&lt;li&gt;conducting testing and troubleshooting to identify and address issues caused by the speed, availability, and/or censoring of local fixed or mobile networks.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Local developers, on the other hand, are often more than able to accomplish these tasks.&lt;/p&gt;

&lt;p&gt;Beyond identifying these challenges this report provides guidance on how to take these challenges into account when IHRFGs collaborate with local developers. To do this the report also contains a set of developer user-personas. These personas can be used by IHRFGs as an aid when they are designing collaborating with local developers.&lt;/p&gt;

&lt;p&gt;We hope that the results of this research will help international privacy and security focused software projects and NGOs better understand and respond to the unique needs of different international developer communities so that their collaborations with these developers will be safer, more strategic, and sustainable.&lt;/p&gt;

&lt;h2 id=&#34;research-methodology&#34;&gt;Research Methodology&lt;/h2&gt;

&lt;p&gt;This report is the result of two interconnected streams of research. The initial themes were identified in a series of in-depth interviews. These themes were further explored in an online “developer challenges survey.” The challenges and user personas found in this report were refined from the combined results of these research efforts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Interviews&lt;/strong&gt;: interviews with 14 developers, technologists, and digital defenders from 11 different countries where the internet is heavily monitored and filtered as well as 5 interviews with IHRFGs who work in similar regions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Surveys&lt;/strong&gt;: an &lt;a href=&#34;https://challenges.tech/&#34;&gt;online developer survey&lt;/a&gt; in Chinese, Spanish, Farsi, Russian, French, and English that received 118 responses from developers in 28 countries around the world.&lt;/p&gt;

&lt;h2 id=&#34;user-personas&#34;&gt;User Personas&lt;/h2&gt;

&lt;p&gt;The user personas created for this report were developed to allow readers to think more concretely about the motivations and challenges that were identified during this project. In an effort to combat the inclusion of possible implicit biases the author might hold based upon the nationality, race, or gender of the personas the nationality, names, genders, and photos used for all the personas were generated at random.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/seamustuohy/user_profile_randomizer&#34;&gt;source code of the &lt;strong&gt;User Profile Randomizer&lt;/strong&gt;&lt;/a&gt; is available and permissively licensed under the &lt;a href=&#34;https://github.com/seamustuohy/user_profile_randomizer/blob/master/LICENSE&#34;&gt;GNU Lesser General Public License v3.0&lt;/a&gt;. It randomizes the gender pronoun, name (chosen from a random language family), and photo on a set of markdown based user personas.&lt;/p&gt;

&lt;h3 id=&#34;the-full-report&#34;&gt;The Full Report&lt;/h3&gt;

&lt;p&gt;Download the full report, including developer profiles, here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2017/06/Technological-Collaboration-in-a-Closing-World-1.pdf&#34;&gt;Technological Collaboration in a Closing World.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Build Android apps with Debian: apt install android-sdk</title>
      <link>https://guardianproject.github.io/info/2017/03/13/build-android-apps-with-debian-apt-install-android-sdk/</link>
      <pubDate>Mon, 13 Mar 2017 10:03:30 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2017/03/13/build-android-apps-with-debian-apt-install-android-sdk/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2015/04/debian.jpg&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2015/04/debian-150x150.jpg&#34; alt=&#34;&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignright size-thumbnail wp-image-12920&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2015/04/debian-150x150.jpg 150w, https://guardianproject.info/wp-content/uploads/2015/04/debian-300x300.jpg 300w, https://guardianproject.info/wp-content/uploads/2015/04/debian-270x270.jpg 270w, https://guardianproject.info/wp-content/uploads/2015/04/debian-230x230.jpg 230w, https://guardianproject.info/wp-content/uploads/2015/04/debian.jpg 600w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;&lt;br /&gt;
In Debian stretch, the upcoming new release, it is now possible to build Android apps using only packages from Debian. This will provide all of the tools needed to build an Android app targeting the “platform” &lt;tt&gt;android-23&lt;/tt&gt; using the SDK &lt;tt&gt;build-tools&lt;/tt&gt; 24.0.0. Those two are the only versions of “platform” and “build-tools” currently in Debian, but it is possible to use the Google binaries by installing them into &lt;tt&gt;/usr/lib/android-sdk&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;This doesn’t cover yet all of the libraries that are used in the app, like the Android Support libraries, or all of the other myriad libraries that are usually fetched from jCenter or Maven Central. One big question for us is whether and how libraries should be included in Debian. All the Java libraries in Debian can be used in an Android app, but including something like Android Support in Debian would be strange since they are only useful in an Android app, never for a Debian app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Building apps with these packages&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here are the steps for building Android apps using Debian’s Android SDK on Stretch.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sudo apt install android-sdk android-sdk-platform-23&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;export ANDROID_HOME=/usr/lib/android-sdk&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In &lt;em&gt;build.gradle&lt;/em&gt;, set &lt;em&gt;compileSdkVersion&lt;/em&gt; to 23 and &lt;em&gt;buildToolsVersion&lt;/em&gt; to 24.0.0&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;gradle assembleDebug&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The Gradle Android Plugin is also packaged. Using the Debian package instead of the one from online Maven repositories requires a little configuration before running Gradle. In the &lt;em&gt;buildscript&lt;/em&gt; block:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;add &lt;tt&gt;maven { url &amp;lsquo;file:///usr/share/maven-repo&amp;rsquo; }&lt;/tt&gt; to repositories&lt;/li&gt;
&lt;li&gt;use &lt;tt&gt;compile &amp;lsquo;com.android.tools.build:gradle:debian&amp;rsquo;&lt;/tt&gt; to load the plugin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Currently there is only the target platform of API Level 23 packaged, so only apps targeted at &lt;em&gt;android-23&lt;/em&gt; can be built with only Debian packages. We will add more API platform packages via backports. Only &lt;em&gt;build-tools&lt;/em&gt; 24.0.0 is available, so in order to use the SDK, build scripts need to be modified. Beware that the Lint in this version of Gradle Android Plugin is still problematic, so running the :lint tasks might not work. They can be turned off with &lt;tt&gt;lintOptions.abortOnError&lt;/tt&gt; in &lt;em&gt;build.gradle&lt;/em&gt;. Google binaries can be combined with the Debian packages, for example to use a different version of the platform or build-tools.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why include the Android SDK in Debian?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While Android developers could develop and ship apps right now using these Debian packages, this is not very flexible since only &lt;tt&gt;build-tools-24.0.0&lt;/tt&gt; and &lt;tt&gt;android-23&lt;/tt&gt; platform are available. Currently, we are not aiming to cover the most common use cases. Those are pretty well covered by Google’s binaries (except for the proprietary license on the Google binaries), and are probably the most work for the Debian Android Tools Team to cover. We are first working on use cases that are poorly covered by the Google binaries, for example, like where only specific parts of the whole SDK are used. Here are some we have in mind:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;tools for security researchers, forensics, reverse engineering, etc. which can then be included in live CDs and distros like Kali Linux&lt;/li&gt;
&lt;li&gt;a hardened APK signing server using &lt;em&gt;apksigner&lt;/em&gt; that uses a standard, audited, public configuration of all reproducibly built packages&lt;/li&gt;
&lt;li&gt;Replicant is a 100% free software Android distribution, so of course &lt;a href=&#34;http://blog.replicant.us/2017/02/replicant-6-0-development-updates/&#34; target=&#34;_blank&#34;&gt;they want to have a 100% free software SDK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;high security apps need a build environment that matches their level of security, the Debian Android Tools packages are &lt;a href=&#34;https://reproducible-builds.org&#34; target=&#34;_blank&#34;&gt;reproducibly built&lt;/a&gt; only from publicly available sources&lt;/li&gt;
&lt;li&gt;dead simple install with strong trust path with mirrors all over the world&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the long run, the &lt;a href=&#34;https://wiki.debian.org/AndroidTools&#34; target=&#34;_blank&#34;&gt;Debian Android Tools Team&lt;/a&gt; aims to cover more use cases well, and also building the Android NDK. This all will happen more quickly if we have more contributors! Android is the most popular mobile OS, and can be 100% free software like Debian. Debian and its derivatives are one of the most popular platforms for Android development.&lt;/p&gt;

&lt;p&gt;Last but not least, we want feedback on how this should all work. For example, we need ideas for how to nicely integrate Debian’s Java libraries into the Android &lt;em&gt;gradle&lt;/em&gt; workflow. And ideally, the Android Support libraries would also be reproducibly built and packaged somewhere that enforces only free software.&lt;/p&gt;

&lt;p&gt;For anyone interested in tools for working with Android apps and APKs, including for reverse engineering, inspection, auditing, etc. there are quite a few tools included now in Debian:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;apt install android-sdk androguard apktool diffoscope dummydroid enjarify gplaycli libsmali-java libscout repo&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Build Your Own App Store: Android Media Distribution for Everyone</title>
      <link>https://guardianproject.github.io/info/2017/02/22/build-your-own-app-store-android-media-distribution-for-everyone/</link>
      <pubDate>Wed, 22 Feb 2017 09:45:11 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2017/02/22/build-your-own-app-store-android-media-distribution-for-everyone/</guid>
      <description>

&lt;p&gt;Most people get their Android apps from Google Play. It is usually the simplest and most secure option for them. But there are also many people who do not have access to Google Play. This might be due to lack of a proper internet connection or simply because Google Play is blocked within their country.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://f-droid.org/&#34;&gt;F-Droid&lt;/a&gt; project already offers &lt;a href=&#34;https://guardianproject.github.io/info/2015/06/02/building-a-trustworthy-app-store-that-respects-privacy/&#34;&gt;tools to create independent app distribution channels for Android apps&lt;/a&gt;. These tools are ready for production, but require expert knowledge and the command-line to be used. Now, we want to build upon this foundation and develop curation tools that can also be used by people with little technical knowledge, thus making the app distribution technology more broadly available.&lt;/p&gt;

&lt;h3 id=&#34;use-cases&#34;&gt;Use-Cases&lt;/h3&gt;

&lt;p&gt;The primary use-case we want to address is to circumvent app store censorship and blocking. But there are other use-cases that benefit from easy-to-setup app stores as well.&lt;/p&gt;

&lt;p&gt;There are Android phones and tablets that do not have Google Play available, either because their manufacturer did not get a license from Google or because their owners prefer their phones Google-free.&lt;/p&gt;

&lt;p&gt;Similar to Apple’s app store, the terms of service of Google Play exclude certain apps from being distributed and these are being removed on a regular basis. Having alternative means for distribution of apps is often the only way to bring those apps to people.&lt;/p&gt;

&lt;h3 id=&#34;features&#34;&gt;Features&lt;/h3&gt;

&lt;h4 id=&#34;core-features&#34;&gt;Core Features&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Create a new app repository&lt;/li&gt;
&lt;li&gt;Add new apps/media to the repository&lt;/li&gt;
&lt;li&gt;Update existing apps/media to the repository&lt;/li&gt;
&lt;li&gt;Update the description and metadata of apps/media&lt;/li&gt;
&lt;li&gt;Remove apps/media from the repository&lt;/li&gt;
&lt;li&gt;Automatic generation of repository website with QR Code (and instructions)&lt;/li&gt;
&lt;li&gt;Import apps directly from other repositories&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;optional-future-features&#34;&gt;Optional Future Features&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Archive apps/media to archive repository&lt;/li&gt;
&lt;li&gt;Remove installed apps/media from user’s devices&lt;/li&gt;
&lt;li&gt;Provide hosted web-app with user-management (Sign-Up, Lost Password) as a service&lt;/li&gt;
&lt;li&gt;Allow multiple curators to manage the same repository&lt;/li&gt;
&lt;li&gt;Import apps (and their description) from Google Play&lt;/li&gt;
&lt;li&gt;Check for updates from Google Play periodically and automatically import them&lt;/li&gt;
&lt;li&gt;Making the repository available through the Tor network&lt;/li&gt;
&lt;li&gt;Generate custom white-labelled repository app (based on F-Droid)&lt;/li&gt;
&lt;li&gt;App security scanner for vulnerable libraries and Virus Total (opt-in) upload&lt;/li&gt;
&lt;li&gt;App browsing and download on generated repository website&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;target-audience&#34;&gt;Target Audience&lt;/h3&gt;

&lt;p&gt;The main audience for this work are activists and trainers with moderate technical knowledge who need to securely distribute apps and updates to their community. This is especially a concern in countries where the official app store is blocked. Organizations like Amnesty International for example still need to enable people in those countries to securely receive their apps and updates.&lt;/p&gt;

&lt;p&gt;The person maintaining the repository might use any operating system and in some cases might not even have a laptop/desktop computer available. They might be targeted by advanced attackers that can intercept and insert arbitrary traffic, but do not have the ability to compromise large service providers such as Amazon.&lt;/p&gt;

&lt;p&gt;Furthermore, this work might also be used by the following groups:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;service providers (who want own distribution and update mechanism for their apps)&lt;/li&gt;
&lt;li&gt;individual software developers (who want to distribute beta releases for e.g. user-testing)&lt;/li&gt;
&lt;li&gt;everybody else who needs full control of the entire distribution and update process&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;implementation-options&#34;&gt;Implementation Options&lt;/h3&gt;

&lt;p&gt;There are roughly four different ways, the app store curation tool could be implemented. Each has their own pro and cons as well as different implications for the usability.&lt;/p&gt;

&lt;h4 id=&#34;command-line-interface&#34;&gt;Command-line interface&lt;/h4&gt;

&lt;p&gt;The current app repository tools are already used via the command-line, but they require some setup and several non-intuitive commands to be executed. The goal here would be to reduce the number of required commands as much as possible and make them easy to understand and remember. This would be similar to how Letsencrypt’s Certbot simplified SSL certificate management.&lt;/p&gt;

&lt;p&gt;Pros&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;least amount of work building directly on existing tools&lt;/li&gt;
&lt;li&gt;signing key could be created and stored on local device&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;too difficult to use for people with no prior command-line experience&lt;/li&gt;
&lt;li&gt;off-putting and not inviting for potential non-expert curators&lt;/li&gt;
&lt;li&gt;adds little benefit to existing solution&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;cross-platform-desktop-application&#34;&gt;Cross-Platform Desktop Application&lt;/h4&gt;

&lt;p&gt;A graphical user interface (GUI) could be added to the existing tools to make them easier to use. Existing UI toolkits such as Qt, Gtk or Tcl/Tk could be used for this.&lt;/p&gt;

&lt;p&gt;Pros&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;can make use of existing python tools&lt;/li&gt;
&lt;li&gt;signing key could be created and stored on local device&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;requires a desktop computer and installation procedure (possibly of dependencies as well)&lt;/li&gt;
&lt;li&gt;need to maintain and support install packages for Windows and MacOS&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;android-app&#34;&gt;Android App&lt;/h4&gt;

&lt;p&gt;The free software &lt;a href=&#34;https://f-droid.org&#34;&gt;F-Droid app&lt;/a&gt; already includes repository functionality used for direct app swapping. This could be modified to publish repositories to remote servers and extended by curation functionality. Alternatively, a new app could be developed that is dedicated to repository curation and could contrary to F-Droid even be distributed via Google Play.&lt;/p&gt;

&lt;p&gt;Pros&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Simple installation&lt;/li&gt;
&lt;li&gt;No desktop computer required&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Needs reimplementation of existing Python code in Java&lt;/li&gt;
&lt;li&gt;Signing key stored on potentially less secure mobile device&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;web-app&#34;&gt;Web App&lt;/h4&gt;

&lt;p&gt;The user interface for repository curation could be implemented as a web application that is accessed through a web browser. Low-risk curators could use a hosted instance for maximum simplicity while others could also access the interface through a local (built-in) web-server. Powerful web frameworks such as Flask or Django might be a good choice for that job.&lt;/p&gt;

&lt;p&gt;Pros&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Very easy to use from every device&lt;/li&gt;
&lt;li&gt;Does not need installation (lower usage barrier)&lt;/li&gt;
&lt;li&gt;Can make use of existing python tools&lt;/li&gt;
&lt;li&gt;Makes multi-curator feature potentially easier to implement&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Cons&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In hosted mode: signing keys need to be stored permanently on a web server&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;security-considerations&#34;&gt;Security Considerations&lt;/h3&gt;

&lt;h4 id=&#34;repository-attacks&#34;&gt;Repository Attacks&lt;/h4&gt;

&lt;p&gt;The technology used for app distribution needs to ensure the integrity and authenticity of apps provided in the repository. It can not prevent malicious apps from being &lt;em&gt;intentionally&lt;/em&gt; distributed, but can offer a security scanner to reduce the risk of unintentional distribution. An attack is considered successful when the content provided by the curator of the repository can be altered so that the changes propagate to users’ devices.&lt;/p&gt;

&lt;p&gt;Malicious apps might compromise the targeted application or the entire phones (root exploit). There are two defenses against unintentional distribution of malicious apps:&lt;/p&gt;

&lt;ol type=&#34;1&#34;&gt;
  &lt;li&gt;
    app package signatures: clients trust the provided app signature on first installation (TOFU) and refuse updates with a different signature.
  &lt;/li&gt;
  &lt;li&gt;
    repository signature: clients check signature when repository is installed and with every update. They warn and refuse operations with the repository when the signature is invalid.
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first defense is out of scope for this work, because app packages are signed when the app is built so that they are already signed when added to the repository. The repository curation should still not allow to publish an update that carries a different signature.&lt;/p&gt;

&lt;p&gt;The second defense needs to be provided automatically by the curation tools. A repository signing key needs to be created and securely stored. If this key is compromised, an attacker can modify app metadata and can inject modified apps for specific or all users when they install them for the first time. Malicious updates of already installed apps are prevented by above package signature.&lt;/p&gt;

&lt;p&gt;If the repository key is created and stored automatically by a service (see implementation option 4), the curator needs to trust the service and the hosting provider. Both need to be out of reach of attackers from the curators’ threat-model. For example, if the Guardian Project provides a repository service hosted in Amazon’s Cloud, this service should be out of reach of most attackers that have neither the ability to compromise the Guardian Project, nor Amazon. Advanced nation-state adversaries could compromise both and thus the repository. Recipients of apps need to trust their distributors/curators and their ability to keep their own system secure.&lt;/p&gt;

&lt;p&gt;However, we can generally not protect against attackers who has the ability to directly compromise the users’ devices. All that can be done is to prevent malicious applications from being installed &lt;em&gt;via the repository&lt;/em&gt; (without knowledge of the curator). If the attacker can compromise users’ devices through other means, this defense does not matter anymore.&lt;/p&gt;

&lt;h4 id=&#34;root-and-unknown-sources&#34;&gt;Root and Unknown Sources&lt;/h4&gt;

&lt;p&gt;In order to get content from the provided repository onto a generic device, the user needs to install F-Droid which requires allowing the installation of apps from unknown sources. This can put the user at risk, because it makes installing malicious application very easy. Alternatively, super user privileges (root) can be used to install F-Droid’s system extension effectively trusting all apps installed via F-Droid. However, the security risks associated with super user privileges are even more severe as they can lead to compromise of the entire device.&lt;/p&gt;

&lt;h4 id=&#34;lack-of-updates&#34;&gt;Lack of Updates&lt;/h4&gt;

&lt;p&gt;If a repository is the user’s sole source for an application, any delay in providing updates might put the user at risk of an adversary exploiting a vulnerability in that application that would have otherwise been fixed by the missing update.&lt;/p&gt;

&lt;h3 id=&#34;what-we-will-do&#34;&gt;What We Will Do&lt;/h3&gt;

&lt;p&gt;The main goal of the curation tools is to make creating and maintaining repositories as easy as possible for our target audience.&lt;/p&gt;

&lt;p&gt;This rules out the command line and the desktop application, since today’s user experience expectations are no longer being fulfilled by these technologies. While a desktop application comes closer, the need for an installation procedure and for maintaining it for different operating systems makes it too difficult and error-prone compared to the two other remaining options.&lt;/p&gt;

&lt;p&gt;Implementing the curation tools within an Android application has its merits. It comes with an easy installation procedure, provides a familiar state-of-the-art user interface and allows apps to be added directly from the curators’ device. However, some existing functionality would need to be reimplemented in Java and maintained along-side the existing Python codebase. Also the curator needs to provide an external storage location for the repository which can be a barrier for many users and needs its own documentation.&lt;/p&gt;

&lt;p&gt;The easiest and most flexible solution is a web-application based on the existing Python tools. More advanced curators can use it on a local desktop computer with a built-in web-server just like a desktop application, only that the UI is in the browser. This usage scenario comes with the same pros and cons like the desktop application. The repository signing key for example is stored locally under the curator’s control.&lt;/p&gt;

&lt;p&gt;But it allows for other usage scenarios as well. If installed on a trusted web-server as a service, the curation tools can also be used by curators with little technical knowledge. The curators don’t need to install anything and can use them from any device. They can even switch devices without a data migration. However, they would need to give up control over the signing key.&lt;/p&gt;

&lt;p&gt;If time permits, the app store creator can be turned into a full repository service that allows user registrations and several repositories per user. A trusted organization such as the Guardian Project could host this as a service and provide it to an activist community. Software freedom would allow other organizations to host their own repository services as well. You can imagine the activist collective Riseup for example not only hosting its own repository of recommended apps, but also allowing its users to create and curate their own repositories.&lt;/p&gt;

&lt;p&gt;This becomes even more interesting when people fill their repositories not only with apps, but with all sorts of files such as books, music and photos.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Imagining the challenges of developers in repressive environments</title>
      <link>https://guardianproject.github.io/info/2017/01/26/imagining-the-challenges-of-developers-in-repressive-environments/</link>
      <pubDate>Thu, 26 Jan 2017 09:56:59 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2017/01/26/imagining-the-challenges-of-developers-in-repressive-environments/</guid>
      <description>

&lt;p&gt;The Guardian Project team spends a lot of time thinking about users. In our work we focus on easy-to-use applications for users in high-risk scenarios. Because of this we are very focused on security. In our current work with the FDroid community to make it a secure, streamlined, and verifiable app distribution channel for high-risk environments we have started to become &lt;a href=&#34;https://guardianproject.info/2015/02/24/phishing-for-developers/&#34;&gt;more aware&lt;/a&gt; of the challenges and risks facing software developers who build software in high-risk environments.&lt;/p&gt;

&lt;p&gt;There are a wealth of resources available on how to support and collaborate with high-risk users. Unsurprisingly, we could not find any guidance on how to support and collaborate with developers in repressive environments, let alone developers who are put at high-risk because of the software they develop. So, we have started conducting “user research” with developers from a range of repressive environments.&lt;/p&gt;

&lt;p&gt;We started our user research by conducting surveys and interviews with Internet Freedom donors, developers, and CSOs about the challenges of being a, or working with, software developers in places where the internet is heavily monitored and filtered. We did this for two reasons. First, we want to make sure that the output produced is valuable to our target audience. Second, we wanted to see how this community viewed the challenges that these developers face. We are a little over ¾ done with our interviews and decided to share some initial thoughts from our interviews alongside that initial survey research.&lt;/p&gt;

&lt;h3 id=&#34;how-to-read-the-survey-results&#34;&gt;How to read the survey results&lt;/h3&gt;

&lt;p&gt;Each of the plots below shows how survey respondents ranked the level of challenge or negative impact specific factors had on the different phases of the development life-cycle. The survey split these rankings into categories that included the design (&lt;strong&gt;Des&lt;/strong&gt;) and development (&lt;strong&gt;Dev&lt;/strong&gt;) of software; deploying (&lt;strong&gt;Dep&lt;/strong&gt;) and maintaining (&lt;strong&gt;Maint&lt;/strong&gt;) software; and general threats (&lt;strong&gt;Thrt&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Participants were also asked to provide some basic information about their relationship to developers in repressive environments. We did this to explore the ways that experience might impact how some groups evaluate the challenges faced by developers in repressive environments. Using their answers we split the results into six groups.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;At Risk&lt;/strong&gt;: The type of of software development they, or those they interact with, could put either of them at risk.&lt;br /&gt;
&lt;strong&gt;Censor/Surv&lt;/strong&gt;: They are based in a place where the internet is heavily monitored filtered.&lt;br /&gt;
&lt;strong&gt;Not Censor/Surv&lt;/strong&gt;: They are not based in a place where the internet is heavily monitored filtered.&lt;br /&gt;
&lt;strong&gt;Collab&lt;/strong&gt;: They collaborate, support, or work with developers who are based in a place where the internet is heavily monitored or filtered.&lt;br /&gt;
&lt;strong&gt;Dev&lt;/strong&gt;: They develop Software&lt;br /&gt;
&lt;strong&gt;All&lt;/strong&gt;: Everyone who was surveyed.&lt;/p&gt;

&lt;p&gt;The initial survey was not designed to create accurate comparisons between groups who were surveyed and the data visualizations do not reflect the number of participants who declined to answer specific questions. It is also important to note that we asked participants to fill out the survey based upon the regions that they work in. Because of the possible identifying nature of participants responses we did not ask them to identify what regions those were. This had led to a wide variation in many of the responses.&lt;/p&gt;

&lt;h3 id=&#34;infrastructure&#34;&gt;Infrastructure&lt;/h3&gt;

&lt;p&gt;Infrastructure plays a critical role in technological development. Software development, distribution, and use require an interconnected world of infrastructure. Only a small portion of this infrastructure is controlled and maintained by the developer. They also rely on a range of public and private infrastructure to provides power, connectivity, and financial support.&lt;/p&gt;

&lt;p&gt;To explore these topics we first asked about the challenge that barriers to Internet access played in the design (&lt;strong&gt;Des&lt;/strong&gt;) and development (&lt;strong&gt;Dev&lt;/strong&gt;) of software for developers in high-risk environments. Generally, respondents thought that it was a greater challenge for developers to design software for these environments than to conduct development in these environments.&lt;/p&gt;

&lt;div id=&#34;attachment_13476&#34; style=&#34;width: 1011px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2016/12/bandwidth.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-13476&#34; class=&#34;wp-image-13476 size-full&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2016/12/bandwidth.png&#34; width=&#34;1001&#34; height=&#34;285&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2016/12/bandwidth.png 1001w, https://guardianproject.info/wp-content/uploads/2016/12/bandwidth-300x85.png 300w, https://guardianproject.info/wp-content/uploads/2016/12/bandwidth-768x219.png 768w&#34; sizes=&#34;(max-width: 1001px) 100vw, 1001px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-13476&#34; class=&#34;wp-caption-text&#34;&gt;
    Internet/data bandwidth, connectivity, and/or cost
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;In our interviews we have heard that barriers to internet access can make it difficult to learn how to develop software and to easily get the libraries, documentation, and support that make developing software easier. It is not a universal challenge. Access varies widely depending upon the developer’s region. When it is a barrier it is often one of the largest barriers that is faced. We were happy to find that the challenges of designing software for users in areas with barriers to Internet access is one area where there is &lt;a href=&#34;https://developers.google.com/billions/&#34;&gt;existing guidance&lt;/a&gt; for developers in these regions.&lt;/p&gt;

&lt;p&gt;We also asked how a developer’s own infrastructure led to challenges when developing (&lt;strong&gt;Dev&lt;/strong&gt;), deploying (&lt;strong&gt;Dep&lt;/strong&gt;), and maintaining (&lt;strong&gt;Maint&lt;/strong&gt;) software.&lt;/p&gt;

&lt;div id=&#34;attachment_13477&#34; style=&#34;width: 1011px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2016/12/dev_infra.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-13477&#34; class=&#34;size-full wp-image-13477&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2016/12/dev_infra.png&#34; alt=&#34;&#34; width=&#34;1001&#34; height=&#34;285&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2016/12/dev_infra.png 1001w, https://guardianproject.info/wp-content/uploads/2016/12/dev_infra-300x85.png 300w, https://guardianproject.info/wp-content/uploads/2016/12/dev_infra-768x219.png 768w&#34; sizes=&#34;(max-width: 1001px) 100vw, 1001px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-13477&#34; class=&#34;wp-caption-text&#34;&gt;
    Developer Infrastructure (e.g Hosting, setup, security, software)
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;This topic, like barriers to internet access, had widely varying responses in the Interviews depending on the region the developer was based in. Unlike internet access, where technology was the root of the challenges the responses to these questions showed that legal challenges were the root of hosting challenges. In regions where international sanctions were in place this was a greater concern in the everyday experience of developers. Data localization was another more recent legal concern that was brought up in the interviews.&lt;/p&gt;

&lt;p&gt;Financial infrastructure and other economic challenges can impact various stages of the software lifecycle. Even FOSS developers need to make a living. To look at financial infrastructure we asked if access to payment systems was a challenge when designing (&lt;strong&gt;Des&lt;/strong&gt;) and developing (&lt;strong&gt;Dev&lt;/strong&gt;) software. We also asked about general challenges to monetizing and earning revenue when maintaining software and supporting users (&lt;strong&gt;Maint&lt;/strong&gt;).&lt;/p&gt;

&lt;div id=&#34;attachment_13478&#34; style=&#34;width: 1011px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2016/12/money.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-13478&#34; class=&#34;size-full wp-image-13478&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2016/12/money.png&#34; alt=&#34;&#34; width=&#34;1001&#34; height=&#34;285&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2016/12/money.png 1001w, https://guardianproject.info/wp-content/uploads/2016/12/money-300x85.png 300w, https://guardianproject.info/wp-content/uploads/2016/12/money-768x219.png 768w&#34; sizes=&#34;(max-width: 1001px) 100vw, 1001px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-13478&#34; class=&#34;wp-caption-text&#34;&gt;
    Economics (payment, monetizing, &amp; earning revenue)
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;As with many of the other questions payment and monetization challenges vary widely by region. Interviewers from areas with economic sanctions spoke of monetization as a greater challenge than any other group of interviewees. Because economic challenges vary so widely, we will hold off on discussing them in more depth until we are done with our analysis.&lt;/p&gt;

&lt;h3 id=&#34;localization&#34;&gt;Localization&lt;/h3&gt;

&lt;p&gt;Many developers face challenges far before they have to worry about their infrastructure. Not only are a majority of programming languages in English, many of the textbooks used to teach software development are in English as well. We asked our survey participants if localized software libraries, platforms, or developer documentation were a challenge for developers in high-risk environments when they were designing (&lt;strong&gt;Des&lt;/strong&gt;), developing (&lt;strong&gt;Dev&lt;/strong&gt;), and deploying (&lt;strong&gt;Dep&lt;/strong&gt;) software.&lt;/p&gt;

&lt;div id=&#34;attachment_13479&#34; style=&#34;width: 1011px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2016/12/localization.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-13479&#34; class=&#34;size-full wp-image-13479&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2016/12/localization.png&#34; alt=&#34;&#34; width=&#34;1001&#34; height=&#34;285&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2016/12/localization.png 1001w, https://guardianproject.info/wp-content/uploads/2016/12/localization-300x85.png 300w, https://guardianproject.info/wp-content/uploads/2016/12/localization-768x219.png 768w&#34; sizes=&#34;(max-width: 1001px) 100vw, 1001px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-13479&#34; class=&#34;wp-caption-text&#34;&gt;
    Localization of software libraries, platforms, or developer documentation
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Access to localized content was seen as a primary concern in almost every interview we have had with developers. In multiple interviews basic English language skills were even described as a requirement for any software development. Even developers with basic technical English skills spoke about the challenges of finding the appropriate tools and libraries because the descriptive documentation was difficult to skim. The lack of multi-language books, blog-posts, and forums also impedes access to best-practices and developer guidance.&lt;/p&gt;

&lt;h3 id=&#34;targeted-attacks&#34;&gt;Targeted Attacks&lt;/h3&gt;

&lt;p&gt;Attacks that focus on compromising the user through counterfeit software pirated by a user are not new. But, increased secondary and local markets for apps increase the possible otherwise legitimate locations where a malicious counterfeits of apps can be uploaded. We asked questions about impact of possible malicious counterfeit versions of their software being produced on how developers their design (&lt;strong&gt;Des&lt;/strong&gt;) and deploy (&lt;strong&gt;Dep&lt;/strong&gt;) their software. Targeted attacks against developers can be used to compromise their otherwise legitimate software to to deliver malicious content. We also asked about the challenges related to possible backdoors in the software or developer tools they used (&lt;strong&gt;Thrt&lt;/strong&gt;).&lt;/p&gt;

&lt;div id=&#34;attachment_13480&#34; style=&#34;width: 967px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2016/12/malicious.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-13480&#34; class=&#34;size-full wp-image-13480&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2016/12/malicious.png&#34; alt=&#34;&#34; width=&#34;957&#34; height=&#34;285&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2016/12/malicious.png 957w, https://guardianproject.info/wp-content/uploads/2016/12/malicious-300x89.png 300w, https://guardianproject.info/wp-content/uploads/2016/12/malicious-768x229.png 768w&#34; sizes=&#34;(max-width: 957px) 100vw, 957px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-13480&#34; class=&#34;wp-caption-text&#34;&gt;
    Malicious &amp; Counterfeit Software
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Only a couple of the developers we interviewed expressed concern about malicious counterfeit versions of their applications.&lt;/p&gt;

&lt;p&gt;While targeted attacks were acknowledged by some interviewees, most described the insertion of backdoors as less likely than targeted threats that aimed at stopping the developer from continuing development. The initial survey asked about the challenge of developer account shutdown and/or seizures during development (&lt;strong&gt;Dev&lt;/strong&gt;) and take-down requests (&lt;strong&gt;Thrt&lt;/strong&gt;) because of content restrictions, defamation laws, copyright claims, etc.&lt;/p&gt;

&lt;div id=&#34;attachment_13481&#34; style=&#34;width: 967px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2016/12/takedown.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-13481&#34; class=&#34;size-full wp-image-13481&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2016/12/takedown.png&#34; alt=&#34;&#34; width=&#34;957&#34; height=&#34;285&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2016/12/takedown.png 957w, https://guardianproject.info/wp-content/uploads/2016/12/takedown-300x89.png 300w, https://guardianproject.info/wp-content/uploads/2016/12/takedown-768x229.png 768w&#34; sizes=&#34;(max-width: 957px) 100vw, 957px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-13481&#34; class=&#34;wp-caption-text&#34;&gt;
    Account shutdown and/or seizures during development or software take-down requests
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;The in-platform censorship we surveyed for was seen as far less a challenge in the interviews. Interviewees were far more concerned about the possibility of real-world legal censorship or harassment. When asked how developers addressed their perceived threats many of the interviewees noted that developers go beyond technological measures to protect themselves. Many also rely heavily on the strategic use of pseudonyms and other operational security measures.&lt;/p&gt;

&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;With our interviews nearly complete it is interesting to look back at, what seemed like, wide disagreement at the time of the survey as an indicator of how important local context is to the challenges and threats faced by developers in repressive societies. Over the next couple of months we will be building user personas that synthesize and codify our findings. We hope these personas will help other individuals and organizations working on internet freedom issues to think about how they can structure their projects to support and collaborate with developers in repressive environments in safe and productive ways.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>HOWTO: get all your Debian packages via Tor Onion Services</title>
      <link>https://guardianproject.github.io/info/2016/07/31/howto-get-all-your-debian-packages-via-tor-onion-services/</link>
      <pubDate>Sun, 31 Jul 2016 17:28:57 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2016/07/31/howto-get-all-your-debian-packages-via-tor-onion-services/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2014/10/leakage.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2014/10/leakage-300x199.png&#34; alt=&#34;leakage&#34; width=&#34;300&#34; height=&#34;199&#34; class=&#34;alignright size-medium wp-image-12699&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2014/10/leakage-300x199.png 300w, https://guardianproject.info/wp-content/uploads/2014/10/leakage-100x66.png 100w, https://guardianproject.info/wp-content/uploads/2014/10/leakage-150x99.png 150w, https://guardianproject.info/wp-content/uploads/2014/10/leakage-200x132.png 200w, https://guardianproject.info/wp-content/uploads/2014/10/leakage.png 410w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;Following up on &lt;a href=&#34;https://guardianproject.info/2014/10/16/reducing-metadata-leakage-from-software-updates/&#34; target=&#34;_blank&#34;&gt;some privacy leaks that we looked into a while back&lt;/a&gt;, there are now official Debian &lt;a href=&#34;https://onion.debian.org&#34; target=&#34;_blank&#34;&gt;Tor Onion Services&lt;/a&gt; for getting software packages and security updates, thanks to the Debian Sys Admin team. This is important for high risk use cases like TAILS covers, but also it is useful to make it more difficult to do some kinds of targeted attacks against high-security servers. The default Debian and Ubuntu package servers use plain HTTP with unencrypted connections. That means anyone with access to the network streams could both monitor and fingerprint traffic. When an request for a security update is spotted, an attacker knows that machine is vulnerable to an exploit, and could reliably exploit it before the security update is applied.&lt;/p&gt;

&lt;p&gt;Using &lt;a href=&#34;https://labs.riseup.net/code/issues/8143&#34; target=&#34;_blank&#34;&gt;HTTPS to get security updates&lt;/a&gt; improves this situation a lot, but by measuring the size of data transfers, it is still possible to &lt;a href=&#34;http://www0.cs.ucl.ac.uk/staff/G.Danezis/papers/TLSanon.pdf&#34; target=&#34;_blank&#34;&gt;track which files are being downloaded&lt;/a&gt;. A Tor Onion Service provides end-to-end encryption like the HTTPS connection. It also mixes up the traffic with lots of other traffic, so its not easy to see what traffic goes together. That makes it a lot harder for a network observer to tell when a security update is being downloaded. Additionally, using a Tor Onion Service forces the traffic over Tor, so that the Debian mirror server cannot see which server is requesting the updates. That helps prevent targeted attacks.&lt;/p&gt;

&lt;p&gt;There are other benefits as well, besides just for the person running the high security server in this example, especially if all of the traffic is coming over Tor. When updates are delivered over Tor, then that means the Debian mirror operators have less to worry about because they are handling less metadata that might have privacy concerns. It means that when law enforcement requests logs from the mirror operators, the mirror operators can more easily hand over anything they have since the mirror operator knows that there is not private information in the logs. Reducing the legal risks and privacy concerns makes it easier to run mirrors, and that helps internet services work better.&lt;/p&gt;

&lt;p&gt;One disadvantage of this approach as it now stands is that your server will get updates from the same mirror every time. There is only a single Tor Onion Service for the main archive. An alternate approach using the combination of Tor and &lt;a href=&#34;http://httpredir.debian.org/&#34;&gt;http://httpredir.debian.org/&lt;/a&gt; as the package source means that your server will get updates from a different mirror each time Tor changes its exit node (I believe that’s every 10 minutes or so).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can you set up your Debian machine to get updates over Tor?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2016/07/tor-logo-2011_11.jpg&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2016/07/tor-logo-2011_11-300x173.jpg&#34; alt=&#34;debian and tor&#34; width=&#34;300&#34; height=&#34;173&#34; class=&#34;alignright size-medium wp-image-13395&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2016/07/tor-logo-2011_11-300x173.jpg 300w, https://guardianproject.info/wp-content/uploads/2016/07/tor-logo-2011_11-768x444.jpg 768w, https://guardianproject.info/wp-content/uploads/2016/07/tor-logo-2011_11.jpg 800w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;Right now, the best way to set up a Debian machine to force traffic over Tor is to use &lt;a href=&#34;https://trac.torproject.org/projects/tor/wiki/doc/TransparentProxy&#34; target=&#34;_blank&#34;&gt;transparent proxying&lt;/a&gt; via &lt;em&gt;iptables&lt;/em&gt; rules. If you have that setup, then you can add the onion addresses as Debian apt sources as if they are any other HTTP Debian mirror. Another option is to install &lt;em&gt;apt-transport-tor&lt;/em&gt; like TAILS does, then you can use &lt;a href=&#34;http://people.skolelinux.org/pere/blog/Always_download_Debian_packages_using_Tor___the_simple_recipe.html&#34; target=&#34;_blank&#34;&gt;special syntax to add the Tor Onion Services&lt;/a&gt;. And another way is to install an HTTP proxy like &lt;em&gt;privoxy&lt;/em&gt; and enable apt HTTP proxy support as &lt;a href=&#34;https://guardianproject.info/2014/10/16/reducing-metadata-leakage-from-software-updates/&#34; target=&#34;_blank&#34;&gt;I described before&lt;/a&gt;. The &lt;em&gt;apt-transport-tor&lt;/em&gt; and &lt;em&gt;privoxy&lt;/em&gt; approaches both have the downside of having to trust an added piece of software, whereas the transparent proxy technique uses what is already present in the Linux kernel. I’ve been using the &lt;em&gt;privoxy&lt;/em&gt; method since that is what I got working in 2014 and it has been working reliably on multiple servers since then. Also, I need &lt;em&gt;privoxy&lt;/em&gt; installed for another application anyway.&lt;/p&gt;

&lt;p&gt;Here’s how to set up the apt sources to get packages and updates via Tor Onion Services without delaying security updates. First, remove &lt;em&gt;/etc/apt/sources.list&lt;/em&gt; and &lt;em&gt;/etc/apt/sources.list.d/*.list&lt;/em&gt; to start with a clean slate. Next add &lt;em&gt;/etc/apt/sources.list.d/00.vwakviie2ienjx6t.onion.list&lt;/em&gt; to get the main Debian repositories:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deb http://vwakviie2ienjx6t.onion/debian/ jessie main
deb-src http://vwakviie2ienjx6t.onion/debian/ jessie main

# aka volatile
deb http://vwakviie2ienjx6t.onion/debian/ jessie-updates main
deb-src http://vwakviie2ienjx6t.onion/debian/ jessie-updates main

deb http://vwakviie2ienjx6t.onion/debian jessie-backports main
deb-src http://vwakviie2ienjx6t.onion/debian/ jessie-backports main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next add the new Tor Onion Service for the security update repository at &lt;em&gt;/etc/apt/sources.list.d/00.sgvtcaew4bxjd7ln.onion.list&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deb http://sgvtcaew4bxjd7ln.onion/ jessie/updates main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then last, include the normal HTTP security.debian.org archive to ensure that your server gets the latest security updates, even if the &lt;a href=&#34;https://onion.debian.org/&#34; target=&#34;_blank&#34;&gt;Onion Service mirror&lt;/a&gt; is behind or there is some other issue related to Tor. This goes in &lt;em&gt;/etc/apt/sources.list.d/99.security.debian.org.list&lt;/em&gt; to ensure that it is always the last repository that is tried, and apt loads files from /etc/apt/source.list.d/ in alphabetical order, so it’ll always try to get the security updates from the Onion Service before falling back to the HTTP source as a last resort.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deb http://security.debian.org/ jessie/updates main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also run an unofficial mirror of the security updates on &lt;a href=&#34;http://dju2peblv7upfz3q.onion/debian&#34;&gt;http://dju2peblv7upfz3q.onion/debian&lt;/a&gt; if you want to add another backup, i.e. &lt;em&gt;/etc/apt/sources.list.d/00.dju2peblv7upfz3q.onion.list&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;deb http://dju2peblv7upfz3q.onion/debian-security/ jessie/updates main
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Building the most private app store</title>
      <link>https://guardianproject.github.io/info/2016/06/02/building-the-most-private-app-store/</link>
      <pubDate>Thu, 02 Jun 2016 11:08:52 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2016/06/02/building-the-most-private-app-store/</guid>
      <description>&lt;p&gt;&lt;em&gt;App stores can work well without any tracking at all&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2016/06/whichdoor.jpg&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2016/06/whichdoor-150x150.jpg&#34; alt=&#34;whichdoor&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignright size-thumbnail wp-image-13337&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Attackers are increasingly seeing app stores as a prime &lt;a href=&#34;https://guardianproject.info/2015/02/24/phishing-for-developers/&#34; target=&#34;_blank&#34;&gt;attack&lt;/a&gt; vector, whether it is aimed at the masses like &lt;a href=&#34;http://researchcenter.paloaltonetworks.com/2015/09/more-details-on-the-xcodeghost-malware-and-affected-ios-apps/&#34;&gt;XCodeGhost&lt;/a&gt; or very targeted like in FBI vs Apple. When we install software from an app store, we are placing a lot of trust in a lot of different parties involved in getting the source code from the original developer delivered to our device in a useful form. Most people are entirely unaware of how much trust they are putting into this system, which they are entrusting with their personal data. Even for people who do understand the technical details involved, figuring out whether the people and the system itself is trustworthy is difficult to do.&lt;/p&gt;

&lt;p&gt;We are building an app store that requires the bare minimum of trust: only the software developers themselves and the code they produce. We consider the app store operators and servers a threat. Building an ecosystem that enables automated, effective auditing lets the computers verify to make trust decisions easier. Effective external auditing requires an ecosystem that cannot deliver targeted content to just the auditing system, while feeding users something else (aka “binary transparency”).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Most app stores track as much as possible&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The vast majority of apps stores track their users actions in detail. Some is necessary when using the business model of the app store operator taking a percentage of sales, but none of the tracking is inherent to running an app store. For example, payment verification can be handled in the app itself like shareware. A software delivery system that tracks its users makes it simple to hide malware delivery since it can target any auditing system. Most app stores know a lot about their users:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;account name&lt;/li&gt;
&lt;li&gt;identity&lt;/li&gt;
&lt;li&gt;payment methods&lt;/li&gt;
&lt;li&gt;everything you search for in the app store&lt;/li&gt;
&lt;li&gt;everything you look at in the app store&lt;/li&gt;
&lt;li&gt;everything you download, install, uninstall&lt;/li&gt;
&lt;li&gt;which apps you actually run&lt;/li&gt;
&lt;li&gt;where you are, based on IP, declared preference, etc.&lt;/li&gt;
&lt;li&gt;your preferred language&lt;/li&gt;
&lt;li&gt;and more…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apps stores need to know very little in order to function: how to give you the files you request. That means indexes, descriptions, icons, apps, and install/delete requests (for “push” install/delete). Given that information, the client can do everything needed to provide a full app store user experience. For this work, we chose to build upon &lt;a href=&#34;https://f-droid.org&#34; target=&#34;_blank&#34;&gt;F-Droid&lt;/a&gt;, a community-run Android app store that distributes verified Free Software. The community has had an interest in privacy all along, and has always worked to avoid tracking. The security architecture is based on models proven by &lt;a href=&#34;https://wiki.debian.org/SecureApt&#34; target=&#34;_blank&#34;&gt;Debian&lt;/a&gt;, &lt;a href=&#34;https://github.com/theupdateframework/tuf/blob/develop/docs/tuf-spec.txt&#34; target=&#34;_blank&#34;&gt;The Update Framework&lt;/a&gt; , and others:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTPS connections by default&lt;/li&gt;
&lt;li&gt;pinned TLS certificate built into the client app&lt;/li&gt;
&lt;li&gt;updates verified based on the signature on the app itself&lt;/li&gt;
&lt;li&gt;file integrity protected by signed metadata&lt;/li&gt;
&lt;li&gt;signed metadata includes hashes of the app and its signing key&lt;/li&gt;
&lt;li&gt;signed metadata generated on a separate machine, which can be fully offline&lt;/li&gt;
&lt;li&gt;public key for verifying metadata signatures built into F-Droid client app&lt;/li&gt;
&lt;li&gt;signed metadata includes timestamp and expiry&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While the current setup is already a solid platform, we are implementing a number of improvements. The signed metadata will include list of official mirrors, then the client chooses mirrors based on availability and freshness based on local criteria like whether Tor is in use, closest on the internet, etc. We are also moving the standard HTTP “etag” cache check from the server to the client so it cannot be abused to track users.&lt;/p&gt;

&lt;p&gt;In order to defend against an attacker that holds the signing keys for the app repository, there must be a trustworthy source of information to compare against. Reproducible builds means that anyone with the same source code will produce the exact same binary. When paired with an auditing system, it is easy to catch malware inserted in the build process, rather than the source code, like XCodeGhost. Reproducible builds also makes it possible to have all builds of a release binary have the exact same hash. Then any app repository can build apps only from source code, and have a source of verification data from any other app repository building the same app. Building software from source has become cheap enough that many companies like gitlab.com and Travis CI are offering free, automated build services in the cloud. Since the whole F-Droid toolset is free software and designed to be easy to setup, the barriers to setting up automatic auditing are quite low. People in separate areas of the world with different risk profiles can run verification servers to provide more trustworthy information.&lt;/p&gt;

&lt;p&gt;Another key aspect of the F-Droid project is to provide the complete toolset needed to run an app store. This enables a more decentralized ecosystem. Therefore, one key goal is to lower the risks of running the services, so that more people can run their own app stores. If the app store does not track its users, then that removes the hassle of protecting personal data from any attacker. These services can be run without fear of responding to secret orders for personal information. It also means that the server setup is a lot simpler because it does not need dynamic content. The app store serve only needs to serve files (e.g. indexes, apps, etc.). The app repository is generated on a secure machine, or even a fully offline machine, and posted to the server. The main server is purely a mirror of the offline machine where the signed repository is generated. Mirrors just shuffle bits from place to place, they are no longer an attack vector.&lt;/p&gt;

&lt;p&gt;Putting all these pieces together provides a system where users need only audit the source code in order to verify a trustworthy app delivery. The file pipeline provides redundantly secure data transmission, the apps can be reproducibly from source code, the app repositories can be automatically audited. Of course, this system relies not only on the power of cryptography, but also the power of transparency. Debian provides a great example of the power of transparency: Debian gives a thousand volunteers root access to every Debian install (by virtue of their ability to upload signed packages that get installed as root). Yet this system has been proven over the past 20+ years to provide solid security. Ultimately we hope that this will de-emphasize the signing key as the sole protection against abuse. If malware has a decent change of being spotted, it makes it much less likely to be used since malware authors either rigorously defend their exploits, or use well known exploits that are not difficult to automatically detect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Future Work&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One attack vector that is not well covered is malware that installable by everyone, that then uses data on the local device to target specific users. That would be a way to target individuals using an app store that does not track its users. We are starting to implement automated dynamic analysis of every app using tools like &lt;a href=&#34;https://labs.mwrinfosecurity.com/tools/drozer&#34; target=&#34;_blank&#34;&gt;Drozer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We are also working towards making as many apps as possible build reproducibly. Some of our quick checks show that a large number of the apps in f-droid.org already will build reproducibly, given the right build environment. We are working on making the process of setting up that build environment as automated as possible.&lt;/p&gt;

&lt;p&gt;The F-Droid “verification server” has been prototyped, and it will be further developed with the aim of making it dead simple to run in common cloud services.&lt;/p&gt;

&lt;p&gt;We already have the infrastructure in place to do verified double-signing, where the developer first signs the release bulid, then once f-droid.org reproduces that build, it adds its signature. Then Android would enforce that both signatures need to be present in order for it to be a valid update.&lt;/p&gt;

&lt;p&gt;As the full localization support is built out, the language that a user is using will not be reported to the server. While speaking Spanish in Spain does not provide much information, speaking Quechua in Uzbekistan can narrow it down to a single user. Instead of dividing the index metadata by language, it will instead be grouped by app. We will then group apps so that it is difficult to tell which app in the group is the one people are interested in. For example, if one very popular app is only grouped with apps that are rarely downloaded, then it is an easy assumption that someone getting info about that block of apps is most likely looking for that popular app.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>PanicKit: making your whole phone respond to a panic button</title>
      <link>https://guardianproject.github.io/info/2016/01/12/panickit-making-your-whole-phone-respond-to-a-panic-button/</link>
      <pubDate>Tue, 12 Jan 2016 08:59:41 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2016/01/12/panickit-making-your-whole-phone-respond-to-a-panic-button/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2016/01/round-button-hazard.png&#34; rel=&#34;attachment wp-att-13221&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2016/01/round-button-hazard-150x150.png&#34; alt=&#34;round hazard button&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignright size-thumbnail wp-image-13221&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2016/01/round-button-hazard-150x150.png 150w, https://guardianproject.info/wp-content/uploads/2016/01/round-button-hazard-300x300.png 300w, https://guardianproject.info/wp-content/uploads/2016/01/round-button-hazard-200x200.png 200w, https://guardianproject.info/wp-content/uploads/2016/01/round-button-hazard.png 512w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;Our mobile devices do so many things for us, making it easy to communicate with people in all manners while giving us access to all sorts of information wherever we are. But in times of anxiety and panic, it is difficult to quickly use them. Will you be too shaky to type in your PIN or lock pattern? Will you have enough time to find your trusted contacts and send them a message? On top of that, our mobile devices carry massive amounts of private information in them: banking details, pictures, all of our messages and call logs.&lt;/p&gt;

&lt;p&gt;The kinds of data that we worry about vary widely based on where we are. In many places in the world, the stuff you are reading or the music you are listening to can get you arrested, or the people you are communicating with is enough to send you to jail. We have been adding “panic buttons” to our apps for 5 years now, and now we want to create an ecosystem of apps to create flexible and system-wide responses when we are unfortunate enough to require pressing the personal panic button.&lt;/p&gt;

&lt;p&gt;This work seeks to establish a new level of awareness, understanding and capability for providing specific mobile software features for users who are in a “panic” situations. We define “panic” as at risk of having their mobile device physically compromised or removed from their body, being physically detained themselves, or facing an immediate threat of violence, injury, kidnapping or death. This is not to say we are are building a global “911” system. We seek to explore how software that is explicitly designed for these situations, can provide some amount of assistance to the user, by either protecting their privacy, ensuring that sensitive data is hidden or unrecoverable, or that their support networks are notified of the panic event, and provided with the necessary information to take action.&lt;/p&gt;

&lt;p&gt;Over the past year, we have developed user experience design patterns, an Android library, a new panic button app, and example projects to communicate how a system-wide panic should look. For a quick introduction, check out this video demonstrating a very simple panic setup of &lt;a href=&#34;https://play.google.com/store/apps/details?id=info.guardianproject.ripple&#34; target=&#34;_blank&#34;&gt;Ripple&lt;/a&gt;, a panic button, triggering &lt;a href=&#34;https://play.google.com/store/apps/details?id=info.guardianproject.browser&#34; target=&#34;_blank&#34;&gt;Orweb&lt;/a&gt;, a private browser:&lt;/p&gt;

&lt;h2 id=&#34;make-your-app-respond-in-times-of-panic&#34;&gt;Make your app respond in times of panic&lt;/h2&gt;

&lt;p&gt;The ultimate goal of PanicKit is of course to make apps respond with actions that help protect the user. This can be as simple as locking the app when it has a passphrase, or the response can combine a number of actions into a coherent response: a messaging app locks its data and disguises itself as a game while sending out the panic message that includes the user’s location. There is a lot of complexity in all this, especially with many apps involved, so it is essential to always simplify the experience as much as possible. Thinking about panic situations is stressful, setting up the panic response should not add to that stress. Towards that end, it is better to sacrifice some flexibility if that means solid gains in simplicity.&lt;/p&gt;

&lt;p&gt;The first key design pattern is the default, non-destructive response. If all apps that support PanicKit include sensible defaults, then pressing the panic button can have a useful response without the user having to setup anything at all. In order to achieve this, we divide possible responses into two categories: non-destructive vs destructive. An app that has a PIN lock can be locked without destroying anything, the user just needs to unlock it. A browser that wipes the cache can always just download the files again next time the user goes to that website. If an app only has a default, non-destructive response, then there is no need to have a configuration interface; it can be represented purely in the trigger app’s list of responders, where it will be marked “App hides when triggered”.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2016/01/02.0.png&#34; rel=&#34;attachment wp-att-13212&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2016/01/02.0-939x1024.png&#34; alt=&#34;panic responder setup&#34; width=&#34;780&#34; height=&#34;851&#34; class=&#34;alignnone size-large wp-image-13212&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2016/01/02.0-939x1024.png 939w, https://guardianproject.info/wp-content/uploads/2016/01/02.0-275x300.png 275w, https://guardianproject.info/wp-content/uploads/2016/01/02.0-768x838.png 768w&#34; sizes=&#34;(max-width: 780px) 100vw, 780px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Many of the most valuable panic responses require doing something that can not be undone, so we classify these as destructive. Deleting data is exactly what is needed in a panic situation, but the user must opt-in to enable this kind of response in order to prevent data from being mistakenly deleted. Sending a message can also be a very valuable panic response. But sending a message to the wrong person can cause harm, sending it at the wrong time can destroy people’s expectations: if you cry wolf too often, then people will stop hearing it. Disguising an app can also save people a lot of trouble. But if the user does not know this is going to happen, their experience will be that the app was deleted. So these are all destructive responses and require the user to enable them via a panic setup screen.&lt;/p&gt;

&lt;p&gt;For apps that offer configurable responses, it is essential to present those options clearly with as little clutter as possible. The panic setup should be on a devoted screen, not mixed in with other settings, and takes up the full screen. Panic is a time of stress, the panic response should strive to avoid adding any stress on top of that. When an app offers a few options for responses, then even the devoted screen can quickly get complicated: a list of possibilities, a text field for a message, and a way to manage the contacts to send to. It is important that the entire response is easily visible in one screen so that the user can quickly and easily tell how that app will respond. The entire panic setup should be on a single screen with as little scrolling as possible. Large widgets like a message text field should be placed at the bottom, and be collapsed if not active.&lt;/p&gt;

&lt;p&gt;To get started, add the PanicKit library to your &lt;em&gt;build.gradle&lt;/em&gt;: &lt;code&gt;info.guardianproject.panic:panic:0.5&lt;/code&gt;, then check out the FakePanicResponder example app, as well as how it is implemented in real apps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/SMSSecure/SMSSecure/blob/8b2d61161716dcae33c7ae2fd9540931b632030a/src/org/smssecure/smssecure/PanicResponderActivity.java&#34; target=&#34;_blank&#34;&gt;SMSSecure lock as default response&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/theScrabi/NewPipe/pull/133&#34; target=&#34;_blank&#34;&gt;NewPipe clear search history as default response&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zom/Zom-Android/blob/master/app/src/main/java/org/awesomeapp/messenger/ui/PanicSetupActivity.java&#34; target=&#34;_blank&#34;&gt;Zom with multiple destructive responses and a default lock response&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;make-your-own-panic-button-app&#34;&gt;Make your own panic button app&lt;/h2&gt;

&lt;p&gt;One key reason why we took on this project is to spur more innovation in what a “panic button” can look like. There are currently two solid panic trigger apps that use PanicKit: &lt;a href=&#34;https://panicbutton.io&#34; target=&#34;_blank&#34;&gt;PanicButton&lt;/a&gt; and &lt;a href=&#34;https://play.google.com/store/apps/details?id=info.guardianproject.ripple&#34; target=&#34;_blank&#34;&gt;Ripple&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are many ideas for what a panic button can look like, now it is easy to make one that will actually trigger real things. A custom panic button app only needs to send the trigger message (technically an &lt;code&gt;ACTION_TRIGGER Intent&lt;/code&gt;), which will make apps lock, hide, delete private data, send a message, etc. Here are some ideas for panic button apps that we would love to see:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a “&lt;a href=&#34;https://en.wikipedia.org/wiki/Dead_man%27s_switch&#34; target=&#34;_blank&#34;&gt;dead man’s switch&lt;/a&gt;” that triggers if the user has not checked in within the last hour&lt;/li&gt;
&lt;li&gt;a “geo-fence” that triggers if the device comes too close to a known detention center&lt;/li&gt;
&lt;li&gt;a sensor monitor that triggers on absence of movement&lt;/li&gt;
&lt;li&gt;a custom Bluetooth button that looks like a belt buckle, &lt;a href=&#34;http://news.discovery.com/tech/gear-and-gadgets/sleek-jewelry-hides-a-panic-button-140220.htm&#34; target=&#34;_blank&#34;&gt;brooch&lt;/a&gt;, or other innocuous object&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2016/01/01.3.png&#34; rel=&#34;attachment wp-att-13207&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2016/01/01.3-149x300.png&#34; alt=&#34;Ripple&#39;s responders&#34; width=&#34;149&#34; height=&#34;300&#34; class=&#34;alignright size-medium wp-image-13207&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2016/01/01.3-149x300.png 149w, https://guardianproject.info/wp-content/uploads/2016/01/01.3-768x1544.png 768w, https://guardianproject.info/wp-content/uploads/2016/01/01.3-509x1024.png 509w, https://guardianproject.info/wp-content/uploads/2016/01/01.3.png 1006w&#34; sizes=&#34;(max-width: 149px) 100vw, 149px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;An important part of the user experience of the panic button app is how it represents what the trigger will do. For that, we paid careful attention to the design of the list of “panic responder” apps. It should quickly and clearly show which apps are enabled. In our pattern, enabled apps should be sorted to the top of the list and disabled apps should be greyed out including the app icon. There should also be a standard switch to both allow the user to enable/disable an app as well as provide extra feedback on whether an app is enabled or not. That provides three visual channels that communicate what will respond (top of the list, in full color, and with the shape of a switch that is turned on). For a thorough overview of design patterns, see &lt;a href=&#34;https://dev.guardianproject.info/boards/21/topics/390&#34; target=&#34;_blank&#34;&gt;Panic Design Patterns&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Panic responders can have both non-destructive and destructive responses, and some are only appropriate for a full on panic. If you are just feeling anxious, and are worried that the situation is getting dangerous, then deleting files is not appropriate but locking and hiding is. An app could instead be an “anxious trigger” app, and be limited to only non-destructive responses. A trigger app can only send one kind of trigger message (the &lt;code&gt;ACTION_TRIGGER Intent&lt;/code&gt;), to keep the inter-app interaction simple. So the anxious trigger app would instead not offer the “EDIT” option (implemented with an &lt;code&gt;ACTION_CONNECT Intent&lt;/code&gt;), and that limits the responses to the default, non-destructive responses in all the apps that receive a trigger from the anxious trigger app.&lt;/p&gt;

&lt;p&gt;To get started, add the panickit library to your build.gradle &lt;code&gt;info.guardianproject.panic:panic:0.5&lt;/code&gt;, then check out the &lt;code&gt;PanicTrigger&lt;/code&gt; class. You can see how it is implemented in these example apps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/guardianproject/Ripple&#34; target=&#34;_blank&#34;&gt;Ripple&lt;/a&gt; – &lt;em&gt;a real panic button that is simple enough to be an example&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/guardianproject/FakePanicButton&#34; target=&#34;_blank&#34;&gt;FakePanicButton&lt;/a&gt; – &lt;em&gt;a fake app that is only meant to be an example&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;more-work-and-open-questions&#34;&gt;More work and open questions&lt;/h2&gt;

&lt;p&gt;There is a lot of potential for making our mobile devices help us in anxious and panicked moments. PanicKit has established that a system-wide panic response can be simple, approachable, and effective. But there is definitely much work to be done. There is an organization forming around this work, The &lt;a href=&#34;https://github.com/PanicInitiative&#34; target=&#34;_blank&#34;&gt;Panic Initiative&lt;/a&gt;, that will build upon the work done by Amnesty International, &lt;a href=&#34;https://iilab.org/&#34; target=&#34;_blank&#34;&gt;iilab&lt;/a&gt;, and our PanicKit work.&lt;/p&gt;

&lt;p&gt;There are of course still many open questions that we are very interested in, and hope to see more people working on this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Should this be handled on the system level?&lt;/li&gt;
&lt;li&gt;How the trigger app query the responder for its action without leaking private data like contacts or location?&lt;/li&gt;
&lt;li&gt;How can panic and anxiety be represented graphically, using colors, iconography, UI, etc.?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more discussion and resources, check out the &lt;a href=&#34;https://dev.guardianproject.info/projects/panic/wiki&#34; target=&#34;_blank&#34;&gt;PanicKit wiki&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to Migrate Your Android App’s Signing Key</title>
      <link>https://guardianproject.github.io/info/2015/12/29/how-to-migrate-your-android-apps-signing-key/</link>
      <pubDate>Tue, 29 Dec 2015 12:03:54 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2015/12/29/how-to-migrate-your-android-apps-signing-key/</guid>
      <description>

&lt;p&gt;&lt;strong&gt;It is time to update to a stronger signing key for your Android app! The old default RSA 1024-bit key is weak and officially deprecated.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;what&#34;&gt;What?&lt;/h2&gt;

&lt;p&gt;The Android OS requires that every application installed be signed by a digital key. The purpose behind this signature is to identify the author of the application, allow this author and this author alone to make updates to the app, as well as provide a mechanism to establish inter-application trust. The Android security model defines an app by two things: the package name (aka &lt;a href=&#34;https://developer.android.com/reference/android/content/Context.html#getPackageName%28%29&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;packageName&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://sites.google.com/a/android.com/tools/tech-docs/new-build-system/applicationid-vs-packagename&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;ApplicationID&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://developer.android.com/guide/topics/manifest/manifest-element.html#package&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;package&lt;/code&gt;&lt;/a&gt;) and the signing key. If either of those are different, then Android considers it a different app. When the package name and signing key of one APK match an installed app, then the APK is considered an update and Android will replace the installed app with the APK. If the APK is signed by a different key, then Android will prevent installing and updating.&lt;/p&gt;

&lt;p&gt;First thing is to see what the current signing key is. Check any app’s signing key using our free utility app &lt;a href=&#34;https://play.google.com/store/apps/details?id=info.guardianproject.checkey&#34; target=&#34;_blank&#34;&gt;Checkey&lt;/a&gt;:&lt;/p&gt;

&lt;div id=&#34;attachment_13170&#34; style=&#34;width: 790px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2015/12/checkey-1.png&#34; rel=&#34;attachment wp-att-13170&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-13170&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2015/12/checkey-1-1024x576.png&#34; alt=&#34;Lookout needs to generate a new key!&#34; width=&#34;780&#34; height=&#34;439&#34; class=&#34;size-large wp-image-13170&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2015/12/checkey-1-1024x576.png 1024w, https://guardianproject.info/wp-content/uploads/2015/12/checkey-1-300x169.png 300w, https://guardianproject.info/wp-content/uploads/2015/12/checkey-1-768x432.png 768w, https://guardianproject.info/wp-content/uploads/2015/12/checkey-1-350x197.png 350w, https://guardianproject.info/wp-content/uploads/2015/12/checkey-1-860x484.png 860w, https://guardianproject.info/wp-content/uploads/2015/12/checkey-1.png 1280w&#34; sizes=&#34;(max-width: 780px) 100vw, 780px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-13170&#34; class=&#34;wp-caption-text&#34;&gt;
    Lookout needs to generate a new key!
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;The official Android docs have tons of useful information about what the signing keys are good for, how to generate them, and how to use them. Unfortunately, it doesn’t provide any instructions for migrating, and for many years, 1024-bit RSA was the default. But first, why would you want or need to migrate?&lt;/p&gt;

&lt;h2 id=&#34;why&#34;&gt;Why?&lt;/h2&gt;

&lt;p&gt;Depending on when you created your signing key, you might have a particularly weak key. The primary danger of a weak key is that an adversary could break your key in order to generate fake APK signatures. Then those malicious APKs can be installed as updates to your app. There are other nefarious purposes depending on how you use the signing key in your apps. Or if you are unfortunate enough to have suffered a loss of your private key material, then it is definitely time for a new signing key.&lt;/p&gt;

&lt;p&gt;According to our friends at the &lt;a href=&#34;https://androidobservatory.org/stats&#34; title=&#34;Android Observatory&#34;&gt;Android Observatory&lt;/a&gt;, over 64% of Android apps in their data store use 1024-bit signing keys (RSA or DSA).&lt;/p&gt;

&lt;div id=&#34;visualization&#34; style=&#34;width: 600px; height: 400px;&#34;&gt;
&lt;/div&gt;

&lt;p&gt;There are several good reasons to migrate off of 1024-bit RSA keys, even though there is no &lt;em&gt;public&lt;/em&gt; proof of a 1024 prime factorization required to generate any 1024-bit key at will. The evidence has been mounting for a decade.&lt;/p&gt;

&lt;p&gt;NIST’s &lt;a href=&#34;http://csrc.nist.gov/publications/nistpubs/800-57/sp800-57_part1_rev3_general.pdf&#34;&gt;official guidelines&lt;/a&gt; (PDF, page 64 and 67) deprecated 1024-bit RSA keys at the end of 2013. This deprecation by NIST isn’t an indication that 1024-bit RSA is compromised, instead it is a preemptive move to stay ahead of attacks. Confidence in NIST might be shaken in light of &lt;a href=&#34;http://blog.cryptographyengineering.com/2013/09/on-nsa.html&#34;&gt;recent revelations&lt;/a&gt;, but in this case increasing the RSA key size is unlikely to trigger any secret NSA backdoors. If anything, the deprecation year could have been extended slightly to allow the NSA a window where they had the capacity to factor 1024-bit keys and everyone was still using them. So, it’s time to move on.&lt;/p&gt;

&lt;p&gt;For an example, a decade ago the cost of building special purpose hardware capable of breaking a single 1024-bit RSA key in one year was estimated at $10 million (&lt;a href=&#34;http://tau.ac.il/~tromer/papers/cbtwirl.pdf&#34;&gt;Adi Shamir, Eran Tromer, On the cost of factoring RSA-1024&lt;/a&gt;, 2003). Presumably the techniques have improved by orders of magnatude, and the hardware value depreciated. It is conceivable the cost has fallen enough to be affordable not only by nation-state actors, but by large criminal enterprises too.&lt;/p&gt;

&lt;p&gt;For a comprehensive talk on the state of the art (as of December 2012) when it comes to breaking 1024-bit RSA, check out the 29C3 talk &lt;a href=&#34;http://events.ccc.de/congress/2012/Fahrplan/events/5275.en.html&#34; title=&#34;FactHacks: RSA factorization in the real world&#34;&gt;FactHacks: RSA factorization in the real world&lt;/a&gt; with the cryptographers Daniel J. Bernstein, Nadia Heninger, and Tanja Lange (&lt;a href=&#34;http://events.ccc.de/congress/2012/wiki/Documentation#Recordings&#34; title=&#34;29C3 Recordings&#34;&gt;watch recording&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;how&#34;&gt;How?&lt;/h2&gt;

&lt;p&gt;Migrating to a strong key for an Android app is, unfortunately, not so simple. If you are publishing a &lt;em&gt;new&lt;/em&gt; app to the app store, then simply generate a new strong signing key and you’re done. Congratulations! However, there exists no easy way to update your signing key for an existing application, because an installed application can only take updates from an APK signed with &lt;em&gt;the same&lt;/em&gt; key.&lt;/p&gt;

&lt;p&gt;Here we outline a basic method with which you can use to fake an update to your signing key. This is not as user friendly as we would like. Some of the hard facts of performing this process is that for most app stores including Google Play, you will lose ratings and reviews since the app will show up with a new package name, and the app store will treat it like an entirely new app. Also, the user will have to manually uninstall the original app once they finish the procedure. Here is a rough outline of the process:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;generate the new signing key, &lt;em&gt;RSA 4096&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Update the first app, &lt;em&gt;App1&lt;/em&gt;, with a mechanism for exporting private data, using &lt;a href=&#34;https://github.com/guardianproject/TrustedIntents&#34; target=&#34;_blank&#34;&gt;TrustedIntents&lt;/a&gt; with a signature pin of the new key, &lt;em&gt;RSA 4096&lt;/em&gt;, which &lt;a href=&#34;https://guardianproject.info/2014/07/30/introducing-trustedintents-for-android/&#34; target=&#34;_blank&#34;&gt;Checkey will generate for you&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create a new version of the app with a different package name, &lt;em&gt;App2&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;sign &lt;em&gt;App2&lt;/em&gt; with new key, &lt;em&gt;RSA 4096&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Add method to &lt;em&gt;App2&lt;/em&gt; for receiving user data from &lt;em&gt;App1&lt;/em&gt;, including a signature pin of the old signing key, &lt;em&gt;RSA 1024&lt;/em&gt;, for use with TrustedIntents&lt;/li&gt;
&lt;li&gt;Publish &lt;em&gt;App2&lt;/em&gt; to the app stores&lt;/li&gt;
&lt;li&gt;From &lt;em&gt;App1&lt;/em&gt;, prompt user to install &lt;em&gt;App2&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;runs and imports data from &lt;em&gt;App1&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;App2&lt;/em&gt; prompts user to uninstall &lt;em&gt;App1&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For &lt;a href=&#34;https://f-droid.org&#34; target=&#34;_blank&#34;&gt;F-Droid&lt;/a&gt;, there will be some easier tools for handling this. The F-Droid system is already used to multiple signing keys per app since F-Droid uses its own signing key for many of the apps it releases, and that F-Droid signing key is different from the signing key that the original developer used in their Google Play uploads. F-Droid will likely be able to support APKs with the same package name but with multiple signing keys.&lt;/p&gt;

&lt;h3 id=&#34;a-note-on-compatibility&#34;&gt;A Note on Compatibility&lt;/h3&gt;

&lt;p&gt;There is security vs compatibility trade off a few might be interested in. Pre-4.3, Android did not support any signature algorithms except SHA1. With Android &amp;gt;= 4.3, SHA256 support was fixed, and SHA384, SHA512, and ECDSA were added (&lt;a href=&#34;https://code.google.com/p/android/issues/detail?id=38321&#34;&gt;source&lt;/a&gt;). There are still android 2.3.3 (&lt;code&gt;android-10&lt;/code&gt;) devices being sold, so anyone interested in backwards compatibility will have to heed this.&lt;/p&gt;

&lt;p&gt;Also, the larger the keysize and hashsize used, the longer it takes to install and update the application. So extremely large values might be unsuitable for slower hardware. The following probably doesn’t buy you a tremendous amount of additional security but cranks the paranoia to 11. It does so at the cost of compatibility and performance.&lt;br /&gt;
&lt;code&gt;&amp;lt;br /&amp;gt;
Gen with:&amp;lt;br /&amp;gt;
  keytool -genkey -v -keystore test.keystore -alias testkey -keyalg RSA -keysize 4096 -sigalg SHA512withRSA -dname &amp;quot;cn=Test,ou=Test,c=CA&amp;quot; -validity 10000&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Sign with:&amp;lt;br /&amp;gt;
  jarsigner -verbose -sigalg SHA512withRSA -digestalg SHA512 -keystore test.keystore test.apk testkey&amp;lt;br /&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We have some scripts that we use to generate keys in our &lt;a href=&#34;https://github.com/guardianproject/smartcard-apk-signing&#34; target=&#34;_blank&#34;&gt;smartcard-apk-signing&lt;/a&gt; repo. It is also possible to generate an Android signing key using openssl or other libraries. It is often wise to use different software than standard for doing things like generating keys. Since the Java &lt;code&gt;keytool&lt;/code&gt; approach that is the standard, recommended method for Android, that makes it a target for adversaries that are interested in breaking keys. If a key was generated using &lt;code&gt;openssl&lt;/code&gt; or GNU TLS instead, for example, then that key would not be affected if &lt;code&gt;keytool&lt;/code&gt; had &lt;a href=&#34;https://freedom-to-tinker.com/blog/kroll/software-transparency-debian-openssl-bug/&#34; target=&#34;_blank&#34;&gt;a bug like Debian’s&lt;/a&gt; &lt;a href=&#34;https://security-tracker.debian.org/tracker/CVE-2008-0166&#34; target=&#34;_blank&#34;&gt;CVE-2008-0166&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CipherKit reproducible builds</title>
      <link>https://guardianproject.github.io/info/2015/09/21/cipherkit-reproducible-builds/</link>
      <pubDate>Mon, 21 Sep 2015 10:54:05 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2015/09/21/cipherkit-reproducible-builds/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2012/10/alberti_cipher_disk.jpg&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2012/10/alberti_cipher_disk-150x150.jpg&#34; alt=&#34;alberti cipher disk&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignright size-thumbnail wp-image-3079&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2012/10/alberti_cipher_disk-150x150.jpg 150w, https://guardianproject.info/wp-content/uploads/2012/10/alberti_cipher_disk.jpg 245w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We have been on a kick recently with making our build process support “reproducible builds” aka “deterministic builds”. What is this reproducible thing? Basically, what that means is that you can run a script and end up with the &lt;em&gt;exact&lt;/em&gt; same binary file as our official releases, be it a APK, JAR, AAR, whatever. That lets anyone verify that our releases are produced only from the source in git, without including anything else, whether deliberately or accidentally (like malware).&lt;/p&gt;

&lt;p&gt;Our core CipherKit libraries are the more sensitive areas, so that’s where we’ve started. We generally work on Debian and Ubuntu and recommend that platform, but we recognized that OSX is a popular platform for Android developers also. So this process will work on OSX too, using your favorite package manager (e.g. Fink, MacPorts, or Homebrew).&lt;/p&gt;

&lt;p&gt;Then you will end up with &lt;code&gt;IOCipher-v0.3.zip&lt;/code&gt;, which includes the .jar and .so files. If your setup is close enough to our release build setup, the contents of that ZIP file will be the same as the official release. Right now, it is difficult to get the exact same binary file (e.g. the same sha256 sum) because of the timestamps in the .zip and varitions caused by using different versions of Java, and Android SDK and NDK. To check the contents of your build versus the official release:&lt;/p&gt;

&lt;pre&gt;sudo apt-get install faketime unzip wget meld
cd /tmp
wget https://guardianproject.info/releases/IOCipher-v0.3.zip
wget https://guardianproject.info/releases/IOCipher-v0.3.zip.sig
gpg --verify IOCipher-v0.3.zip.sig
git clone https://github.com/guardianproject/IOCipher
cd IOCipher
git checkout v0.3
./make-release-build
./compare-to-official-release IOCipher-v0.3.zip /tmp/IOCipher-v0.3.zip
&lt;/pre&gt;

&lt;h3 id=&#34;what-is-happening-here&#34;&gt;What is happening here?&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;meld&lt;/em&gt; (&lt;em&gt;FileMerge&lt;/em&gt; on OSX) will show a listing of all files listed, and which ones are different. You can see that the contents of the &lt;em&gt;.class&lt;/em&gt; files and &lt;em&gt;.so&lt;/em&gt; files all match, but there will be inevitable differences in some of the metadata. Native builds are much more sensitive to changes in the toolchain. The Java &lt;em&gt;.class&lt;/em&gt; files are usually reproducible even when using different versions of Java and the Android SDK. Native builds are almost never reproducible if the NDK version is at all different. Sometimes even the host platform where the NDK is running (e.g. Ubuntu vs OSX, or 64-bit vs 32-bit) will cause differences in the final binaries.&lt;/p&gt;

&lt;div id=&#34;attachment_13105&#34; style=&#34;width: 883px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2015/09/Screenshot-.-IOCipher-v0.3-MANIFEST.MF-_tmp-IOCipher-v0.3-MANIFEST.MF-Meld.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-13105&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2015/09/Screenshot-.-IOCipher-v0.3-MANIFEST.MF-_tmp-IOCipher-v0.3-MANIFEST.MF-Meld.png&#34; alt=&#34;The NDK version and build platform are listed in the manifest.&#34; width=&#34;873&#34; height=&#34;591&#34; class=&#34;size-full wp-image-13105&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2015/09/Screenshot-.-IOCipher-v0.3-MANIFEST.MF-_tmp-IOCipher-v0.3-MANIFEST.MF-Meld.png 873w, https://guardianproject.info/wp-content/uploads/2015/09/Screenshot-.-IOCipher-v0.3-MANIFEST.MF-_tmp-IOCipher-v0.3-MANIFEST.MF-Meld-300x203.png 300w&#34; sizes=&#34;(max-width: 873px) 100vw, 873px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-13105&#34; class=&#34;wp-caption-text&#34;&gt;
    The NDK version and build platform are listed in the manifest.
  &lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;attachment_13104&#34; style=&#34;width: 883px&#34; class=&#34;wp-caption alignnone&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2015/09/Screenshot-.-IOCipher-v0.3-_tmp-IOCipher-v0.3-Meld.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-13104&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2015/09/Screenshot-.-IOCipher-v0.3-_tmp-IOCipher-v0.3-Meld.png&#34; alt=&#34;The Java .class files are exactly the same, but the native .so files are not.&#34; width=&#34;873&#34; height=&#34;591&#34; class=&#34;size-full wp-image-13104&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2015/09/Screenshot-.-IOCipher-v0.3-_tmp-IOCipher-v0.3-Meld.png 873w, https://guardianproject.info/wp-content/uploads/2015/09/Screenshot-.-IOCipher-v0.3-_tmp-IOCipher-v0.3-Meld-300x203.png 300w&#34; sizes=&#34;(max-width: 873px) 100vw, 873px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-13104&#34; class=&#34;wp-caption-text&#34;&gt;
    The Java .class files are exactly the same, but the native .so files are not.
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2015/09/1024px-End_CEST.svg_.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2015/09/1024px-End_CEST.svg_-150x150.png&#34; alt=&#34;faketime&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignright size-thumbnail wp-image-13098&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2015/09/1024px-End_CEST.svg_-150x150.png 150w, https://guardianproject.info/wp-content/uploads/2015/09/1024px-End_CEST.svg_-300x300.png 300w, https://guardianproject.info/wp-content/uploads/2015/09/1024px-End_CEST.svg_-200x200.png 200w, https://guardianproject.info/wp-content/uploads/2015/09/1024px-End_CEST.svg_.png 1024w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Timestamps are a very common issue when trying to reproduce a build. The release build process uses &lt;a href=&#34;https://github.com/wolfcw/libfaketime&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;faketime&lt;/code&gt;&lt;/a&gt; to provide consistent timestamps, which are picked from the git commit. &lt;code&gt;faketime&lt;/code&gt; freezes the clock entirely for native builds, so any timestamps from that process will always be exactly the same. Unfortunately, some parts of the &lt;code&gt;ant&lt;/code&gt; Java build rely on the clock moving forward, so freezing clock makes the build freeze forever. Instead, &lt;code&gt;faketime&lt;/code&gt; sets the clock using the time from the git commit, then moves time forward at 5% of the normal speed. That makes it much more likely that the timestamps will be the same, but usually what seems to happen is that the timestamps are 2 seconds off, which is the time resolution of the ZIP format. A better solution is needed here for JARs, they are easiest to verify using a sha256 sum. JAR signatures mostly seem not worth the pain they introduce. APKs signatures do not sign the whole APK, only the contents, so the varying timestamps do not matter when verifying using a APK signature. Another example of a difference: if comparing a debug build to a release build, then &lt;code&gt;BuildConfig.class&lt;/code&gt; will be difference because of the debug stuff. The sort order of the metadata in the jar MANIFEST.MF might also be different.&lt;/p&gt;

&lt;h3 id=&#34;the-end-goal&#34;&gt;The end goal&lt;/h3&gt;

&lt;p&gt;Reproducing builds is an arcane process, for sure. It is a means to an end. The goal is to get to the point where well known binaries, published in places like MavenCentral or jCenter, can easily be verified by anyone who cares to try. Or people could even set up &lt;a href=&#34;https://f-droid.org/wiki/page/Verification_Server&#34; target=&#34;_blank&#34;&gt;servers that automatically try&lt;/a&gt; to reproduce any JAR used in a project.&lt;/p&gt;

&lt;p&gt;Then people can verify those JARs in a fully decentralized manner, and publish certifications in their preferred format (GPG signatures, SHA256 sums for gradle-witness, etc). Then we can feel safe getting the release from anywhere on the internet, no matter the level of security or malware infestation.&lt;/p&gt;

&lt;p&gt;Towards that goal, we have been getting our libraries all nicely packaged up and submitted to jCenter (the default gradle repository for Android). Here are the relevant bits to include in your build.gradle:&lt;/p&gt;

&lt;pre&gt;compile &#39;info.guardianproject.cacheword:cachewordlib:0.1&#39;
compile &#39;info.guardianproject.iocipher:IOCipher:0.3&#39;
compile &#39;info.guardianproject.netcipher:netcipher:1.2&#39;
compile &#39;info.guardianproject.trustedintents:trustedintents:0.0&#39;

compile &#39;net.freehaven.tor.control:jtorctl:0.2&#39;
&lt;/pre&gt;

&lt;p&gt;SQLCipher-for-Android is coming soon:&lt;br /&gt;
&lt;a href=&#34;https://github.com/sqlcipher/android-database-sqlcipher/pull/197&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/sqlcipher/android-database-sqlcipher/pull/197&#34;&gt;https://github.com/sqlcipher/android-database-sqlcipher/pull/197&lt;/a&gt;&lt;/a&gt;&lt;br /&gt;
I hope to also get them up on MavenCentral as well, since that one is also quite common on Android, and is a community run resource versus Bintray’s jCenter, which is purely a for-profit company.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a trustworthy app store that respects privacy</title>
      <link>https://guardianproject.github.io/info/2015/06/02/building-a-trustworthy-app-store-that-respects-privacy/</link>
      <pubDate>Tue, 02 Jun 2015 16:38:03 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2015/06/02/building-a-trustworthy-app-store-that-respects-privacy/</guid>
      <description>&lt;p&gt;One core piece of our approach is thinking about very high risk situations, like Ai Weiwei or Edward Snowden, then making the tools for operating under that pressure as easy to use as possible. That means that we might occasionally come across as a little paranoid. It is important to dive into the depths of what might be possible. That is an essential step in evaluating what the risks and defenses are, and how to prioritize them. Making usable software is not just making things easy, but rather making tools for real world situations that are a simple as possible.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2015/06/hrome-crash.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2015/06/hrome-crash.png&#34; alt=&#34;chrome crash&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignright size-full wp-image-12966&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We recently received some vindication of our paranoia: we have been resistant to putting all of our trust into the Google Play app store, despite many obvious advantages. Even though Google Play is probably the most secure of the big app stores, its security approach is rather thin, &lt;a href=&#34;https://jon.oberheide.org/blog/2010/06/28/a-peek-inside-the-gtalkservice-connection/&#34; target=&#34;_blank&#34;&gt;relying mainly on HTTPS with no signature for verification&lt;/a&gt;, and the Five Eyes partnership (NSA, GCHQ, etc) noticed this, and &lt;a href=&#34;https://firstlook.org/theintercept/2015/05/21/nsa-five-eyes-google-samsung-app-stores-spyware&#34; target=&#34;_blank&#34;&gt;worked to exploit it&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Android/Google Play security model is relatively simple, and that is mostly a good thing. There are two essential pieces: the signature on the APK file itself and the TLS connection to Google that provides the APK file. Once an app is installed, all APK files used to update an app must have a matching signing key. That provides a reasonably strong mechanism to defend against malware that wants to install over existing apps.&lt;/p&gt;

&lt;p&gt;Unlike package systems like Debian, there is no path to verify that the APK signing key. That means Google Play relies heavily on the TLS transport encryption to protect the APK files for when installing an Android apps for the first time. The first time an app is installed, the signing key in that app’s APK file is blindly trusted (this is called “Trust On First Use” or TOFU). It turns out that TOFU has a solid track record for security in the real world. One key aspect of implementing a good TOFU system is to make the first use indistinguishable from any other use, so that it is difficult to target only first uses while ignoring repeat uses. Intercepting repeat uses is very likely to trigger a warning and alert the user that something is wrong.&lt;/p&gt;

&lt;p&gt;Now let’s put together the pieces based on what the Chinese government can do. A few TLS certificate authorities have been caught &lt;a href=&#34;https://arstechnica.com//security/2010/03/govts-certificate-authorities-conspire-to-spy-on-ssl-users/&#34; target=&#34;_blank&#34;&gt;issuing &lt;/a&gt;&lt;a href=&#34;https://arstechnica.com//security/2011/08/earlier-this-year-an-iranian/&#34; target=&#34;_blank&#34;&gt;fake&lt;/a&gt; &lt;a href=&#34;https://arstechnica.com//business/2012/02/critics-slam-ssl-authority-for-minting-cert-used-to-impersonate-sites/&#34; target=&#34;_blank&#34;&gt;certificates&lt;/a&gt;. A company affiliated with CNNIC &lt;a href=&#34;https://arstechnica.com/security/2015/04/google-chrome-will-banish-chinese-certificate-authority-for-breach-of-trust/&#34; target=&#34;_blank&#34;&gt;was caught issuing certificates for Google domains&lt;/a&gt;. A trusted certificate authority can issue usable certificates for any domain, so any computer that trusts CNNIC would trust their fake certificates for Google. That lets the Chinese government transparently Man-in-the-Middle traffic to Google servers. China could then use the Great Firewall to generate targeted malware on the fly, seeing the user credentials that Google Play requires, seeing the list of apps that each user has installed, etc. Then when the targeted user goes to install a new app, the APK file is intercepted, malware is added, then it is re-signed and transparently sent off to the user.&lt;/p&gt;

&lt;p&gt;This targeted malware can be designed to avoid the malware scanners in Google Play, Lookout, etc. since it would be direct addition of code rather than via an exploit. It would be just adding Java classes to the APK. Or alternatively, in combination with some of the signing exploits that have been discovered in Android, like &lt;a href=&#34;http://www.saurik.com/id/19&#34; target=&#34;_blank&#34;&gt;Master Key&lt;/a&gt;, the Great Firewall is able to inject malware into the real APK itself without changing the signature.&lt;/p&gt;

&lt;p&gt;Of course, when Google Play’s TLS connection includes X.509 &lt;a href=&#34;https://www.owasp.org/index.php/Certificate_and_Public_Key_Pinning&#34; target=&#34;_blank&#34;&gt;certificate pinning&lt;/a&gt;, then the above attack would not be possible since the client would have a whitelist of certificate authorities that it trusts for play.google.com, and CNNIC would probably not be on that whitelist. This highlights the importance of pinning certificate authorities in apps that need good security over TLS or HTTPS. All TLS connections &lt;a href=&#34;http://nelenkov.blogspot.com/2012/12/certificate-pinning-in-android-42.html&#34; target=&#34;_blank&#34;&gt;support pinning at the system level&lt;/a&gt; starting in Android 4.2. We are crazy enough to support down to Android 2.3 since there are lots of older Android devices in use, and even &lt;a href=&#34;https://arstechnica.com/gadgets/2014/12/android-2-3-gingerbread-four-years-later-the-os-just-wont-die/&#34; target=&#34;_blank&#34;&gt;new devices being sold with Android 2.3.3&lt;/a&gt;. That means we think about making apps self-contained in terms of security improvements like pinning.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2015/06/sadballs.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2015/06/sadballs-150x300.png&#34; alt=&#34;sad balls&#34; width=&#34;150&#34; height=&#34;300&#34; class=&#34;alignright size-medium wp-image-12969&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2015/06/sadballs-150x300.png 150w, https://guardianproject.info/wp-content/uploads/2015/06/sadballs.png 400w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;It gets worse&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Many indigenous app stores like &lt;a href=&#34;http://cafebazaar.ir&#34; target=&#34;_blank&#34;&gt;Cafe Bazaar&lt;/a&gt; and Xiaomi’s &lt;a href=&#34;http://app.mi.com&#34; target=&#34;_blank&#34;&gt;MiMarket&lt;/a&gt; lack basic protections like TLS, making targeted attacks trivial for governments, or even anyone who gains control of a piece of the network path. These days that is actually easy to do by exploiting home routers, which are &lt;a href=&#34;https://arstechnica.com/security/2015/05/researchers-uncover-self-sustaining-botnets-of-poorly-secured-routers/&#34; target=&#34;_blank&#34;&gt;generally&lt;/a&gt; &lt;a href=&#34;https://arstechnica.com/security/2015/04/no-patch-for-remote-code-execution-bug-in-d-link-and-trendnet-routers/&#34; target=&#34;_blank&#34;&gt;easy&lt;/a&gt; to &lt;a href=&#34;https://arstechnica.com/security/2015/05/the-moose-is-loose-linux-based-worm-turns-routers-into-social-network-bots/&#34; target=&#34;_blank&#34;&gt;exploit&lt;/a&gt;. One of those botnets would easily start looking for app installs in the network traffic, then add exploits accordingly. As long as the first install is easy to detect and the user easy to track, then the malware can transparently inject malware designed to be difficult to detect by malware scanners and people alike.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/11/fdroidheader3.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2013/11/fdroidheader3.png&#34; alt=&#34;fdroidheader3&#34; width=&#34;720&#34; height=&#34;180&#34; class=&#34;alignnone size-full wp-image-11906&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/11/fdroidheader3.png 720w, https://guardianproject.info/wp-content/uploads/2013/11/fdroidheader3-300x75.png 300w&#34; sizes=&#34;(max-width: 720px) 100vw, 720px&#34; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;The Alternative&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://f-droid.org&#34; target=&#34;_blank&#34;&gt;FDroid&lt;/a&gt; also has the key advantage of being designed from the beginning to avoid tracking users, and to use proven methods of delivering software, following the signed repository model of Debian, Ubuntu, etc. but then served over a solid HTTPS channel for increased privacy and a backup layer of security. It is also possible to use privacy proxies like Tor or I2P via the proxy settings. There is no user credentials needed, it is all free software, so FDroid users can even hide themselves from the server delivering the apps, as well as any network observers. Since all APKs are delivered via signed metadata that is verified using a key built into the FDroid client app, there is no risk of getting served malware even if the HTTPS connection is completely and transparently broken.&lt;/p&gt;

&lt;p&gt;As part of our &lt;a href=&#34;https://dev.guardianproject.info/project/bazaar/wiki&#34; target=&#34;_blank&#34;&gt;Bazaar Project&lt;/a&gt;, we have been putting more and more efforts into the FDroid project, and working to make it much easier to use. All Guardian Project apps are available in FDroid, as well as all the core apps that you might need like Firefox, a Twitter client, K-9 email, etc. Tech journalist &lt;a href=&#34;https://medium.com/backchannel/why-i-m-saying-goodbye-to-apple-google-and-microsoft-78af12071bd&#34; target=&#34;_blank&#34;&gt;Dan Gillmor agrees&lt;/a&gt;: free software that respects privacy is not only for the über-geek anymore.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Phishing for developers</title>
      <link>https://guardianproject.github.io/info/2015/02/24/phishing-for-developers/</link>
      <pubDate>Tue, 24 Feb 2015 04:41:29 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2015/02/24/phishing-for-developers/</guid>
      <description>&lt;p&gt;I recently received a very interesting phishing email directed at developers with apps in Google Play. One open question is, how targeted it was: did anyone else get this?&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/File:Trawling_Drawing.jpg&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2015/02/320px-Trawling_Drawing.jpg&#34; alt=&#34;320px-Trawling_Drawing&#34; width=&#34;320&#34; height=&#34;240&#34; class=&#34;alignright size-full wp-image-12873&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2015/02/320px-Trawling_Drawing.jpg 320w, https://guardianproject.info/wp-content/uploads/2015/02/320px-Trawling_Drawing-300x225.jpg 300w&#34; sizes=&#34;(max-width: 320px) 100vw, 320px&#34; /&gt;&lt;/a&gt;&lt;br /&gt;
It turns out that Google has been recently stepping up enforcement of certain terms, so it looks like some people are taking advantage of that. It is a pretty sophisticated or manually targeted phishing email since they got the name of the app, email address, and project name all correct. The one detail that gives it away is that the &lt;code&gt;From:&lt;/code&gt; address uses the fake domain, even though it would have been possible to send the email using the actual Google account in the &lt;code&gt;From:&lt;/code&gt; field. But this likely would have triggered spam and malware detection algorithms. So they took a subtly different approach by using a real Google address in the &lt;code&gt;Reply-To:&lt;/code&gt;. But they were clever enough to use the same sub-domain, &lt;code&gt;gooogle.com.de&lt;/code&gt;, in the From: address as in the phishing link &lt;code&gt;accounts.gooogle.com.de&lt;/code&gt;, following a Google pattern of subdomains. They also included other real Google links for support and as a “follow up” URL.&lt;/p&gt;

&lt;p&gt;When I received this, I didn’t notice the clickable link in the email since I never view HTML email. I forwarded it on to our internal email list where others figured out it was fake. In the HTML version of the email, it has this link from the fake domain &lt;code&gt;accounts.gooogle.com.de&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;p&gt;&lt;b&gt;Your application will be removed&lt;/b&gt; if you do not sign in to the &lt;a
href=&#34;http://accounts.gooogle.com.de/ServiceLogin?service=androiddeveloper&amp;passive=1209600&amp;continue=https://play.google.com/apps/publish/&amp;followup=https://play.google.com/apps/publish/&amp;type=3days&amp;pkg=org.torproject.android&#34;&gt;Developer
Console&lt;/a&gt;
&lt;/pre&gt;

&lt;p&gt;This attacker might have been targeting anyone who would fall for the trick, without really caring what kind of app it was. For any accounts that the attacker got access to, they would be able to change the description text, home page, email address, etc. transparently without raising any particular warning signs. The attacker could place a recommendation in the app descriptions to also install another app, and that app would be the attacker’s malware.&lt;/p&gt;

&lt;p&gt;The attacker could not upload their own updates to an existing app, because Google Play checks uploaded APKs to make sure that the signing keys match the APKs that are already there. The attacker could create a whole new app in that developer’s account, and hope to gain installs since it would be related. Google Play has a standard view to show users apps by the same developer, for example.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Two-factor authentication and beyond&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;If a developer fell for this phishing attack, but had the forethought to have set up &lt;a href=&#34;https://support.google.com/accounts/answer/180744&#34; target=&#34;_blank&#34;&gt;Google 2-Step Verification&lt;/a&gt;, then even if the phisher got the username and password, they would be unable to log into that account since they would not have access to the two-factor SMS or &lt;a href=&#34;https://support.google.com/accounts/answer/1066447&#34; target=&#34;_blank&#34;&gt;Google Authenticator&lt;/a&gt; message. All developer accounts on Google Play should be required to use Google 2-Step Verification. Set it up &lt;strong&gt;now&lt;/strong&gt;, if you have not already!&lt;/p&gt;

&lt;p&gt;We also need to consider the kinds of sophisticated attacks from large state actors that are leaking out to the public. Indeed, many of these attacks are also available for any government to &lt;a href=&#34;https://netzpolitik.org/2014/gamma-finfisher-hacked-40-gb-of-internal-documents-and-source-code-of-government-malware-published/&#34; target=&#34;_blank&#34;&gt;purchase from companies like Finfisher&lt;/a&gt;. And it is only a matter of time before these techniques are widespread and easier, following the rule of “attacks never get worse; they only get better”. This phishing website could also contain malicious Javascript that installs malware that can both log all key strokes in search of passwords, as well as search for known secret caches like Java keystores for Android signing keys, and browser cookies that allow the user to skip two-factor authentication, like the &lt;a href=&#34;https://support.google.com/accounts/answer/2544838&#34; target=&#34;_blank&#34;&gt;cookie from Google’s two-step authentication&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One takeaway here: developers should &lt;strong&gt;never&lt;/strong&gt; keep or use their APK signing keys on a machine that they also use to read email and browse the web.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Full source of the email&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here is the full source of the original email that I received, for those who might be interested in digging deeper. Another detail you can see there is that the email was not sent using Google infrastructure at all.&lt;/p&gt;

&lt;pre&gt;Return-Path: &lt;n&amp;#x6f;&amp;#x72;e&amp;#x70;&amp;#x6c;y&amp;#x2d;&amp;#x64;e&amp;#x76;&amp;#x65;l&amp;#x6f;&amp;#x70;e&amp;#x72;&amp;#x2d;g&amp;#x6f;&amp;#x6f;g&amp;#x6c;&amp;#x65;p&amp;#x6c;&amp;#x61;y&amp;#x40;&amp;#x67;o&amp;#x6f;&amp;#x6f;gl&amp;#x65;.c&amp;#x6f;m.&amp;#x64;e&gt;
X-Spam-Checker-Version: SpamAssassin 3.3.2 (2011-06-06) on
    rodolpho.mayfirst.org
X-Spam-Level: *
X-Spam-Status: No, score=1.3 required=5.0 tests=HTML_MESSAGE,RDNS_NONE
    autolearn=disabled version=3.3.2
X-Original-To: s&amp;#x75;p&amp;#x70;o&amp;#x72;t&amp;#x40;gu&amp;#x61;r&amp;#x64;i&amp;#x61;n&amp;#x70;ro&amp;#x6a;e&amp;#x63;t&amp;#x2e;i&amp;#x6e;f&amp;#x6f;
Delivered-To: gphan&amp;#x73;&amp;#x40;&amp;#x72;&amp;#x6f;&amp;#x64;olpho&amp;#x2e;&amp;#x6d;&amp;#x61;&amp;#x79;&amp;#x66;irst.&amp;#x6f;&amp;#x72;&amp;#x67;
Received: from rodolpho.mayfirst.org (localhost [127.0.0.1])
    by rodolpho.mayfirst.org (Postfix) with ESMTP id 4CFCD5E3D
    for &lt;&amp;#x73;&amp;#x75;&amp;#x70;port@&amp;#x67;&amp;#x75;&amp;#x61;&amp;#x72;dian&amp;#x70;&amp;#x72;&amp;#x6f;&amp;#x6a;ect.&amp;#x69;&amp;#x6e;&amp;#x66;&amp;#x6f;&gt;; Fri, 20 Feb 2015 04:30:50 -0500 (EST)
X-Greylist: delayed 543 seconds by postgrey-1.34 at rodolpho; Fri, 20 Feb 2015
04:30:49 EST
Received: from astra1695.startdedicated.com (unknown [85.25.194.40])
    by rodolpho.mayfirst.org (Postfix) with ESMTP id D74C83CD84
    for &lt;sup&amp;#x70;&amp;#x6f;&amp;#x72;t@g&amp;#x75;&amp;#x61;&amp;#x72;dia&amp;#x6e;&amp;#x70;&amp;#x72;ojec&amp;#x74;&amp;#x2e;&amp;#x69;nfo&gt;; Fri, 20 Feb 2015 04:30:48 -0500 (EST)
Received: from gooogle.com.de (astra1695 [85.25.194.40])
    by astra1695.startdedicated.com (Postfix) with ESMTPA id 209D57C0918
    for &lt;su&amp;#x70;&amp;#x70;or&amp;#x74;&amp;#x40;gua&amp;#x72;&amp;#x64;ia&amp;#x6e;&amp;#x70;ro&amp;#x6a;&amp;#x65;ct.&amp;#x69;&amp;#x6e;fo&gt;; Fri, 20 Feb 2015 10:21:32 +0100 (CET)
Date: Fri, 20 Feb 2015 09:21:32 +0000
To: The Tor Project &lt;&amp;#x73;u&amp;#x70;p&amp;#x6f;rt&amp;#x40;g&amp;#x75;ar&amp;#x64;i&amp;#x61;np&amp;#x72;o&amp;#x6a;e&amp;#x63;&amp;#x74;.&amp;#x69;n&amp;#x66;o&gt;
From: Google Play Developer Support &lt;n&amp;#x6f;r&amp;#x65;p&amp;#x6c;y&amp;#x2d;de&amp;#x76;e&amp;#x6c;o&amp;#x70;e&amp;#x72;-g&amp;#x6f;o&amp;#x67;l&amp;#x65;p&amp;#x6c;a&amp;#x79;@g&amp;#x6f;o&amp;#x6f;g&amp;#x6c;e&amp;#x2e;co&amp;#x6d;.&amp;#x64;e&gt;
Reply-To: Google Play Developer Support &lt;norepl&amp;#x79;&amp;#x2d;&amp;#x64;&amp;#x65;&amp;#x76;&amp;#x65;loper-g&amp;#x6f;&amp;#x6f;&amp;#x67;&amp;#x6c;&amp;#x65;&amp;#x70;lay@go&amp;#x6f;&amp;#x67;&amp;#x6c;&amp;#x65;&amp;#x2e;&amp;#x63;om&gt;
Subject: 7-Day Notification of Google Play Developer Term Violation
Message-ID: &lt;7f7&amp;#x32;&amp;#x35;&amp;#x34;&amp;#x30;087c&amp;#x38;&amp;#x31;&amp;#x66;fe2e&amp;#x61;&amp;#x64;&amp;#x35;6042&amp;#x35;&amp;#x64;&amp;#x30;d477&amp;#x40;&amp;#x67;&amp;#x6f;oogl&amp;#x65;&amp;#x2e;&amp;#x63;om.d&amp;#x65;&gt;
X-Priority: 3
X-Mailer: PHPMailer 5.2.9 (https://github.com/PHPMailer/PHPMailer/)
MIME-Version: 1.0
Content-Type: multipart/alternative;
    boundary=&#34;b1_7f72540087c81ffe2ead560425d0d477&#34;
Content-Transfer-Encoding: 8bit
X-Virus-Scanned: ClamAV using ClamSMTP

--b1_7f72540087c81ffe2ead560425d0d477
Content-Type: text/plain; charset=us-ascii

Hello Google Play Developer,
This is a notification that your application, Orbot: Proxy with Tor, with
package ID org.torproject.android, is currently in violation of our developer
terms.
REASON FOR WARNING: Violation of the spam provisions of the Content Policy.
Please refer to the spam policy help article for more information.
Do not use irrelevant, misleading, or excessive keywords in apps descriptions,
titles, or metadata.
Please refer to the keyword spam policy help article for more information.
Your application will be removed if you do not sign in to the Developer
Console and make modifications to your application&#39;s description to bring it
into compliance within 7 days of the issuance of this notification.If you have
additional applications in your catalog, please also review them for
compliance. Note that any remaining applications found to be in violation will
be removed from the Google Play Store.
Please also consult the Policy and Best Practices and the Developer
Distribution Agreement as you bring your applications into compliance. You can
also review this Google Play Help Center article for more information on this
warning.
All violations are tracked. Serious or repeated violations of any nature will
result in the termination of your developer account, and investigation and
possible termination of related Google accounts.
Regards,
Google Play Team
1600 Amphitheatre Parkway
Mountain View, CA 94043


--b1_7f72540087c81ffe2ead560425d0d477
Content-Type: text/html; charset=us-ascii

&lt;p&gt;Hello Google Play Developer,&lt;/p&gt;
&lt;p&gt;This is a notification that your application, &lt;b&gt;Orbot: Proxy with Tor&lt;/b&gt;,
with package ID &lt;b&gt;org.torproject.android&lt;/b&gt;, is currently in violation of
our developer terms.&lt;br /&gt;
&lt;b&gt;REASON FOR WARNING&lt;/b&gt;: Violation of the spam provisions of the Content
Policy. Please refer to the spam policy help article for more information.&lt;/p&gt;
&lt;p&gt;Do not use irrelevant, misleading, or excessive keywords in apps
descriptions, titles, or metadata.&lt;br /&gt;
Please refer to the keyword spam policy help article for more information.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Your application will be removed&lt;/b&gt; if you do not sign in to the &lt;a
href=&#34;http://accounts.gooogle.com.de/ServiceLogin?service=androiddeveloper&amp;passive=1209600&amp;continue=https://play.google.com/apps/publish/&amp;followup=https://play.google.com/apps/publish/&amp;type=3days&amp;pkg=org.torproject.android&#34;&gt;Developer
Console&lt;/a&gt; and make modifications to your application&amp;#x27;s description to
bring it into compliance within &lt;b&gt;7 days&lt;/b&gt; of the issuance of this
notification.&lt;br&gt;If you have additional applications in your catalog, please
also review them for compliance. Note that any remaining applications found to
be in violation will be removed from the Google Play Store.&lt;/p&gt;
&lt;p&gt;Please also consult the &lt;a
href=&#34;https://support.google.com/googleplay/android-developer/#topic=2364761&#34;&gt;Policy
and Best Practices&lt;/a&gt; and the &lt;a
href=&#34;https://play.google.com/about/developer-distribution-agreement.html&#34;&gt;Developer
Distribution Agreement&lt;/a&gt; as you bring your applications into compliance. You
can also review this Google Play Help Center article for more information on
this warning.&lt;br /&gt;
All violations are tracked. Serious or repeated violations of any nature will
result in the termination of your developer account, and investigation and
possible termination of related Google accounts.&lt;/p&gt;
&lt;p&gt;Regards,&lt;br&gt;
Google Play Team&lt;br&gt;
1600 Amphitheatre Parkway&lt;br&gt;
Mountain View, CA 94043&lt;/p&gt;



--b1_7f72540087c81ffe2ead560425d0d477--
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Complete, reproducible app distribution achieved!</title>
      <link>https://guardianproject.github.io/info/2015/02/11/complete-reproducible-app-distribution-achieved/</link>
      <pubDate>Wed, 11 Feb 2015 14:51:22 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2015/02/11/complete-reproducible-app-distribution-achieved/</guid>
      <description>&lt;p&gt;With &lt;a href=&#34;https://f-droid.org&#34; target=&#34;_blank&#34;&gt;F-Droid&lt;/a&gt;, we have been working towards getting a complete app distribution channel that is able to reproducibly build each Android app from source. while this may sound like a mundane detail, it does provide lots of tangible benefits. First, it means that anyone can verify that the app that they are using is 100% built from the source code, with nothing else added. That verifies that the app is indeed 100% free, open source software.&lt;/p&gt;

&lt;p&gt;It also verifies that there have not been any malicious bits of code added into the app during the build process. As has been &lt;a href=&#34;https://www.youtube.com/watch?v=5pAen7beYNc&#34; target=&#34;_blank&#34;&gt;demonstrated&lt;/a&gt; in the &lt;a href=&#34;http://events.ccc.de/congress/2014/Fahrplan/events/6240.html&#34; target=&#34;_blank&#34;&gt;31c3 Reproducible Builds talk&lt;/a&gt;, just flipping a single bit is enough to create a usable exploit in an app.&lt;/p&gt;

&lt;p&gt;The F-Droid project is leading the way with its system for publishing verified builds. We know have our first full example, building upon our previous work with making &lt;a href=&#34;https://guardianproject.info/2014/06/09/our-first-deterministic-build-lil-debi-0-4-7/&#34; target=&#34;_blank&#34;&gt;Lil’ Debi build reproducibly&lt;/a&gt;. We started with our simple little utility app &lt;a href=&#34;https://github.com/guardianproject/checkey&#34; target=&#34;_blank&#34;&gt;Checkey&lt;/a&gt; since it has few moving parts (first get one working, then the rest).&lt;/p&gt;

&lt;p style=&#34;float: left&#34; &gt;
  &lt;a href=&#34;https://guardianproject.info/releases/Checkey-0.1.1.apk&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2015/02/ic_launcher-web.png&#34; alt=&#34;Checkey&#34; width=&#34;128&#34; height=&#34;128&#34; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p style=&#34;float: left; text-align: center; line-height: 128px; font-size: 1000%&#34; &gt;
  =
&lt;/p&gt;

&lt;p style=&#34;float: left&#34; &gt;
  &lt;a href=&#34;https://f-droid.org/repo/info.guardianproject.checkey_101.apk&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2015/02/ic_launcher-web.png&#34; alt=&#34;Checkey&#34; width=&#34;128&#34; height=&#34;128&#34; style=&#34;float: right&#34; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p style=&#34;clear: both;&#34;&gt;
  &lt;p&gt;
    When you download Checkey from f-droid.org, you will get an APK that was signed using the official Guardian Project offline signing key that was built by f-droid.org. No, we did not give them a copy of our key, instead, the fdroid publish process now looks for the Binaries: tag in the build recipe. If it sees that, it downloads that APK, then builds the app from source, then checks to make sure that they match using a simple diff of the APK contents and by checking that the signature on the official APK also validates on the APK that f-droid.org built.
  &lt;/p&gt;
  

&lt;p&gt;&lt;p&gt;
    Now that we have our little Checkey working, we can work towards getting all of our apps verifying in the same way, eliminating a whole field of exploits that we have to worry about. You can follow the progress of this work on the F-Droid wiki &lt;a href=&#34;https://f-droid.org/wiki/page/Deterministic,_Reproducible_Builds&#34; target=&#34;_blank&#34;&gt;Reproducible Builds&lt;/a&gt; page, and learn about a future application of it on the &lt;a href=&#34;https://f-droid.org/wiki/page/Verification_Server&#34; target=&#34;_blank&#34;&gt;Verification Server&lt;/a&gt; page.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    The next two apps that are in the reproducible pipeline are &lt;a href=&#34;https://leap.se/&#34; target=&#34;_blank&#34;&gt;LEAP&lt;/a&gt;‘s &lt;a href=&#34;https://gitlab.com/fdroid/fdroiddata/tree/master/metadata/se.leap.bitmaskclient.txt&#34; target=&#34;_blank&#34;&gt;Bitmask&lt;/a&gt; and our &lt;a href=&#34;https://gitlab.com/fdroid/fdroiddata/blob/master/metadata/info.guardianproject.locationprivacy.txt&#34; target=&#34;_blank&#34;&gt;LocationPrivacy&lt;/a&gt;.
  &lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>First working test of IOCipher for Obj-C</title>
      <link>https://guardianproject.github.io/info/2015/01/26/first-working-test-of-iocipher-for-obj-c/</link>
      <pubDate>Mon, 26 Jan 2015 04:32:29 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2015/01/26/first-working-test-of-iocipher-for-obj-c/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://guardianproject.github.io/info/code/iocipher&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2012/10/alberti_cipher_disk-150x150.jpg&#34; alt=&#34;alberti cipher disk&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignright size-thumbnail wp-image-3079&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2012/10/alberti_cipher_disk-150x150.jpg 150w, https://guardianproject.info/wp-content/uploads/2012/10/alberti_cipher_disk.jpg 245w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;Every so often, we revisit our core libraries in the process of improving our existing apps, and creating new ones. IOCipher has become a standard part of our apps since it provides a really easy way to include encrypted file storage in Android apps. And we are now working on spreading it to iOS as well, headed up by Chris Ballinger, with the first preliminary tests of &lt;a href=&#34;https://github.com/ChatSecure/IOCipher-ObjC&#34; target=&#34;_blank&#34;&gt;IOCipher for Obj-C&lt;/a&gt;. Testing and contributions are most welcome! Find us in our &lt;a href=&#34;https://guardianproject.github.io/info/contact/&#34; target=&#34;_blank&#34;&gt;chat room or mailing list&lt;/a&gt; for questions, or just post a comment below! Since the iOS version is based on the exact same core library, libsqlfs, the container files they produce will also be fully compatible with each other.&lt;/p&gt;

&lt;p&gt;Now that iOS 8 has full disk encryption by default and a &lt;a href=&#34;https://www.blackbagtech.com/blog/2014/09/24/ios-8-and-its-impact-on-investigations&#34; title=&#34;iOS 8 and its Impact on Investigations&#34; target=&#34;_blank&#34;&gt;host of other security improvements&lt;/a&gt;, you might be wondering why you would bother with app-specific encryption. The problem with full disk encryption is that the disk is only locked when your iPhone is fully turned off. Using IOCipher adds protection for sensitive data that helps in a few different scenarios.&lt;/p&gt;

&lt;p&gt;First, full disk encryption does not protect the data at all if malware is able to get root on the device. That malware will be free to read all files on the device. Second, for people who have not set up a strong passphrase on their iOS device, using app-specific encrypted storage make it harder to access that app’s data on devices with no passcode set, especially if any additional passphrase is stored in the keychain and disallowed from backup, or if it’s just stored in your own memory.&lt;/p&gt;

&lt;p&gt;Third is for added protetion from forensic acquisition systems, which often work using root exploits in order to read the entire filesystem without unlocking the screen&lt;a href=&#34;https://www.elcomsoft.com/news/591.html&#34; target=&#34;_blank&#34;&gt;[1]&lt;/a&gt;&lt;a href=&#34;https://www.elcomsoft.com/news/586.html&#34; target=&#34;_blank&#34;&gt;[2]&lt;/a&gt;&lt;a href=&#34;http://www.htcia.org/2013/12/iphone-forensics-what-you-need-to-know/&#34; target=&#34;_blank&#34;&gt;[3]&lt;/a&gt;. By having an app-specific encrypted file container that is not mounted like a filesystem, then even root cannot directly access the files in the container. Even root needs to get the key in order to unlock the IOCipher container, whether it is in use or not, and getting that key means either a key logger, which means planning ahead, or reading they key from memory if the container is unlocked, which is a more elaborate and targeted attack that full disk acquisition after rooting.&lt;/p&gt;

&lt;p&gt;Now consider that there is a large market 0days, i.e. unpublished exploits, and companies like &lt;a href=&#34;https://netzpolitik.org/2014/gamma-finfisher-hacked-40-gb-of-internal-documents-and-source-code-of-government-malware-published/&#34; target=&#34;_blank&#34;&gt;VUPEN, FinFisher&lt;/a&gt;, and &lt;a href=&#34;https://citizenlab.org/2014/06/backdoor-hacking-teams-tradecraft-android-implant/&#34; target=&#34;_blank&#34;&gt;Hacking Team&lt;/a&gt; making it easy to purchase them, even providing guarantees that one of their exploits will work within 30 days, it seems quite likely that customers of such companies have access to secret root exploits to even iOS 8. While there are ethical and lawful reasons to use software like this, many governments are also using them for &lt;a href=&#34;https://www.eff.org/deeplinks/2012/02/spy-tech-companies-their-authoritarian-customers-part-i-finfisher-and-amesys&#34; target=&#34;_blank&#34;&gt;illegal&lt;/a&gt; &lt;a href=&#34;http://www.economist.com/blogs/pomegranate/2014/07/internet-monitoring-gulf&#34; target=&#34;_blank&#34;&gt;and&lt;/a&gt; &lt;a href=&#34;http://www.theguardian.com/technology/2014/sep/16/wikileaks-finfisher-files-malware-surveillance&#34; target=&#34;_blank&#34;&gt;unethical&lt;/a&gt; &lt;a href=&#34;https://citizenlab.org/2013/03/you-only-click-twice-finfishers-global-proliferation-2/&#34; target=&#34;_blank&#34;&gt;things&lt;/a&gt;. Since we believe that everyone has a right to privacy, to speak freely, and to peaceably protest, it is important to provide protection to people who are unfairly targeted.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.zetetic.net/sqlcipher/open-source/&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2010/05/skitch.png&#34; alt=&#34;SQLCipher&#34; width=&#34;64&#34; height=&#34;72&#34; class=&#34;alignleft size-full wp-image-3613&#34; /&gt;&lt;/a&gt;There is also another key advantage of the IOCipher approach when it comes to mobile devices. IOCipher is ultimately based on SQLite transactions in &lt;a href=&#34;https://www.zetetic.net/sqlcipher/&#34; target=&#34;_blank&#34;&gt;SQLCipher&lt;/a&gt;, which means that it does not require being mounted in the normal sense. There is no open state once a transaction is complete. Each read or write operation is a self-contained SQLite transaction, so if the file system is forcably quit, SQLite’s transactions prevent the whole file system from being corrupted. This is important in mobile operating systems like Android and iOS since any app or process can be killed at any moment without warning. That means that the worst that can happen to an IOCipher volume is a single write command does not get written. The whole file system will not be corrupted if the process is killed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Coming Soon&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When IOCipher is used in conjunction with our &lt;a href=&#34;https://github.com/guardianproject/CacheWord&#34; target=&#34;_blank&#34;&gt;CacheWord&lt;/a&gt; library, it is possible for an app to provide protection even against the &lt;a href=&#34;https://xkcd.com/538/&#34; target=&#34;_blank&#34;&gt;$5 wrench attack&lt;/a&gt;. CacheWord generates a strong passphrase and manages feeding it to IOCipher and SQLCipher. The user provides their own password for encrypting that strong passphrase. That CacheWord file is tiny, and can be rapidly deleted. Once it is gone, the actual passphrase that unlocks the IOCipher encryption is gone, the user’s passphrase will not unlock IOCipher directly. This is something we are working to add in all of our apps, and to also hook it up to panic button triggers. We would be quite happy to see you beat us to it by adding this feature to your app!&lt;/p&gt;

&lt;p&gt;IOCipher with a hardware security module (HSM) aka smartcard would be really nice, since it would provide some measure of added protection without the user setting an app-specific passphrase. HSMs provide write-only private key storage locked by pin code, so even if some was able to get the encrypted file and the pincode, they would not be able to retrieve the key to unlock the encrypted file. The only way to unlock the file would be with the physical device itself, or by finding the key backup, if that existed. This is possible now using an external &lt;a href=&#34;http://www.smartcard-hsm.com/features.html&#34; target=&#34;_blank&#34;&gt;microSD&lt;/a&gt; &lt;a href=&#34;http://www.go-trust.com/nist-adds-go-trusts-sdencrypter-microsd-hsm-to-the-in-process-fips-140-2-module-validation-list/&#34; target=&#34;_blank&#34;&gt;HSM&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CipherKit updates: IOCipher and CacheWord</title>
      <link>https://guardianproject.github.io/info/2014/09/26/cipherkit-updates-iocipher-and-cacheword/</link>
      <pubDate>Fri, 26 Sep 2014 21:39:54 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2014/09/26/cipherkit-updates-iocipher-and-cacheword/</guid>
      <description>

&lt;p&gt;We’ve been on a big kick recently, updating the newest members of our CipherKit family of frameworks: &lt;a href=&#34;https://guardianproject.github.io/info/code/iocipher&#34;&gt;IOCipher&lt;/a&gt; and &lt;a href=&#34;https://github.com/guardianproject/cacheword&#34; target=&#34;_blank&#34;&gt;CacheWord&lt;/a&gt;. There also are is a little news about the original CipherKit framework: &lt;a href=&#34;https://www.zetetic.net/sqlcipher/open-source&#34; title=&#34;SQLCipher for Android&#34; target=&#34;_blank&#34;&gt;SQLCipher-for-Android&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;iocipher-v0-2&#34;&gt;IOCipher v0.2&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.github.io/info/code/iocipher&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2012/10/alberti_cipher_disk-150x150.jpg&#34; alt=&#34;alberti cipher disk&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignright size-thumbnail wp-image-3079&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2012/10/alberti_cipher_disk-150x150.jpg 150w, https://guardianproject.info/wp-content/uploads/2012/10/alberti_cipher_disk.jpg 245w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;IOCipher is a library for storing files in an encrypted virtual disk. It’s API is the exact same as &lt;code&gt;java.io&lt;/code&gt; for working with files, and it does not need root access. That makes it the sibling of SQLCipher-for-Android, both are native Android APIs that wrap the SQLCipher database.&lt;/p&gt;

&lt;p&gt;This round of work focused on making IOCipher more reliable and secure, and easy to integrate with CacheWord. It can now handle files up to 4GB in size, the same as FAT filesystems, and it has much improved performance, especially under concurrent load. There is now also an &lt;code&gt;unmount()&lt;/code&gt; method to lock the database and wipe the key from memory. The central &lt;code&gt;VirtualFileSystem&lt;/code&gt; class is now a singleton, since you can only have a single virtual disk open at a time. Lastly, the IOCipher release now includes binaries for &lt;code&gt;armeabi&lt;/code&gt;, &lt;code&gt;armeabi-v7a&lt;/code&gt;, and &lt;code&gt;x86&lt;/code&gt;. IOCipher v0.2 was built against SQLCipher-for-Android v3.1.0, and that is the minimum recommended version to use.&lt;/p&gt;

&lt;p&gt;Find downloads, example projects, test suites, and more on &lt;a href=&#34;https://guardianproject.github.io/info/code/iocipher&#34;&gt;the IOCipher page&lt;/a&gt;. Follow the development on the &lt;a href=&#34;https://dev.guardianproject.info/projects/iocipher&#34; target=&#34;_blank&#34;&gt;IOCipher project page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;cacheword-v0-1&#34;&gt;CacheWord v0.1&lt;/h2&gt;

&lt;p&gt;Once you are using SQLCipher and IOCipher, then you’ll definitely need to do some password management, and password caching too, since no one wants to type their password again every time they come to an app. That is where CacheWord comes in: it is a library for managing passwords, and it is designed easily feed directly into SQLCipher and IOCipher, or really anything that needs secure password caching.&lt;/p&gt;

&lt;p&gt;Most of this update was about making CacheWord ready to deploy. That means fixing bugs and drastically simplifying it’s dependencies. CacheWord now can be used as a plain jar file or an Android Library Project, and it only depends on &lt;code&gt;android-support-v4.jar&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Part of the process of simplifying CacheWord also involved stripping down the API to only want CacheWord should really handle. The standard API is all in the CacheWordHandler class. So that means that your app has to handle any Notification, and pass it to CacheWord if you want CacheWordService to run in the foreground.&lt;/p&gt;

&lt;p&gt;CacheWord also now dynamically chooses how many iterations of the key derivation function based on the CPU type. That means that new, fast devices, the derived key will be a lot stronger, while on slow, old devices, it won’t take a minute to unlock your app.&lt;/p&gt;

&lt;p&gt;Find downloads, example projects, and more on &lt;a href=&#34;https://guardianproject.github.io/info/code/cacheword&#34;&gt;the CacheWord page&lt;/a&gt;. Follow the development on the &lt;a href=&#34;https://dev.guardianproject.info/projects/cacheword&#34; target=&#34;_blank&#34;&gt;CacheWord project page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;sqlcipher&#34;&gt;SQLCipher&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.zetetic.net/sqlcipher/&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2010/05/skitch.png&#34; alt=&#34;SQLCipher&#34; width=&#34;64&#34; height=&#34;72&#34; class=&#34;alignright size-full wp-image-3613&#34; /&gt;&lt;/a&gt;The upcoming release of SQLCipher-for-Android also has been simplified. It will no longer depend on commons-codec.jar or guava-r09.jar (thanks to Jeff Campbell for submitting those commits!), remove ~8000 methods for those who fear running into the 65k method limit of the classes.dex file. We’ve been working on making the build process be reproducible, so that anyone can verify that the official releases are built only from the source in the git repo, and nothing else has been added. We’re also working on moving the password format conversion code out of CacheWord and into SQLCipher, where it belongs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ChatSecure 13.2: Important Beta!</title>
      <link>https://guardianproject.github.io/info/2014/08/05/chatsecure-13.2-important-beta/</link>
      <pubDate>Tue, 05 Aug 2014 11:35:54 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2014/08/05/chatsecure-13.2-important-beta/</guid>
      <description>&lt;p&gt;Today is the first public beta of ChatSecure v13.2, an important update of the user interface, networking code, and overall stability. We’ve spent the last six months tracking down crashes, memory leaks and performance issues, and have reached a stable, functional point which we want to share for public use. Reliability and simplicity our the goals, as we move towards v14 in the next few months.&lt;/p&gt;

&lt;p&gt;This beta also features a new account setup wizard that we are eager for feedback on. Our goal is to enable new users to have a much simpler experience in setting up ChatSecure to connect to existing or create new accounts. We have also provided a “one-click burner” option to quickly create throwaway accounts, that require Tor and OTR encryption always, for chatting with a single contact or even just a single conversation.&lt;/p&gt;

&lt;div id=&#39;gallery-10&#39; class=&#39;gallery galleryid-12577 gallery-columns-3 gallery-size-thumbnail&#39;&gt;
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2014/08/device-2014-08-05-122247.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2014/08/device-2014-08-05-122247-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2014/08/device-2014-08-05-122226.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2014/08/device-2014-08-05-122226-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2014/08/device-2014-08-05-122048.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2014/08/device-2014-08-05-122048-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;br style=&#34;clear: both&#34; /&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2014/08/device-2014-08-05-122039.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2014/08/device-2014-08-05-122039-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2014/08/device-2014-08-05-121908.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2014/08/device-2014-08-05-121908-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2014/08/sidebar.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2014/08/sidebar-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;br style=&#34;clear: both&#34; /&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2014/08/device-2014-08-05-121532.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2014/08/device-2014-08-05-121532-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;br style=&#39;clear: both&#39; /&gt;
&lt;/div&gt;

&lt;p&gt;We have also removed some features (for now), with the goal of focus on stripping down the experience, and then building it back up again. For example, there is now ONE contact list, that merges all contacts from all accounts together. It can be easily searched, and you don’t have to worry about which account is active – you just selected the person you want to communicate with, and we know which account they are associated with.&lt;/p&gt;

&lt;p&gt;We have also removed the ability to manually set presence and status (for now), while we re-think how they should work in a mobile context a bit more. The vast majority of our users do not change either value anyhow, but we do know that smartly managing online vs away, especially if you are logged in from multiple locations to the same account, is important. Expect an update here shortly, and we’d love to have your feedback and fresh ideas on mobile presence.&lt;/p&gt;

&lt;p&gt;You can currently access the beta directly via APK download (below),  through our &lt;a href=&#34;https://guardianproject.info/2014/06/06/automatic-private-distribution-of-our-test-builds/&#34;&gt;F-Droid Test Build “Nightlies” Repo&lt;/a&gt;, or through our &lt;a href=&#34;https://plus.google.com/communities/108480576214602821006&#34;&gt;Google+ Community Beta Access&lt;/a&gt;. We will roll out to our release repos and Google Play public once we get through our initial feedback on the beta.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Download ChatSecure v13.2 Beta 1 Now&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img class=&#34;alignleft size-full wp-image-12579&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2014/08/chatsecure-latest-qr.png&#34; alt=&#34;chatsecure-latest-qr&#34; width=&#34;123&#34; height=&#34;123&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2014/08/chatsecure-latest-qr.png 123w, https://guardianproject.info/wp-content/uploads/2014/08/chatsecure-latest-qr-100x100.png 100w&#34; sizes=&#34;(max-width: 123px) 100vw, 123px&#34; /&gt;&lt;br /&gt;
APK: &lt;a href=&#34;https://guardianproject.info/releases/ChatSecure-v13.2.0-BETA-1.apk&#34;&gt;https://guardianproject.info/releases/ChatSecure-v13.2.0-BETA-1.apk&lt;br /&gt;
&lt;/a&gt;&lt;br /&gt;
PGP Sig: &lt;a href=&#34;https://guardianproject.info/releases/ChatSecure-v13.2.0-alpha-10.apk.asc&#34;&gt;https://guardianproject.info/releases/ChatSecure-v13.2.0-alpha-10.apk.asc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;The source is tagged here: &lt;a href=&#34;https://github.com/guardianproject/ChatSecureAndroid/releases/tag/13.2.0-beta-1&#34;&gt;https://github.com/guardianproject/ChatSecureAndroid/releases/tag/13.2.0-beta-1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The release includes fixes from our completed &lt;a href=&#34;https://dev.guardianproject.info/projects/gibberbot/issues?utf8=%E2%9C%93&amp;amp;set_filter=1&amp;amp;f%5B%5D=fixed_version_id&amp;amp;op%5Bfixed_version_id%5D=%3D&amp;amp;v%5Bfixed_version_id%5D%5B%5D=102&amp;amp;f%5B%5D=&amp;amp;c%5B%5D=tracker&amp;amp;c%5B%5D=status&amp;amp;c%5B%5D=priority&amp;amp;c%5B%5D=subject&amp;amp;c%5B%5D=assigned_to&amp;amp;c%5B%5D=updated_on&amp;amp;c%5B%5D=due_date&amp;amp;group_by=&#34;&gt;v13 milestone&lt;/a&gt;, and our &lt;a href=&#34;https://dev.guardianproject.info/versions/121&#34;&gt;v14 milestone “Armadillo’s Agram”&lt;/a&gt;, which you can view on our project tracker (&lt;a href=&#34;https://dev.guardianproject.info/projects/gibberbot/&#34;&gt;https://dev.guardianproject.info/projects/gibberbot/&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing TrustedIntents for Android</title>
      <link>https://guardianproject.github.io/info/2014/07/30/introducing-trustedintents-for-android/</link>
      <pubDate>Wed, 30 Jul 2014 23:29:23 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2014/07/30/introducing-trustedintents-for-android/</guid>
      <description>

&lt;p&gt;Following up on &lt;a href=&#34;https://guardianproject.info/2014/01/21/improving-trust-and-flexibility-in-interactions-between-android-apps/&#34;&gt;our research on secure Intent interactions&lt;/a&gt;, we are now announcing the first working version of the &lt;a href=&#34;https://github.com/guardianproject/TrustedIntents&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;TrustedIntents&lt;/em&gt;&lt;/a&gt; library for Android. It provides methods for checking any Intent for whether the sending and receiving app matches a specified set of trusted app providers. It does this by “pinning” to the signing certificate of the APKs. The developer includes this “pin” in the app, which includes the signing certificate to trust, then &lt;em&gt;TrustedIntents&lt;/em&gt; checks &lt;code&gt;Intent&lt;/code&gt;s against the configured certificate pins. The library includes pins for the Guardian Project and Tor Project signing certificates. It is also easy to generate the pin using our new utility &lt;a href=&#34;https://github.com/guardianproject/checkey&#34; target=&#34;_blank&#34;&gt;Checkey&lt;/a&gt; (available in &lt;a href=&#34;https://guardianproject.info/2014/06/30/new-official-guardian-project-app-repo-for-fdroid/&#34; target=&#34;_blank&#34;&gt;our FDroid repo&lt;/a&gt; and in &lt;a href=&#34;https://play.google.com/store/apps/details?id=info.guardianproject.checkey&#34; target=&#34;_blank&#34;&gt;Google Play&lt;/a&gt;).&lt;/p&gt;

&lt;div id=&#34;attachment_12560&#34; style=&#34;width: 310px&#34; class=&#34;wp-caption alignright&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2014/07/checkey-phone.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12560&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2014/07/checkey-phone-300x168.png&#34; alt=&#34;Checkey displaying the signing certificate of ChatSecure&#34; width=&#34;300&#34; height=&#34;168&#34; class=&#34;size-medium wp-image-12560&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2014/07/checkey-phone-300x168.png 300w, https://guardianproject.info/wp-content/uploads/2014/07/checkey-phone-1024x576.png 1024w, https://guardianproject.info/wp-content/uploads/2014/07/checkey-phone-100x56.png 100w, https://guardianproject.info/wp-content/uploads/2014/07/checkey-phone-150x84.png 150w, https://guardianproject.info/wp-content/uploads/2014/07/checkey-phone-200x112.png 200w, https://guardianproject.info/wp-content/uploads/2014/07/checkey-phone-450x253.png 450w, https://guardianproject.info/wp-content/uploads/2014/07/checkey-phone-600x337.png 600w, https://guardianproject.info/wp-content/uploads/2014/07/checkey-phone-900x506.png 900w, https://guardianproject.info/wp-content/uploads/2014/07/checkey-phone.png 1280w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-12560&#34; class=&#34;wp-caption-text&#34;&gt;
    Checkey displaying the signing certificate of ChatSecure
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;We hope to make this process as dead simple as possible by providing developers with this library. &lt;em&gt;TrustedIntents&lt;/em&gt; is currently set up as an “Android Library Project” but it could easily be a jar too, the code is currently quite simple, the plan is to add more convenience methods and also support for TOFU/POP in addition to pinning. For usage examples, check out &lt;a href=&#34;https://github.com/guardianproject/TrustedIntentsExample&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;TrustedIntentsExample&lt;/em&gt;&lt;/a&gt; and the test project under the test/ subdir of the &lt;em&gt;TrustedIntents&lt;/em&gt; library source repo.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;TrustedIntents&lt;/em&gt; source: &lt;a href=&#34;https://github.com/guardianproject/TrustedIntents&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/guardianproject/TrustedIntents&#34;&gt;https://github.com/guardianproject/TrustedIntents&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;example project: &lt;a href=&#34;https://github.com/guardianproject/TrustedIntentsExample&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/guardianproject/TrustedIntentsExample&#34;&gt;https://github.com/guardianproject/TrustedIntentsExample&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;wiki, issue tracker, etc: &lt;a href=&#34;https://dev.guardianproject.info/projects/trustedintents/wiki&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://dev.guardianproject.info/projects/trustedintents/wiki&#34;&gt;https://dev.guardianproject.info/projects/trustedintents/wiki&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Checkey&lt;/em&gt; source: &lt;a href=&#34;https://github.com/guardianproject/Checkey&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/guardianproject/Checkey&#34;&gt;https://github.com/guardianproject/Checkey&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Checkey&lt;/em&gt; includes a simple method for generating the certificate pins. The pin is in the format of Java subclass of &lt;code&gt;ApkSignaturePin&lt;/code&gt;, which provides all needed utility functions. The create the pin file, first install the app whose certificate you want to trust. Be sure to get it from a trusted source since you are going to be trusting the signing certificate of the APK that you have installed. Launch &lt;em&gt;Checkey&lt;/em&gt; and select that app in the list, you will see the certificate details show up on the top. To generate the .java file for pinning Intents, select &lt;strong&gt;Generate Pin&lt;/strong&gt; from the menu and send the resulting file to yourself. That file is the pin, include it in your project, then load it into TrustedIntents by doing in &lt;code&gt;onCreate()&lt;/code&gt; or wherever is appropriate:&lt;br /&gt;
&lt;code&gt;&amp;lt;br /&amp;gt;
TrustedIntents ti = TrustedIntents.get(context);&amp;lt;br /&amp;gt;
ti.isTrustedSigner(MySigningCertificatePin.class);&amp;lt;br /&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;div id=&#34;attachment_12565&#34; style=&#34;width: 610px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2014/07/checkey-generate-pin.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12565&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2014/07/checkey-generate-pin.png&#34; alt=&#34;How to generate a pin file with Checkey&#34; width=&#34;600&#34; height=&#34;444&#34; class=&#34;size-medium wp-image-12565&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2014/07/checkey-generate-pin-300x222.png 300w, https://guardianproject.info/wp-content/uploads/2014/07/checkey-generate-pin-100x74.png 100w, https://guardianproject.info/wp-content/uploads/2014/07/checkey-generate-pin-150x111.png 150w, https://guardianproject.info/wp-content/uploads/2014/07/checkey-generate-pin-200x148.png 200w, https://guardianproject.info/wp-content/uploads/2014/07/checkey-generate-pin-450x334.png 450w, https://guardianproject.info/wp-content/uploads/2014/07/checkey-generate-pin-600x445.png 600w&#34; sizes=&#34;(max-width: 600px) 100vw, 600px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-12565&#34; class=&#34;wp-caption-text&#34;&gt;
    How to generate a pin file with Checkey
  &lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&#34;gathering-all-the-edge-cases&#34;&gt;Gathering all the edge cases&lt;/h3&gt;

&lt;p&gt;One of the things I’ve focused on in the &lt;em&gt;TrustedIntents&lt;/em&gt; library is thinking about all the possible edge cases and how to check for them. It is rare that the main part of a security check algorithm fails, its almost always the edge cases that are the gotcha.&lt;/p&gt;

&lt;p&gt;One example: &lt;em&gt;TrustedIntents&lt;/em&gt; should properly check all signing certificates on an APK. From what I’ve seen, it is rare that APKs are signed by more than one certificate, but the spec allows for that. There might be exploits related to not handling that.&lt;/p&gt;

&lt;p&gt;Another thing is that &lt;em&gt;TrustedIntents&lt;/em&gt; uses the method that the Android code uses for comparing signatures: it does a byte-by-byte comparison of the signature byte arrays. Some apps area already doing something similar based on the hash of the signing certificate (i.e. the “fingerprint”). The Android technique will also be faster than hashing since the hash algorithm has to read the whole signature byte array anyway.&lt;/p&gt;

&lt;p&gt;We’d love to have feedback, flames, comments, etc on any and all of this. &lt;a href=&#34;https://guardianproject.info/contact/&#34;&gt;Let us know&lt;/a&gt; how it works for you!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>New Official Guardian Project app repo for FDroid!</title>
      <link>https://guardianproject.github.io/info/2014/06/30/new-official-guardian-project-app-repo-for-fdroid/</link>
      <pubDate>Mon, 30 Jun 2014 20:26:39 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2014/06/30/new-official-guardian-project-app-repo-for-fdroid/</guid>
      <description>

&lt;p&gt;We now have an official &lt;a href=&#34;https://f-droid.org&#34; target=&#34;_blank&#34;&gt;FDroid&lt;/a&gt; app repository that is available via three separate methods, to guarantee access to a trusted distribution channel throughout the world! To start with, you must have FDroid installed. Right now, I recommend using the latest test release since it has support for Tor and .onion addresses (earlier versions should work for non-onion addresses):&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://f-droid.org/repo/org.fdroid.fdroid_710.apk&#34;&gt;https://f-droid.org/repo/org.fdroid.fdroid_710.apk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In order to add this repo to your FDroid config, you can either click directly on these links on your devices and FDroid will recognize them, or you can click on them on your desktop, and you will be presented with a QR Code to scan. Here are your options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTTPS: &lt;a href=&#34;https://guardianproject.info/fdroid/repo?fingerprint=B7C2EEFD8DAC7806AF67DFCD92EB18126BC08312A7F2D6F3862E46013C7A6135&#34;&gt;https://guardianproject.info/fdroid/repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tor Hidden Service aka onion address: &lt;a href=&#34;http://bdf2wcxujkg6qqff.onion/fdroid/repo?fingerprint=B7C2EEFD8DAC7806AF67DFCD92EB18126BC08312A7F2D6F3862E46013C7A6135&#34;&gt;http://bdf2wcxujkg6qqff.onion/fdroid/repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Amazon AWS S3 Bucket (&lt;em&gt;this does not show up in a browser&lt;/em&gt;): &lt;a href=&#34;https://s3.amazonaws.com/guardianproject/fdroid/repo?fingerprint=B7C2EEFD8DAC7806AF67DFCD92EB18126BC08312A7F2D6F3862E46013C7A6135&#34;&gt;https://s3.amazonaws.com/guardianproject/fdroid/repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;From here on out, our old FDroid repo (&lt;a href=&#34;https://guardianproject.info/repo&#34;&gt;https://guardianproject.info/repo&lt;/a&gt;) is considered deprecated and will no longer be updated. It will eventually be removed. Update to the new one!&lt;/p&gt;

&lt;p&gt;Also, if you missed it before, all of our test builds are also &lt;a href=&#34;https://guardianproject.info/2014/06/06/automatic-private-distribution-of-our-test-builds/&#34;&gt;available for testing only via FDroid&lt;/a&gt;. Just remember, the builds in the test repo are only debug builds, not fully trusted builds, so use them for testing only.&lt;/p&gt;

&lt;h3 id=&#34;automate-it-all&#34;&gt;Automate it all!&lt;/h3&gt;

&lt;p&gt;This setup has three distribution channels that are all mirrors of a repo that is generated on a fully offline machine. This is only manageable because of lots of new automation features in the &lt;a href=&#34;https://gitlab.com/fdroid/fdroidserver&#34; target=&#34;_blank&#34;&gt;fdroidserver&lt;/a&gt; tools for building and managing app repos. You can now set up a USB thumb drive as the automatic courier for shuffling the repo from the offline machine to an online machine. The repo is generated, updated, and signed using &lt;code&gt;fdroid update&lt;/code&gt;, then those signed files are synced to the USB thumb drive using &lt;code&gt;fdroid server update&lt;/code&gt;. Then the online machine syncs the signed files from that USB thumb drive to multiple servers via SSH and Amazon S3 with a single command: &lt;code&gt;fdroid server update&lt;/code&gt;. The magic is in setting up the config options and letting the tools do the rest.&lt;/p&gt;

&lt;h3 id=&#34;new-repo-signing-key&#34;&gt;New Repo Signing Key&lt;/h3&gt;

&lt;p&gt;For part of this, I’ve completed the process of generating a new, fully offline fdroid &lt;a href=&#34;https://guardianproject.info/home/signing-keys/&#34;&gt;signing key&lt;/a&gt;. So that means there is a new signing key for the FDroid repo, and the old repo signing key is being retired.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://guardianproject.info/releases/guardianproject-rsa4096-fdroid-repo-signing-key.pem&#34;&gt;guardianproject-rsa4096-fdroid-repo-signing-key.pem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://guardianproject.info/releases/guardianproject-rsa4096-fdroid-repo-signing-key.pem.sig&#34;&gt;guardianproject-rsa4096-fdroid-repo-signing-key.pem.sig&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The fingerprints for this signing key are:&lt;/p&gt;

&lt;pre&gt;Owner: EMAILADDRESS=root@guardianp&amp;#x72;&amp;#x6f;&amp;#x6a;&amp;#x65;&amp;#x63;&amp;#x74;&amp;#x2e;&amp;#x69;&amp;#x6e;&amp;#x66;&amp;#x6f;, CN=guardianproject.info, O=Guardian Project, OU=FDroid Repo, L=New York, ST=New York, C=US
Issuer: &amp;#x45;&amp;#x4d;&amp;#x41;ILADD&amp;#x52;&amp;#x45;&amp;#x53;&amp;#x53;=roo&amp;#x74;&amp;#x40;&amp;#x67;&amp;#x75;ardi&amp;#x61;&amp;#x6e;&amp;#x70;&amp;#x72;oject&amp;#x2e;&amp;#x69;&amp;#x6e;&amp;#x66;o, CN=guardianproject.info, O=Guardian Project, OU=FDroid Repo, L=New York, ST=New York, C=US
Serial number: a397b4da7ecda034
Valid from: Thu Jun 26 15:39:18 EDT 2014 until: Sun Nov 10 14:39:18 EST 2041
Certificate fingerprints:
 MD5:  8C:BE:60:6F:D7:7E:0D:2D:B8:06:B5:B9:AD:82:F5:5D
 SHA1: 63:9F:F1:76:2B:3E:28:EC:CE:DB:9E:01:7D:93:21:BE:90:89:CD:AD
 SHA256: B7:C2:EE:FD:8D:AC:78:06:AF:67:DF:CD:92:EB:18:12:6B:C0:83:12:A7:F2:D6:F3:86:2E:46:01:3C:7A:61:35
 Signature algorithm name: SHA1withRSA
 Version: 1
&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Our first deterministic build: Lil’ Debi 0.4.7</title>
      <link>https://guardianproject.github.io/info/2014/06/09/our-first-deterministic-build-lil-debi-0.4.7/</link>
      <pubDate>Mon, 09 Jun 2014 16:41:34 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2014/06/09/our-first-deterministic-build-lil-debi-0.4.7/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://abyss.uoregon.edu/~js/ast123/lectures/lec05.html&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2014/06/determinism.gif&#34; alt=&#34;determinism&#34; width=&#34;206&#34; height=&#34;138&#34; class=&#34;alignright size-thumbnail wp-image-12493&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We just released Lil’ Debi 0.4.7 into the &lt;a href=&#34;https://play.google.com/store/apps/details?id=info.guardianproject.lildebi&#34; target=&#34;_blank&#34;&gt;Play Store&lt;/a&gt; and &lt;a href=&#34;https://f-droid.org/repository/browse/?fdid=info.guardianproject.lildebi&#34; target=&#34;_blank&#34;&gt;f-droid.org&lt;/a&gt;. It is not really different than the 0.4.6 release except in has a new, important property: the APK contents can be reproduced on other machines to the extent that the APK signature can be swapped between the official build and builds that other people have made from source, and this will still be installable. This is known as a “deterministic build” or “reproducible build”: the build process is deterministic, meaning it runs the same way each time, and that results in an APK that is reproducible by others using only the source code. There are some limitations to this, like it has to be built using similar versions of the OpenJDK 1.7 and other build tools, for example. But this process should work on any recent version of Debian or Ubuntu. Please try the process yourself, and let us know if you can verify or not:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/guardianproject/lildebi/wiki/Deterministic-Builds&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/guardianproject/lildebi/wiki/Deterministic-Builds&#34;&gt;https://github.com/guardianproject/lildebi/wiki/Deterministic-Builds&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The ultimate goal here is to make a process that reproduces the APK exactly, bit-for-bit, so that the anyone who runs the process will end up with an APK that has the exact same hash sum. As far as I can tell, the only thing that needs to be fixed in Lil’ Debi’s process is the timestamps in the ZIP format that is the APK container.&lt;/p&gt;

&lt;p&gt;There are a number of other parallel efforts. The Tor Project has written a lot about &lt;a href=&#34;https://blog.torproject.org/category/tags/deterministic-builds&#34; target=&#34;_blank&#34;&gt;their process for reproducible builds for the Tor Browser Bundle&lt;/a&gt;. Debian has made some progress in &lt;a href=&#34;https://wiki.debian.org/ReproducibleBuilds&#34; target=&#34;_blank&#34;&gt;fixing the package builders to make the process deterministic&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tweaking HTTPS for Better Security</title>
      <link>https://guardianproject.github.io/info/2014/02/12/tweaking-https-for-better-security/</link>
      <pubDate>Wed, 12 Feb 2014 19:14:59 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2014/02/12/tweaking-https-for-better-security/</guid>
      <description>&lt;p&gt;The HTTPS protocol is based on TLS and SSL, which are standard ways to negotiate encrypted connections. There is a lot of complexity in the protocols and lots of config options, but luckily most of the config options can be ignored since the defaults are fine. But there are some things worth tweaking to ensure that as many connections as possible are using reliable encryption ciphers while providing &lt;a href=&#34;https://en.wikipedia.org/wiki/Forward_secrecy&#34;&gt;forward secrecy&lt;/a&gt;. A connection with forward secrecy provides protection to past transactions even if the server’s HTTPS private key/certificate is stolen or compromised. This protects your users from large scale network observers that can store all traffic for later decryption, like governments, ISPs, telecoms, etc. From the server operator’s point of view, it means less risk of leaking users’ data, since even if the server is compromised, past network traffic will probably not be able to be encrypted.&lt;/p&gt;

&lt;p&gt;In my situation, I was using our development site, &lt;a href=&#34;https://dev.guardianproject.info&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://dev.guardianproject.info&#34;&gt;https://dev.guardianproject.info&lt;/a&gt;&lt;/a&gt;, as my test bed, it is Apache 2.2 and openssl 1.0.1 running on Ubuntu/precise 12.04 Long-Term Support, so that means that some of the options are more limited since this is an older release. On Debian, Ubuntu and other Debian-derivatives, you’ll only need to edit &lt;code&gt;/etc/apache2/mods-available/ssl.conf&lt;/code&gt;. There are more paranoid resources &lt;a href=&#34;https://community.qualys.com/blogs/securitylabs/2013/08/05/configuring-apache-nginx-and-openssl-for-forward-secrecy&#34; target=&#34;_blank&#34;&gt;for perfectly configuring your TLS&lt;/a&gt;, but we’re not ready to drop support for old browsers that only support SSLv3, and not TLS at all. So I went with this line to enable SSLv3 and TLSv1.0 and newer:&lt;br /&gt;
&lt;code&gt;&amp;lt;br /&amp;gt;
SSLProtocol all -SSLv2&amp;lt;br /&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With TLS connections, the client and the server each present a list of encryption ciphers that represent the ciphers they each support in order of preference. This enables the client and server to choose a cipher that both support. Normally, the client’s list takes precedence over the server’s, but with many browsers that can be changed. Unfortunately it seems that Microsoft Internet Explorer (IE) ignores this and always uses the client’s preference first. Here’s how to make Apache request that the server preferences are preferred:&lt;br /&gt;
&lt;code&gt;&amp;lt;br /&amp;gt;
SSLHonorCipherOrder on&amp;lt;br /&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Next up is tweaking the server’s preference list to put ciphers that enable forward secrecy first (don’t worry if you don’t understand the next stuff about my rationale, my aim is to walk thru the process). This is done in most web servers using openssl-style cipher lists. I started out with &lt;a href=&#34;https://wiki.mozilla.org/Security/Server_Side_TLS&#34; target=&#34;_blank&#34;&gt;what Mozilla recommends&lt;/a&gt;, then pared down the list to remove AES-256 ciphers, since AES-128 is widely regarded to be faster, quite strong, and perhaps &lt;a href=&#34;https://wiki.mozilla.org/Security/Server_Side_TLS#Prioritization_logic&#34; target=&#34;_blank&#34;&gt;more resistant to timing attacks than AES-256&lt;/a&gt;. I also chose to remove RC4-based ciphers, since &lt;a href=&#34;https://wiki.mozilla.org/Security/Server_Side_TLS#RC4_weaknesses&#34; target=&#34;_blank&#34;&gt;RC4 might already be broken&lt;/a&gt;, and will only get worse with time. RC4 has historically been used to mitigate the “BEAST” attack, but that is &lt;a href=&#34;https://community.qualys.com/blogs/securitylabs/2013/09/10/is-beast-still-a-threat&#34; target=&#34;_blank&#34;&gt;mostly happening in the clients now&lt;/a&gt;. So with that I ended up with this cipher list (should be all one line in your config file):&lt;br /&gt;
&lt;code&gt;&amp;lt;br /&amp;gt;
SSLCipherSuite &amp;quot;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-CAMELLIA128-SHA:AES128-GCM-SHA256:AES128-SHA256:AES128-SHA:CAMELLIA128-SHA:DES-CBC3-SHA&amp;quot;&amp;lt;br /&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;One thing to make sure is that all of these ciphers are supported on your system. You can get the list of supported ciphers from &lt;code&gt;openssl ciphers&lt;/code&gt;. I used this command line to get them in a nice, alphabetized list:&lt;br /&gt;
&lt;code&gt;&amp;lt;br /&amp;gt;
openssl ciphers | sed &#39;s,:,\n,g&#39; | sort&amp;lt;br /&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Lastly, we want to set the &lt;a href=&#34;https://www.owasp.org/index.php/HTTP_Strict_Transport_Security&#34; target=&#34;_blank&#34;&gt;HSTS&lt;/a&gt; header to tell the browser to always use HTTPS. To enforce this, a header is added to the collection of HTTP headers delivered when connecting to the HTTPS site. This header tells the client browser to always connect to the current domain using HTTPS. It includes an expiration date (aka &lt;code&gt;max-age&lt;/code&gt;) after which, the client browser will again allow HTTP connections to that domain. The server might then again redirect the HTTP connection to HTTPS, and again the client will get the HSTS header, and use only HTTPS until the expiration date comes again. To include this header in your Apache server, add this line:&lt;br /&gt;
&lt;code&gt;&amp;lt;br /&amp;gt;
Header add Strict-Transport-Security &amp;quot;max-age=15768000;includeSubDomains&amp;quot;&amp;lt;br /&amp;gt;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now you can check the results of your work with Qualys’ handy SSL Test. You can see the result of my efforts here: &lt;a href=&#34;https://www.ssllabs.com/ssltest/analyze.html?d=dev.guardianproject.info&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://www.ssllabs.com/ssltest/analyze.html?d=dev.guardianproject.info&#34;&gt;https://www.ssllabs.com/ssltest/analyze.html?d=dev.guardianproject.info&lt;/a&gt;&lt;/a&gt;. &lt;strong&gt;A-&lt;/strong&gt; is not bad. I tried for a good long while to get IE to use FS (Forward Secrecy) ciphers, but failed. IE does not respect the server-side cipher preferences. My guess is that the only way to get IE to use FS ciphers is to make a custom cipher list that does not include anything but FS ciphers and serve that only to IE. I know it is possible to do because &lt;a href=&#34;https://www.ssllabs.com/ssltest/analyze.html?d=bitbucket.com&amp;s=131.103.20.172&#34; target=&#34;_blank&#34;&gt;bitbucket.com got an &lt;strong&gt;A+&lt;/strong&gt; for doing it&lt;/a&gt;. For a quick way to check out the cipher lists and HSTS header, look at &lt;a href=&#34;https://github.com/iSECPartners/sslyze&#34; target=&#34;_blank&#34;&gt;iSEC Partner’s sslyze&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is only a quick overview of the process to outline the general concepts. To find out more I recommend reading the source articles for this post, including specific directions for nginx and lighttpd:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Mozilla’s &lt;a href=&#34;https://wiki.mozilla.org/Security/Server_Side_TLS&#34; target=&#34;_blank&#34;&gt;Server-side TLS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Qualys’ &lt;a href=&#34;https://community.qualys.com/blogs/securitylabs/2013/08/05/configuring-apache-nginx-and-openssl-for-forward-secrecy&#34; target=&#34;_blank&#34;&gt;Configuring Apache, Nginx, and OpenSSL for Forward Secrecy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Qualys’ &lt;a href=&#34;https://community.qualys.com/blogs/securitylabs/2013/09/10/is-beast-still-a-threat&#34; target=&#34;_blank&#34;&gt;Is BEAST Still a Threat?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.owasp.org/index.php/HTTP_Strict_Transport_Security&#34; target=&#34;_blank&#34;&gt;HTTP Strict Transport Security&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Keys, signatures, certificates, verifications, etc. What are all these for?</title>
      <link>https://guardianproject.github.io/info/2013/12/12/keys-signatures-certificates-verifications-etc.-what-are-all-these-for/</link>
      <pubDate>Thu, 12 Dec 2013 13:20:09 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2013/12/12/keys-signatures-certificates-verifications-etc.-what-are-all-these-for/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/12/key.jpg&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2013/12/key-150x150.jpg&#34; alt=&#34;portable shared security token&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignright size-thumbnail wp-image-12129&#34; /&gt;&lt;/a&gt;For the past two years, we have been thinking about how to make it easier for anyone to achieve private communications. One particular focus has been on the “security tokens” that are required to make private communications systems work. This research area is called internally &lt;a href=&#34;https://dev.guardianproject.info/projects/psst/wiki/PSST&#34; title=&#34;PSST Wiki&#34; target=&#34;_blank&#34;&gt;Portable Shared Security Tokens aka PSST&lt;/a&gt;. All of the privacy tools that we are working on require “keys” and “signatures”, to use the language of cryptography, and these are the core of what “security tokens” are. One thing we learned a lot about is how to portray and discuss tools for private or anonymous communications to people who just want to communicate and are not interested in technical discussion. This is becoming a central issue among a lot of people working to make usable privacy tools.&lt;/p&gt;

&lt;p&gt;The widely established way of talking about privacy tools comes from the lingo of the underlying methods: cryptography, networking, etc. We talk about public and private keys, signing, validation, verification, key exchange, certificates, and fingerprints. In order for cryptography to work, keys need to be marked whether they are verified or not. &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/12/public_key_cryptography_sm.png&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2013/12/public_key_cryptography_sm-300x190.png&#34; alt=&#34;hide the guts of what is happening&#34; width=&#34;300&#34; height=&#34;190&#34; class=&#34;alignleft size-medium wp-image-12135&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/12/public_key_cryptography_sm-300x190.png 300w, https://guardianproject.info/wp-content/uploads/2013/12/public_key_cryptography_sm.png 500w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;Few computers users understand what these terms are referring to, even highly technical people who regularly use encryption do not know the meaning of all these things, nor should they. This is a low level detail that is not important to how the vast majority of users understand privacy in computers. Keys and verification are far too abstract to be generally understandable, and what other kind of key has a fingerprint? Even more so, few people can tell you the difference between validation and verification when it comes to keys, signatures and certificates. The software should not be exposing all this, but instead should be minimizing the complexity as much as possible, and providing as simple a user experience as possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Defining the Concepts that Define the Experience&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;A key part of defining that simple user experience is defining the core concepts that the software is organized around. In our discussions, we mostly talked about the ideas of identity and trust, while some discussion of verifying identity seemed unavoidable. Talking about identity and trust is a lot more relevant in day-to-day life, i.e. knowing that the message came from the person you think it did, and trusting that it was private. It is most direct to talk about establishing a trusted connection to another person, but that’s not something that crypto can ever promise because there is still the analog gap between the person and the device. These core ideas must represent what is technically possible, so we searched for widely understood concepts that map well to the technical limitations: “a private conversation”, “a trusted app”, “verifiable video”.&lt;/p&gt;

&lt;p&gt;&lt;div id=&#34;attachment_12128&#34; style=&#34;width: 160px&#34; class=&#34;wp-caption alignright&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/12/ecc.jpg&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12128&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/12/ecc-150x150.jpg&#34; alt=&#34;create metaphors based on what users know&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;size-thumbnail wp-image-12128&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/12/ecc-150x150.jpg 150w, https://guardianproject.info/wp-content/uploads/2013/12/ecc-300x300.jpg 300w, https://guardianproject.info/wp-content/uploads/2013/12/ecc.jpg 350w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;p id=&#34;caption-attachment-12128&#34; class=&#34;wp-caption-text&#34;&gt;
    create metaphors based on what users know
  &lt;/p&gt;
&lt;/div&gt;Diving in deeper, we concluded that the balance point between technical accuracy and widely understandable lingo was to talk about trusting the device, not the person. The technology can provide trusted connections between devices, and it is pretty close to how people experience digital communications. There is the laptop, the mobile phone, the net cafe, the friend’s computer, computer at work, etc. etc. When I look at my phone to see a message from a friend, it is easy to picture that friend typing that message out on that device, though it does take some conscious effort. The hard part here is that as we communicate more and more with our devices, there is less and less separation in our minds about whether we were talking in person, via voice, or by sending text. This is a point to focus on when thinking about designing the experience of private, secure communications software.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Let the Software Handle It!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There is a forming consensus in the world of usable security to focus on figuring out how to automate as much as possible then figure out how best tailor the experience of the essential parts that cannot be automated. The hard part will remain explaining the limitations of a given privacy tool.&lt;/p&gt;

&lt;p&gt;At Guardian Project, we work a lot on incremental progress, so many of our projects are focused on specific, narrow improvements. With &lt;a href=&#34;https://guardianproject.info/apps/chatsecure/&#34; target=&#34;_blank&#34;&gt;ChatSecure&lt;/a&gt; and &lt;a href=&#34;https://guardianproject.info/apps/keysync/&#34; target=&#34;_blank&#34;&gt;Keysync&lt;/a&gt; , we were able to automate one small part of the whole process, cryptography identity portability, which provides the foundation to provide private communications and verifiable media. Allowing users to sync their trust profiles between desktop and mobile makes it much more likely that users will have fully verified OTR conversations when chatting on their devices and laptops.&lt;/p&gt;

&lt;p&gt;With &lt;a href=&#34;https://guardianproject.info/code/gnupg/&#34; target=&#34;_blank&#34;&gt;Gnu Privacy Guard for Android (GPGA)&lt;/a&gt;, we have made it easy to import keys via QRCode as well as &lt;code&gt;openpgp4fpr:&lt;/code&gt; URLs (a standard defined in conjuction with the &lt;a href=&#34;http://web.monkeysphere.info/&#34; title=&#34;Monkeysphere Home Page&#34; target=&#34;_blank&#34;&gt;Monkeysphere&lt;/a&gt; project. We are also working on a common method of using NFC for OpenPGP key signing in conjuction with &lt;a href=&#34;http://sufficientlysecure.org/index.php/openpgp-keychain/&#34; title=&#34;OpenPGP Keychain home page&#34; target=&#34;_blank&#34;&gt;OpenPGP Keychain&lt;/a&gt;. Even little things like optimizing support for standard file extensions can go a long way to make things easier, so GPGA automatically sets itself up to receive files with the &lt;a href=&#34;https://tools.ietf.org/html/rfc2015&#34; target=&#34;_blank&#34;&gt;standard OpenPGP MIME types&lt;/a&gt; (&lt;code&gt;application/pgp-keys&lt;/code&gt;, &lt;code&gt;application/pgp-encrypted&lt;/code&gt;, &lt;code&gt;application/pgp-signature&lt;/code&gt;) as well as the corresponding file extensions (&lt;code&gt;.pkr&lt;/code&gt;, &lt;code&gt;.skr&lt;/code&gt;, &lt;code&gt;.key&lt;/code&gt;, &lt;code&gt;.sig&lt;/code&gt;, &lt;code&gt;.asc&lt;/code&gt;, etc.). That makes it so a user can just click on one of these files, and GPGA will walk them through the whole process, doing as much as possible automatically.&lt;/p&gt;

&lt;p&gt;Another interesting idea that is a big step in this direction is “secure introductions”. The idea is to automatically share trusted identity information when securely communicating with multiple people. For example, whenever you send a signed, encrypted email to multiple people, the email program should include the key fingerprints of each recipient in that email. Then the email program of the people receiving that email should automatically mark those keys as verified if the sender’s key is trusted and the signature is valid. There is not a meaningful amount of detail leaked in this interaction, since the existence of all the people’s keys and email address is already present in a secure email. The tricky part is figuring out how to make it harder for someone to use this maliciously to spread false identity information while keeping things as automatic as possible. This is very much a long term research idea: there are no widespread implementations of it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting keys into your keyring with Gnu Privacy Guard for Android</title>
      <link>https://guardianproject.github.io/info/2013/12/06/getting-keys-into-your-keyring-with-gnu-privacy-guard-for-android/</link>
      <pubDate>Fri, 06 Dec 2013 15:11:53 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2013/12/06/getting-keys-into-your-keyring-with-gnu-privacy-guard-for-android/</guid>
      <description>&lt;p&gt;Now that you can have a full &lt;a href=&#34;https://www.gnupg.org&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;GnuPG&lt;/em&gt;&lt;/a&gt; on your Android device with &lt;a href=&#34;https://play.google.com/store/apps/details?id=info.guardianproject.gpg&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Gnu Privacy Guard&lt;/em&gt;&lt;/a&gt; for Android, the next step is getting keys you need onto your device and included in &lt;em&gt;Gnu Privacy Guard&lt;/em&gt;. We have tried to make it as easy as possible without compromising privacy, and have implemented a few approaches, while working on others. There are a few ways to get this done right now.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Gnu Privacy Guard&lt;/em&gt; registered itself with Android as a handler of all the standard &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc3156.txt&#34; title=&#34;RFC3156: MIME Security with OpenPGP&#34; target=&#34;_blank&#34;&gt;OpenPGP MIME types&lt;/a&gt; (&lt;code&gt;application/pgp-keys&lt;/code&gt;, &lt;code&gt;application/pgp-encrypted&lt;/code&gt;, &lt;code&gt;application/pgp-signature&lt;/code&gt;), as well as all of the OpenPGP and GnuPG file extensions (&lt;code&gt;.pkr&lt;/code&gt; &lt;code&gt;.skr&lt;/code&gt; &lt;code&gt;.key&lt;/code&gt; &lt;code&gt;.sig&lt;/code&gt; &lt;code&gt;.asc&lt;/code&gt; &lt;code&gt;.gpg&lt;/code&gt; &lt;code&gt;.bin&lt;/code&gt;). This means that users just have to share a file to &lt;em&gt;Gnu Privacy Guard&lt;/em&gt; using any of the standard Android methods, these files can be launched from an email attachment, opened from the SD card using a file browser, clicked in the Downloads view, etc.&lt;/p&gt;

&lt;p&gt;So if you want to quickly send your whole public keyring from your laptop to your mobile device, you can just grab the database file directly from &lt;em&gt;GnuPG&lt;/em&gt; and copy it to your SD card. Here is how:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;plug your device into your laptop via USB so you can copy files to the SD card&lt;/li&gt;
&lt;li&gt;find your &lt;em&gt;GnuPG&lt;/em&gt; home folder (on GNU/Linux and Mac OS X, it will be in &lt;code&gt;~/.gnupg/pubring.gpg&lt;/code&gt;, on Windows it is &lt;code&gt;%APPDATA%\gnupg&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;In your &lt;em&gt;GnuPG&lt;/em&gt; home folder, copy &lt;strong&gt;pubring.gpg&lt;/strong&gt; to your device’s SD card&lt;/li&gt;
&lt;li&gt;unmount and unplug your device&lt;/li&gt;
&lt;li&gt;on your device, open your favorite file manager app (&lt;a href=&#34;https://play.google.com/store/apps/details?id=org.openintents.filemanager&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;OI File Manager&lt;/em&gt;&lt;/a&gt;, &lt;em&gt;Astro&lt;/em&gt;, etc)&lt;/li&gt;
&lt;li&gt;go to the SD card&lt;/li&gt;
&lt;li&gt;long-click on &lt;strong&gt;pubring.gpg&lt;/strong&gt; and share it to &lt;em&gt;Gnu Privacy Guard&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;click OK on the Import Keys dialog&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After that, &lt;em&gt;Gnu Privacy Guard&lt;/em&gt; will do the rest. Give is some time to sync to the Contacts database, then you’ll see all of your keys from your desktop are now in your People app and are listed in &lt;em&gt;Gnu Privacy Guard&lt;/em&gt; itself. You can now encrypt files to any of those keys, or verify files signed by any of those keys. Here are a couple screenshots to illustrate key points in the process, using &lt;em&gt;OI File Manager&lt;/em&gt;:&lt;/p&gt;

&lt;p align=&#34;center&#34;&gt;
  &lt;div id=&#34;attachment_12155&#34; style=&#34;width: 209px&#34; class=&#34;wp-caption alignleft&#34;&gt;
    &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-0.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12155&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-0-199x300.png&#34; alt=&#34;send your public keyring file&#34; width=&#34;199&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-12155&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-0-199x300.png 199w, https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-0.png 319w&#34; sizes=&#34;(max-width: 199px) 100vw, 199px&#34; /&gt;&lt;/a&gt;
    
    &lt;p id=&#34;caption-attachment-12155&#34; class=&#34;wp-caption-text&#34;&gt;
      1. send your public keyring file
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/p&gt;

&lt;div id=&#34;attachment_12156&#34; style=&#34;width: 209px&#34; class=&#34;wp-caption alignright&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-1.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12156&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-1-199x300.png&#34; alt=&#34;choose Gnu Privacy Guard to send the file to&#34; width=&#34;199&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-12156&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-1-199x300.png 199w, https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-1.png 319w&#34; sizes=&#34;(max-width: 199px) 100vw, 199px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-12156&#34; class=&#34;wp-caption-text&#34;&gt;
    2. choose &lt;em&gt;Gnu Privacy Guard&lt;/em&gt; to send the file to
  &lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;attachment_12157&#34; style=&#34;width: 209px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-2.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12157&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-2-199x300.png&#34; alt=&#34;click OK to import the key file&#34; width=&#34;199&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-12157&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-2-199x300.png 199w, https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-2.png 319w&#34; sizes=&#34;(max-width: 199px) 100vw, 199px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-12157&#34; class=&#34;wp-caption-text&#34;&gt;
    3. click OK to import the key file
  &lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;attachment_12158&#34; style=&#34;width: 209px&#34; class=&#34;wp-caption alignright&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-3.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12158&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-3-199x300.png&#34; alt=&#34;now you can see the imported keys in Gnu Privacy Guard&#34; width=&#34;199&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-12158&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-3-199x300.png 199w, https://guardianproject.info/wp-content/uploads/2013/12/GPGA-import-key-file-3.png 319w&#34; sizes=&#34;(max-width: 199px) 100vw, 199px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-12158&#34; class=&#34;wp-caption-text&#34;&gt;
    4. now you can see the imported keys in &lt;em&gt;Gnu Privacy Guard&lt;/em&gt;
  &lt;/p&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;There are many ways to get the keyring files like &lt;strong&gt;pubring.gpg&lt;/strong&gt; to your device: you can also share the keyring files via email, chat, or even services like &lt;em&gt;Dropbox&lt;/em&gt; or &lt;em&gt;Google Drive&lt;/em&gt;. Then once the files are on your device, you can import them using the same procedure as above. But keep in mind that you are sending your whole collection of secure contacts to that service, which will have full access to read it. If you have any worries about leaking your keyring to anyone, then a good method is to copy it directly to the SD card.&lt;/p&gt;

&lt;div id=&#34;attachment_12192&#34; style=&#34;width: 209px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-search-keyserver.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12192&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-search-keyserver-199x300.png&#34; alt=&#34;search the keyserver for the author&#39;s key (I lost the key from 1998, so don&#39;t use that one...)&#34; width=&#34;199&#34; height=&#34;300&#34; class=&#34;size-medium wp-image-12192&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/12/GPGA-search-keyserver-199x300.png 199w, https://guardianproject.info/wp-content/uploads/2013/12/GPGA-search-keyserver.png 319w&#34; sizes=&#34;(max-width: 199px) 100vw, 199px&#34; /&gt;&lt;/a&gt;
  
  &lt;p id=&#34;caption-attachment-12192&#34; class=&#34;wp-caption-text&#34;&gt;
    search the keyserver for the author’s key (the key from 1998 is lost, don’t use that one…)
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;You can also search and download keys via the public pool of OpenPGP keyservers. If you already know someone’s keyid or fingerprint, you can search using that. Otherwise, you can search based on name or email address. But be careful! Downloading a key from a keyserver does not give you a key you can trust. Anyone can upload a key to the keyservers, and they can make that key have any name or email address. Downloading from the keyservers is a convenient way to download a key, but you must verify the key’s fingerprint with the person you are trying to find.&lt;/p&gt;

&lt;p&gt;&lt;div id=&#34;attachment_12184&#34; style=&#34;width: 160px&#34; class=&#34;wp-caption alignleft&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/12/0x9F0FE587374BBE81-qr.png&#34;&gt;&lt;img aria-describedby=&#34;caption-attachment-12184&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/12/0x9F0FE587374BBE81-qr-150x150.png&#34; alt=&#34;scan this QR Code to get the author&#39;s OpenPGP key&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;size-thumbnail wp-image-12184&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/12/0x9F0FE587374BBE81-qr-150x150.png 150w, https://guardianproject.info/wp-content/uploads/2013/12/0x9F0FE587374BBE81-qr-300x300.png 300w, https://guardianproject.info/wp-content/uploads/2013/12/0x9F0FE587374BBE81-qr.png 330w&#34; sizes=&#34;(max-width: 150px) 100vw, 150px&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;p id=&#34;caption-attachment-12184&#34; class=&#34;wp-caption-text&#34;&gt;
    scan this QR Code to get the author’s OpenPGP key
  &lt;/p&gt;
&lt;/div&gt;In conjunction with the&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://web.monkeysphere.info/&#34; target=&#34;_blank&#34;&gt;Monkeysphere&lt;/a&gt; project, we developed a standard URI scheme for sending OpenPGP key fingerprints. For example, you can find my key ID here: &lt;a href=&#34;openpgp4fpr:9F0FE587374BBE81&#34;&gt;&lt;code&gt;openpgp4fpr:9F0FE587374BBE81&lt;/code&gt;&lt;/a&gt;. This provides a clickable way to get an OpenPGP key. On an Android device with &lt;em&gt;Gnu Privacy Guard&lt;/em&gt; installed, you can click on this link to download my key from the keyservers. This URI scheme also works well in QR Codes. Scan this QR Code on your device with an app like &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.google.zxing.client.android&#34; title=&#34;Barcode Scanner in the Google Play Store&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;Barcode Scanner&lt;/em&gt;&lt;/a&gt;, and click &lt;strong&gt;Open Browser&lt;/strong&gt;, and Gnu Privacy Guard will download my key to your device.&lt;/p&gt;

&lt;p&gt;There are other ideas out there that we also want to support. For example, &lt;a href=&#34;http://sufficientlysecure.org/index.php/openpgp-keychain/&#34; target=&#34;_blank&#34;&gt;&lt;em&gt;OpenPGP Keychain&lt;/em&gt;&lt;/a&gt; includes a way to transmit the whole public key via &lt;a href=&#34;https://en.wikipedia.org/wiki/Near_field_communication&#34; title=&#34;Near Field Communication&#34; target=&#34;_blank&#34;&gt;NFC&lt;/a&gt;. This allows people can swap keys directly from phone to phone without having internet access at all. But NFC is quite slow to transmit data so the devices need to be held together for a while until the whole key is received. NFC could be used to rapidly transmit an &lt;code&gt;openpgp4fpr:&lt;/code&gt; URI, and then the whole public key would be fetched from a keyserver, but that then requires internet access and also leaks a bit of metadata to the internet. A better technique would be to transmit the entire public key over Bluetooth, using NFC to setup the Bluetooth session. We’re also looking at ways to do this via WiFi and &lt;a href=&#34;https://en.wikipedia.org/wiki/Bonjour_(software)&#34; target=&#34;_blank&#34;&gt;Bonjour (mDNS)&lt;/a&gt; local service advertisements.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Issues when distributing software</title>
      <link>https://guardianproject.github.io/info/2013/10/31/issues-when-distributing-software/</link>
      <pubDate>Thu, 31 Oct 2013 15:51:19 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2013/10/31/issues-when-distributing-software/</guid>
      <description>&lt;p&gt;There is currently a &lt;a href=&#34;http://lists.debian.org/debian-security/2013/10/msg00027.html&#34; target=&#34;_blank&#34;&gt;discussion underway on the Debian-security list&lt;/a&gt; about adding TLS and Tor functionality to the official repositories (repos) of Debian packages that is highlighting how we need to update how we think about the risks when distributing software. Mostly, we are used to thinking about making sure that the software that the user is installing is the same exact software that has been posted for distribution. This is generally handled by signing the software package, then verifying that signature on the user’s machine. This is how it works on Mac OS X, Windows, Debian, etc. etc.&lt;/p&gt;

&lt;p&gt;But the authenticity of a software package is not the only issue that needs to be addressed, especially these days where many companies and governments around the world are trying to track everything that anyone is doing on the internet. In order to understand why Tor and TLS would be useful here, it good to break down the various concerns (or threats if you prefer):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;package authenticity &lt;em&gt;(software can be modified while being downloaded)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;package availability &lt;em&gt;(software security updates can be individually blocked)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;repo availability &lt;em&gt;(internet services can be blocked by governments and companies)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;who’s downloading what package &lt;em&gt;(currently visible to anyone who can see the network traffic, including open wifi, etc.)&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Most people distributing software are used to thinking about #1 verifying packages when thinking about the security of software distribution. #2, #3, and #4 are also important, and currently not well addressed. This is where TLS and Tor come in. Both can help prevent Man-In-The-Middle manipulations as well as reduce the amount of information that is leaked to the network. Tor can also help with #3. Since Tor is difficult to block, it is often uses to circumvent censorship. In this case a software repo could be blocked entirely, and Tor could help with gaining access to it. The Update Framework has &lt;a href=&#34;https://github.com/theupdateframework/tuf/blob/develop/README.md&#34; title=&#34;TUF: The Update Framework -  Security&#34; target=&#34;_blank&#34;&gt;a good overview of the possible attacks&lt;/a&gt; against software repos.&lt;/p&gt;

&lt;p&gt;So having software repos available with both TLS and Tor available as options is a very good idea. As far as I have seen, there are not any Debian repos available via a Tor Hidden Service. There are a number of official mirrors that already support TLS/HTTPS. You can find them using &lt;a href=&#34;https://gist.github.com/eighthave/7285154&#34; title=&#34;the script in a gist paste&#34; target=&#34;_blank&#34;&gt;this script:&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;#!/usr/bin/python

import urllib2
import re
import ssl
import sys

# # find generic mirrors
mirrors = urllib2.urlopen(&#39;http://www.debian.org/mirror/list&#39;)
https = []
for line in mirrors.readlines():
    m = re.match(&#39;.*&amp;lt;td valign=&amp;quot;top&amp;quot;&amp;gt;&amp;lt;a rel=&amp;quot;nofollow&amp;quot; href=&amp;quot;http(.*)&amp;quot;&amp;gt;.*&#39;, line)
    if m:
        url = &#39;https&#39; + m.group(1)
        print &#39;trying: &#39;,
        print url,
        print &#39;...&#39;,
        sys.stdout.flush()
        try:
            response=urllib2.urlopen(url, timeout=1)
            https.append(url)
            print &#39;success!&#39;
        except urllib2.URLError as err:
            print &#39;fail!&#39;
        except ssl.SSLError as err:
            print &#39;bad SSL!&#39;

# print &#39;HTTPS apt repos:&#39;
#for url in https:
#    print url


# # find security mirrors
mirrors = urllib2.urlopen(&#39;http://www.debian.org/mirror/list-full&#39;)
securitys = []
for line in mirrors.readlines():
    m = re.match(&#39;.*&amp;lt;/tt&amp;gt;&amp;lt;br&amp;gt;Security updates over HTTP: &amp;lt;tt&amp;gt;&amp;lt;a rel=&amp;quot;nofollow&amp;quot; href=&amp;quot;http(.*)&amp;quot;&amp;gt;.*/debian-security/&amp;lt;/a&amp;gt;.*&#39;, line)
    if m:
        url = &#39;https&#39; + m.group(1)
        print &#39;trying: &#39;,
        print url,
        print &#39;...&#39;,
        sys.stdout.flush()
        try:
            response=urllib2.urlopen(url, timeout=1)
            securitys.append(url)
            print &#39;success!&#39;
        except urllib2.URLError as err:
            print &#39;fail!&#39;
        except ssl.SSLError as err:
            print &#39;bad SSL!&#39;

# print &#39;HTTPS security repos:&#39;
# for url in securitys:
#     print url


# now find the backports mirrors
mirrors = urllib2.urlopen(&#39;http://backports-master.debian.org/Mirrors/&#39;)
backports = []
for line in mirrors.readlines():
#&amp;lt;td&amp;gt;&amp;lt;a href=&amp;quot;http://be.mirror.eurid.eu/debian-backports/&amp;quot;&amp;gt;/debian-backports/&amp;lt;/a&amp;gt;
    m = re.match(&#39;.*&amp;lt;td&amp;gt;&amp;lt;a href=&amp;quot;http(.*)&amp;quot;&amp;gt;.*/debian-backports/&amp;lt;/a&amp;gt;.*&#39;, line)
    if m:
        url = &#39;https&#39; + m.group(1)
        print &#39;trying: &#39;,
        print url,
        print &#39;...&#39;,
        sys.stdout.flush()
        try:
            response=urllib2.urlopen(url, timeout=1)
            backports.append(url)
            print &#39;success!&#39;
        except urllib2.URLError as err:
            print &#39;fail!&#39;
        except ssl.SSLError as err:
            print &#39;bad SSL!&#39;

#print &#39;HTTPS backports repos:&#39;
#for url in backports:
#    print url


# now find the CD image mirrors
mirrors = urllib2.urlopen(&#39;http://www.debian.org/CD/http-ftp/&#39;)
cds = []
for line in mirrors.readlines():
# &amp;lt;a rel=&amp;quot;nofollow&amp;quot; href=&amp;quot;http://mirror.easyspeedy.com/debian-cd/&amp;quot;&amp;gt;HTTP&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;
    m = re.match(&#39;.*&amp;lt;a rel=&amp;quot;nofollow&amp;quot; href=&amp;quot;http(:.*)&amp;quot;&amp;gt;HTTP&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;.*&#39;, line)
    if m:
        url = &#39;https&#39; + m.group(1)
        print &#39;trying: &#39;,
        print url,
        print &#39;...&#39;,
        sys.stdout.flush()
        try:
            response=urllib2.urlopen(url, timeout=1)
            cds.append(url)
            print &#39;success!&#39;
        except urllib2.URLError as err:
            print &#39;fail!&#39;
        except ssl.SSLError as err:
            print &#39;bad SSL!&#39;

print &#39;HTTPS CD image repos:&#39;
for url in cds:
    print url


# now write everything to a file
f = open(&#39;/tmp/https-debian-archives.txt&#39;, &#39;w&#39;)

f.write(&#39;HTTPS apt repos\n&#39;)
f.write(&#39;---------------\n&#39;)
for url in https:
    f.write(url + &#39;\n&#39;)

f.write(&#39;\n\nHTTPS security repos\n&#39;)
f.write(&#39;---------------\n&#39;)
for url in securitys:
    f.write(url + &#39;\n&#39;)

f.write(&#39;\n\nHTTPS backports repos\n&#39;)
f.write(&#39;--------------------\n&#39;)
for url in backports:
    f.write(url + &#39;\n&#39;)

f.write(&#39;\n\nHTTPS CD image repos\n&#39;)
f.write(&#39;--------------------\n&#39;)
for url in cds:
    f.write(url + &#39;\n&#39;)


f.close()
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Keeping data private means it must be truly deletable!</title>
      <link>https://guardianproject.github.io/info/2013/08/23/keeping-data-private-means-it-must-be-truly-deletable/</link>
      <pubDate>Fri, 23 Aug 2013 17:36:49 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2013/08/23/keeping-data-private-means-it-must-be-truly-deletable/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/08/erase-hard-drive.jpg&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2013/08/erase-hard-drive-150x150.jpg&#34; alt=&#34;deleting data&#34; width=&#34;150&#34; height=&#34;150&#34; class=&#34;alignright size-thumbnail wp-image-11598&#34; /&gt;&lt;/a&gt;There are lots of apps these days that promise to keep your data secure, and even some that promise to wipe away private information mere seconds or minutes after it has been received. It is one thing to keep data out of view from people you don’t want seeing it, it is also important to be able to truly delete information. Unfortunately computers make it very difficult to make data truly disappear. When we tell a computer to delete a file, it only deletes the reference to the data. The data itself remains on the disk unchanged. For any UNIX geek out there, you can easily see an example of that by greping a partition (e.g. &lt;code&gt;sudo grep password /dev/sda3&lt;/code&gt;. To solve this problem, there are “secure delete” options. Secure deletion removes the reference like regular deletion, then wipes the data on the disk by overwriting it with random data. That’s much better, but not always good enough. It turns out that its possible to remove the hard disk and read magnetic residue and recover even wiped data.&lt;/p&gt;

&lt;p&gt;Mobile devices only make that problem worse because they almost always rely on flash memory for disk storage. Flash memory has wear-leveling programming built into it, so it is not possible to guarantee that a file will be wiped without overwriting the whole flash disk, then deleting it all and overwriting the whole thing again. Not only is it not practical to delete the whole disk just to remove one file, it also takes a long time.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2013/08/coldbootattack.jpg&#34;&gt;&lt;img src=&#34;https://guardianproject.info/wp-content/uploads/2013/08/coldbootattack-300x199.jpg&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;199&#34; class=&#34;alignleft size-medium wp-image-11600&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/08/coldbootattack-300x199.jpg 300w, https://guardianproject.info/wp-content/uploads/2013/08/coldbootattack.jpg 1024w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;So what can we do about this? Use encryption! [&lt;a href=&#34;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.225.6872&#34; title=&#34;Secure Data Deletion for USB Flash Memory (2011)&#34; target=&#34;_blank&#34;&gt;1&lt;/a&gt;] If the data is encrypted before its written to either a classic hard drive or flash memory disk, then the actual data is never on the disk itself. If the data is encrypted with a good passphrase, then just “forgetting” the key will make it basically impossible to recover the data. Additionally, encrypted data looks like random data, so it is easy to hide the deleted, encrypted data from the recovery techniques by adding random garbage to the disk. It turns out that with the right architecture, a key can be forgotten quite quickly, much quicker than even the most basic secure deletion.&lt;/p&gt;

&lt;p&gt;This logic is built into our new passphrase library &lt;a href=&#34;https://github.com/guardianproject/cacheword&#34; target=&#34;_blank&#34;&gt;Cacheword&lt;/a&gt;. Cacheword is a library for securely working with and caching passphrases. It plugs right into &lt;a href=&#34;https://guardianproject.info/code/sqlcipher&#34; target=&#34;_blank&#34;&gt;SQLCipher for Android&lt;/a&gt; and &lt;a href=&#34;https://guardianproject.info/code/iocipher&#34; target=&#34;_blank&#34;&gt;IOCipher&lt;/a&gt;. SQLCipher and IOCipher are both ways for easily storing data using strong AES-256 encryption. Cacheword then handles getting the passphrase from the user. Instead of feeding that passphrase directly to SQLCipher or IOCipher, it creates an encrypted file for storing a strong AES-256 key and that is what is used to lock SQLCipher and IOCipher. The user’s passphrase then just unlocks that encrypted key file.&lt;/p&gt;

&lt;p&gt;The means you can get rapid deletion of data stores of any size by just deleting the key file. The user never sees the actual key so they cannot divulge it. Since the user’s passphrase is not the key for the data but instead the key to the Cacheword key file, the secure deletion can first focus on that key file. The key file is small, so that can happen very quickly. Then even if the data files are recovered, the user does not has the passphrase to the data, its only locked away in the now deleted key file. The key was stored encrypted, so a standard deletion will provide decent protection: it will look like random data on the disk.&lt;/p&gt;

&lt;p&gt;To really ensure the key and the data is gone for good, an app can implement a full wiping procedure. Normal wiping procedures can follow as a background task, making it harder and harder to recover the data, no matter who the adversary is. The full wiping procedure would go something like this (with a rough timeframe for each step):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Cacheword wipes the passphrase from memory (nanoseconds to milliseconds)&lt;/li&gt;
&lt;li&gt;the Cacheword key file is deleted (milliseconds)&lt;/li&gt;
&lt;li&gt;write random garbage to disk patterned after the key file to obscure the deleted key file (milliseconds to minutes)&lt;/li&gt;
&lt;li&gt;delete the SQLCipher/IOCipher data files (seconds to minutes)&lt;/li&gt;
&lt;li&gt;fill entire memory (RAM) with random garbage (minutes to hours)&lt;/li&gt;
&lt;li&gt;fill entire disk with random garbage (hours)&lt;/li&gt;
&lt;li&gt;power off device&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s the overview of the process. But of course, there are always annoying technical details, and I’ll continue on about some of them, for those who like such things.&lt;/p&gt;

&lt;p&gt;To start with, the user’s passphrase will most likely be stored in memory by code outside of Cacheword, SQLCipher, and IOCipher. For example, the Android text entry widget will have the passphrase pass thru it, and inevitably will store that data in memory. It is up to the garbage collection to remove that from memory, and the garbage collection might not zero out the memory before deallocating it. We’re still looking into ideas for how to trigger that, and would love to hear suggestions.&lt;/p&gt;

&lt;p&gt;To truly wipe the data from the disk, there would need to be multiple passes where the entire disk is filled up then the entire disk is deleted. That is rarely practical. So hiding the existence of the encrypted data stores is difficult to do in practice. The encrypted data will remain encrypted with AES-256 using a random, full length key, so it would be basically impossible to crack using publicly known technology and techniques.&lt;/p&gt;

&lt;p&gt;The best bet for preventing the most advanced adversary from getting the deleted data would involve a few cycles of rebooting, filling up the memory and disk with random garbage after doing the procedure outlined above. A more rapid version of that would be to delay filling the disk until after a reboot. That would ensure that the key to the data is thoroughly wiped as quickly as possible before starting in on the much less important and long lasting task of wiping the entire disk to hide the deleted data files.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Our Newest App: PixelKnot</title>
      <link>https://guardianproject.github.io/info/2013/07/18/our-newest-app-pixelknot/</link>
      <pubDate>Thu, 18 Jul 2013 13:14:49 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2013/07/18/our-newest-app-pixelknot/</guid>
      <description>&lt;p&gt;Have you ever hidden in plain sight? Worn camouflage in the woods or an invisibility cloak in a narrow crooked alley? It’s really hard to do properly. We’re hoping that all changes with PixelKnot.&lt;/p&gt;

&lt;p&gt;PixelKnot is an app for hiding secret messages in pictures.  Sort of like invisible ink on the back of a painting, updated to the present.  The ancient art known as steganography, now updated for the 21st century and requiring a more rigorous set of safety standards.&lt;/p&gt;

&lt;p&gt;The idea is to let anyone, anywhere share a secret with a friend. To most people, all they see is a picture. But to the right person, they know that someone has left them a message in that picture using PixelKnot. And they can find the message by opening that same picture in PixelKnot. Some people will even add a password to add another layer of protection to make sure that the message only ends up with the right person. And even if the message is detected, it’s also encrypted, making it that much harder to decode.&lt;/p&gt;

&lt;p&gt;While hiding in plain sight using the app is easy, the app itself isn’t.  To define it, we’ve established the Guardian Project steganography standard. The approach of using steganography has some known limitations, but to be secure and reliable, for us the steganographed image must:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Have the original image appear, to the trained human eye, unedited.&lt;/li&gt;
&lt;li&gt;Have the bytes of the image appear, to a trained analyst, undistorted so much so as to arouse suspicion.&lt;/li&gt;
&lt;li&gt;Have the complete message be recoverable no matter how it is transmitted.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As recent media stories have shown, large scale analysis is becoming a reality with increasing speed. Our standard seeks to ensure that our pictures, and the messages inside, can’t be plucked out like a needle in a haystack.  Another issue is that a lot of social media sites shrink and distort images that users upload.  This breaks our cipher since it’s technically a different image than what the User uploaded.  We’re fixing it so that it’s not a problem.  Already it works across Flickr, Tumblr and Google+,  with Facebook in the pipeline.&lt;/p&gt;

&lt;p&gt;To build the steganography into the app, we used the &lt;a title=&#34;f5 steganography&#34; href=&#34;https://code.google.com/p/f5-steganography/&#34; target=&#34;_blank&#34;&gt;F5 algorithm&lt;/a&gt;, which is resistant to visual and statistical attacks. Yet it still offers a large steganographic capacity, by using matrix encoding to improve the efficiency of embedding. F5 uses permutative straddling to uniformly spread out the changes over the whole steganogram, which helps us maintain the standards mentioned above that keep the messages from being detected.&lt;/p&gt;

&lt;p&gt;How safe is safe, you might be wondering? We’ve been running tests on images created by PixelKnot using &lt;a title=&#34;Stegdetect&#34; href=&#34;http://www.outguess.org/detection.php&#34; target=&#34;_blank&#34;&gt;Stegdetect&lt;/a&gt;, an automated tool for detecting steganographic content in images. It’s capable of detecting several different steganographic methods to embed hidden information in JPEG images. We trimmed it down to target f5 specifically. The results have been promising, though not 100%.&lt;/p&gt;

&lt;p&gt;One goal we had while building the app was to transform the user experience of security and to see how easy and fun we could make the sharing of hidden messages.  The app starts by deciphering an image if there is text hidden inside already. If not,  it chooses enciphering, asking whether to take a photo or use one from a gallery. Why add unnecessary prompts asking users what they want to do, when there’s only one thing to do? A user can only move forward through the flow of the experience. In this way, we’re trying to increase security through a guided experience. If done properly and transparently, giving the user less options for navigation mean less ways to fail.&lt;/p&gt;

&lt;p&gt;Is hiding messages in pictures the best way to spread secrets so that only the right person hears it? We don’t know.  At times in history, it’s been the only option, like between kings. At other times, it’s merely been used for fun, like scavenger hunts. For PixelKnot, we wanted to make something that could work in both scenarios o. But it’s up to users to decide.&lt;/p&gt;

&lt;p&gt;We hope to share stories of people using PixelKnot in fun new ways.  If you have a idea or experience, please share it with us. We’d also like to add more features to PixelKnot that make strides both in security and in design, so your feedback is important– what would you most like to see? Until then, happy knotting!&lt;/p&gt;

&lt;p&gt;Learn more about the app on &lt;a href=&#34;https://guardianproject.info/apps/pixelknot/&#34; title=&#34;pixelknot&#34;&gt;our site&lt;/a&gt;, or get it directly &lt;a title=&#34;Pixelknot on Google Play&#34; href=&#34;https://play.google.com/store/apps/details?id=info.guardianproject.pixelknot&#34; target=&#34;_blank&#34;&gt;from Google Play&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Weather Report On Security</title>
      <link>https://guardianproject.github.io/info/2013/06/14/a-weather-report-on-security/</link>
      <pubDate>Fri, 14 Jun 2013 13:22:28 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2013/06/14/a-weather-report-on-security/</guid>
      <description>&lt;p&gt;How’s the weather outside? Sunny with a chance of IP blocking.&lt;/p&gt;

&lt;p&gt;We recently launched a new initiative we’re calling: &lt;a href=&#34;https://guardianproject.info/code/weatherrepo/&#34; title=&#34;The Weather Repo&#34;&gt;The Weather Repo&lt;/a&gt;. The goal of the project is for organizations to have a more accurate method of understanding whether the apps they’re using are “safe”. It’s hard to know whether apps that claim to be secure really are. Have they been vetted by a third party? Are there existing case studies? Has a threat analysis been performed?&lt;/p&gt;

&lt;p style=&#34;text-align: center;&#34;&gt;
  &lt;a href=&#34;http://weatherrepo.com&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;aligncenter size-medium wp-image-4240&#34; alt=&#34;weatherrepo1&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/06/weatherrepo1-300x300.png&#34; width=&#34;300&#34; height=&#34;300&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/06/weatherrepo1-300x300.png 300w, https://guardianproject.info/wp-content/uploads/2013/06/weatherrepo1-150x150.png 150w, https://guardianproject.info/wp-content/uploads/2013/06/weatherrepo1.png 512w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;We’ve been developing an app store recommendation engine for circumvention tools. One that is backed by better, more open metadata; and interfacing with better, more open repositories. The “better, more open metadata” endeavor is now being pursued by a coalition led by the &lt;a title=&#34;open integrity initiative&#34; href=&#34;https://openintegrity.org/&#34; target=&#34;_blank&#34;&gt;Open Integrity Initiative&lt;/a&gt;. As founding members of the group supporting this initiative, we’ve been working closely to develop tools based on the research and metadata frameworks that they’re contributing. Metadata will be culled from other sources to supplement this approach and allow for a comprehensive scan of the entire app ecosystem.&lt;/p&gt;

&lt;p&gt;The success of the project mainly lays in the fact that the crucial groundwork has been laid for our goal of helping organizations make sense of whether the tools they’re using are “safe” or not. We’ve created an API allowing any organization to take our lessons as well as information and apply it. The growing number of efforts in the security and privacy space, as well as our own goal of a publicly facing “app bazaar” are not possible without groundwork such as this and we’re proud to have been able to produce it.&lt;/p&gt;

&lt;p&gt;Our finished API is now documented at &lt;a href=&#34;http://weatherrepo.com/api/&#34;&gt;http://weatherrepo.com/api&lt;/a&gt; . We put up a blog to post about the project and updates of news and events, available at &lt;a href=&#34;http://weatherrepo.com/report&#34;&gt;http://blog.weatherrepo.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’re extremely interested in the concept of human unit testing and want to make sure that our apps, and the greater set of tools that are out there helping the world, are both usable and that users have the digital literacy to understand how they’re being protected by them and how not. Now that our API is finished, we’re seeding our database with content according to our original set of research questions. And we’re asking for YOUR help. Please go to &lt;a href=&#34;http://weatherrepo.com/report&#34;&gt;http://weatherrepo.com/report&lt;/a&gt; and add details about the tools that you use and/or make. Let’s populate this database together and make the world a more obviously and honestly secure place!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Only Way to Visit Strongbox on a Phone</title>
      <link>https://guardianproject.github.io/info/2013/05/16/the-only-way-to-visit-strongbox-on-a-phone/</link>
      <pubDate>Thu, 16 May 2013 17:43:06 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2013/05/16/the-only-way-to-visit-strongbox-on-a-phone/</guid>
      <description>&lt;p dir=&#34;ltr&#34;&gt;
  &lt;em&gt;The New Yorker&lt;/em&gt; magazine just launched &lt;a href=&#34;http://www.newyorker.com/online/blogs/closeread/2013/05/introducing-strongbox-anonymous-document-sharing-tool.html&#34;&gt;Strongbox&lt;/a&gt;, a whistleblower submission system that’s hosted on a hidden website. There’s only one way to access the hidden site on a phone or tablet, and that’s with our &lt;a href=&#34;https://play.google.com/store/apps/details?id=info.guardianproject.browser&amp;hl=en&#34;&gt;Orweb app&lt;/a&gt;. Here’s a simple breakdown of how to do securely and anonymously blow the whistle, explained in an interactive tutorial:
&lt;/p&gt;

&lt;p style=&#34;text-align: center;&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/howto/strongbox&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;size-medium wp-image-3719  aligncenter&#34; alt=&#34;galaxy19&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/05/galaxy19-199x300.png&#34; width=&#34;199&#34; height=&#34;300&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/05/galaxy19-199x300.png 199w, https://guardianproject.info/wp-content/uploads/2013/05/galaxy19.png 400w&#34; sizes=&#34;(max-width: 199px) 100vw, 199px&#34; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p dir=&#34;ltr&#34; style=&#34;text-align: center;&#34;&gt;
  &lt;em&gt;Visit &lt;a title=&#34;strongbox tutorial&#34; href=&#34;https://guardianproject.info/howto/strongbox&#34; target=&#34;_blank&#34;&gt;guardianproject.info/howto/strongbox&lt;/a&gt; for an interactive tutorial on using Strongbox on your phone.&lt;/em&gt;
&lt;/p&gt;

&lt;p dir=&#34;ltr&#34;&gt;
  The website exists as a hidden site on what is widely known as the darknet, since you are going there hidden or “in the dark.” Instead of a .com, .org, or .info address (like &lt;a href=&#34;https://guardianproject.info/&#34; target=&#34;_blank&#34;&gt;guardianproject.info&lt;/a&gt;) the sites like Strongbox show up with a .onion. And like you need a web browser to go to a .com web address, you need a darknet browser to go to a .onion darknet address. On a mobile, we make the most secure and anonymous darknet &amp; web browser, Orweb. And if you want to get to strongbox on your phone, we’re the only way to do it.
&lt;/p&gt;

&lt;p dir=&#34;ltr&#34;&gt;
  To browse, you’ll need our &lt;a title=&#34;orweb&#34; href=&#34;https://guardianproject.info/apps/orweb&#34; target=&#34;_blank&#34;&gt;Orweb&lt;/a&gt; app. It’s currently only available for Android and you can &lt;a title=&#34;Orweb anonymous browser&#34; href=&#34;https://play.google.com/store/apps/details?id=info.guardianproject.browser &#34; target=&#34;_blank&#34;&gt;get it here&lt;/a&gt;. If you have another type of phone or tablet, unfortunately you’ll have to use a computer.
&lt;/p&gt;

&lt;p dir=&#34;ltr&#34;&gt;
  For Orweb to be anonymous and give you access to the darknet .onion addresses, you’ll need to enable onion routing with our &lt;a title=&#34;orbot&#34; href=&#34;https://guardianproject.info/apps/orbot&#34; target=&#34;_blank&#34;&gt;Orbot&lt;/a&gt; plugin. This plugin gives Orweb and other compatible apps (like our &lt;a href=&#34;https://play.google.com/store/apps/details?id=info.guardianproject.otr.app.im&#34;&gt;Gibberbot secure chat&lt;/a&gt;  for Facebook, Google, &amp; Jabber) the ability to send web traffic through the darknet, thus avoiding tracking as well as blocking. You can &lt;a title=&#34;Orbot on Android&#34; href=&#34;https://play.google.com/store/apps/details?id=org.torproject.android  &#34; target=&#34;_blank&#34;&gt;download Orbot here&lt;/a&gt;. It’s the official app of the &lt;a href=&#34;https://TorProject.org&#34;&gt;Tor Project&lt;/a&gt;, which develops the onion routing protocol, on Android.
&lt;/p&gt;

&lt;p dir=&#34;ltr&#34;&gt;
  Once both are installed, you just need to go to this hidden site: &lt;a title=&#34;Strongbox Onion Site&#34; href=&#34;http://tnysbtbxsf356hiy.onion/&#34; target=&#34;_blank&#34;&gt;http://tnysbtbxsf356hiy.onion&lt;/a&gt; . Make sure that you’re using the Orweb browser and that Orbot is running. From there, you can easily submit messages to The New Yorker. Unfortunately you can’t yet submit files to them through the phone just yet.
&lt;/p&gt;

&lt;p dir=&#34;ltr&#34;&gt;
  Overall, this is an exciting step in the right direction. With an increase in tracking and crackdown on political dissidents and whistleblowers around the world, there need to be safe and trusted ways of sharing information that has the potential of saving lives and making the world a better place. &lt;a title=&#34;the new yorker magazine&#34; href=&#34;http://www.newyorker.com/&#34; target=&#34;_blank&#34;&gt;The New Yorker&lt;/a&gt; is one of the most trusted journalistic outfits in the world and it will be interesting to follow how they understand and vet information that comes in from anonymous sources. It will be a lesson for the entire privacy community.
&lt;/p&gt;

&lt;p dir=&#34;ltr&#34; style=&#34;text-align: center;&#34;&gt;
  &lt;a href=&#34;http://instagram.com/p/PihUXCmJzW/&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;size-medium wp-image-3730 aligncenter&#34; title=&#34;On the Internet, algorithms can infer you&#39;re a dog.&#34; alt=&#34;Dog Algorithm&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2013/05/Dog-Algorithm-300x300.jpg&#34; width=&#34;300&#34; height=&#34;300&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2013/05/Dog-Algorithm-300x300.jpg 300w, https://guardianproject.info/wp-content/uploads/2013/05/Dog-Algorithm-150x150.jpg 150w, https://guardianproject.info/wp-content/uploads/2013/05/Dog-Algorithm.jpg 612w&#34; sizes=&#34;(max-width: 300px) 100vw, 300px&#34; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p dir=&#34;ltr&#34;&gt;
  At the same time, it’s not yet a trusted technology. While the code is accessible and &lt;a href=&#34;http://deaddrop.github.io/&#34;&gt;open source&lt;/a&gt; it is unclear whether it’s a full version of the DeadDrop code that it came from or a fork of it. It also hasn’t been audited yet. Already, we’re seeing issues popping up on &lt;a href=&#34;https://github.com/deaddrop/deaddrop/issues&#34;&gt;the code&lt;/a&gt;. Hopefully it will be fully vetted as a solution and stand up to the ambitious and crucial claims that it is able “to provide you with a greater degree of anonymity and security than afforded by conventional e-mail.”
&lt;/p&gt;

&lt;p dir=&#34;ltr&#34;&gt;
  In the months before January, I worked a few seats down from Aaron Swartz in the ThoughtWorks offices. Since those shocking days, it’s been inspiring to continue to see his legacy. I spoke with him a bunch of times about using technology to introduce truly disruptive techniques for empowering people whose rights were otherwise being trampled. At the time, we were working on &lt;a href=&#34;http://markbelinsky.com/crowdring/&#34;&gt;Crowdring&lt;/a&gt;, an intiative from &lt;a href=&#34;http://www.therules.org/&#34;&gt;/The Rules&lt;/a&gt;. And we spoke about the power of leveraging telephony to give voice so widely, and the trade off of handing over personally identifiable information. He recognized the need for constantly evolving and shifting tactics and was expert at integrating that into both strategy and code. It’s an honor to continue to work with him now, and with the rest of the open source community as we all contribute code and ideas to make the world better.
&lt;/p&gt;

&lt;p dir=&#34;ltr&#34;&gt;
  Having just won the Knight News Challenge for our &lt;a href=&#34;https://guardianproject.info/2013/01/27/informacam-wins-knight-news-challenge/&#34;&gt;Informacam project&lt;/a&gt;, we’re excited at the growing interest from the world of journalism in making sure that sources are kept truly secure and anonymous in the digital age. We’re working to build our whole &lt;a href=&#34;https://play.google.com/store/apps/dev?id=6502754515281796553&#34;&gt;suite of tools&lt;/a&gt; to make it easier and better to do so. If you want to reach out to us, anonymously or otherwise, to &lt;a title=&#34;Guardian Contact&#34; href=&#34;https://guardianproject.info/contact/ &#34;&gt;let us know how we can help&lt;/a&gt;, you can use Orbot and Tor to do so over any of these methods. We look forward to it!
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Freebird Flys High</title>
      <link>https://guardianproject.github.io/info/2012/06/28/freebird-flys-high/</link>
      <pubDate>Thu, 28 Jun 2012 11:59:38 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2012/06/28/freebird-flys-high/</guid>
      <description>&lt;div style=&#34;width: 620px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;https://guardianproject.info/events/freebird2012rio/index.php?cmd=image&amp;sfpg=KmZyZWViaXJkZ3JvdXAuanBnKjk3NjQzMjVmMmJlZDAzMjliZDQ3MzhiY2Q0MzQyNjdi&#34;&gt;&lt;img src=&#34;https://guardianproject.info/events/freebird2012rio/index.php?cmd=image&amp;sfpg=KmZyZWViaXJkZ3JvdXAuanBnKjk3NjQzMjVmMmJlZDAzMjliZDQ3MzhiY2Q0MzQyNjdi&#34; alt=&#34;&#34; width=&#34;610&#34; height=&#34;458&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Freebird: Rio group picture via Obscuracam for Android
  &lt;/p&gt;
&lt;/div&gt;

&lt;p style=&#34;text-align: center;&#34;&gt;
  &lt;p style=&#34;text-align: left;&#34;&gt;
    What happens when you gather coders with privacy and security activists from around the world? &lt;a title=&#34;freebird&#34; href=&#34;https://guardianproject.info/freebird/&#34; target=&#34;_blank&#34;&gt;Freebird&lt;/a&gt;!
  &lt;/p&gt;
  

&lt;p&gt;&lt;p style=&#34;text-align: left;&#34;&gt;
    We held a simultaneous event in NYC and Rio, a one-day &lt;a title=&#34;barcamp&#34; href=&#34;http://barcamp.org/&#34; target=&#34;_blank&#34;&gt;barcamp&lt;/a&gt; aimed to empower users to be more informed and engaged around their use of mobile technology, while engaging with developers to promote interest in open-source tools, security and privacy. Freebird was a pre-event for &lt;a title=&#34;rightscon&#34; href=&#34;https://www.rightscon.org/&#34; target=&#34;_blank&#34;&gt;RightsCon:Rio&lt;/a&gt;, which allowed us to continue and extend conversations and ideas into the larger context of information technologies and human rights. &lt;strong&gt; &lt;/strong&gt;
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p style=&#34;text-align: left;&#34;&gt;
    The camp was roughly split into two tracks, USING and MAKING:
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;ul&gt;
    &lt;li&gt;
      USING:  involved expanding mobile users’ understanding of how their phone works, or is working against them, and enabling them to replace the built-in software with more open or secure versions.
    &lt;/li&gt;
    &lt;li&gt;
      MAKING:  focused on creating new or porting existing security software to mobile platforms, discussion of mobile threat models, and use of mobile technology to assist rights defenders, journalists, and activists.
    &lt;/li&gt;
  &lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;&lt;div&gt;
    &lt;div style=&#34;width: 514px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
      &lt;a href=&#34;https://guardianproject.info/events/freebird2012rio/index.php?cmd=image&amp;sfpg=KlAxMDMwNzUzLkpQRyo0OTQxMjMwODdjMDlhMmY2NTkwOGNkNGRlMTVjZDFjZQ&#34;&gt;&lt;img class=&#34;&#34; src=&#34;https://guardianproject.info/events/freebird2012rio/index.php?cmd=image&amp;sfpg=KlAxMDMwNzUzLkpQRyo0OTQxMjMwODdjMDlhMmY2NTkwOGNkNGRlMTVjZDFjZQ&#34; alt=&#34;&#34; width=&#34;504&#34; height=&#34;360&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  &amp;lt;p class=&amp;quot;wp-caption-text&amp;quot;&amp;gt;
    Lee of Guardian walks through the design of the Open Secure Telephony Network
  &amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    It was a great event with some fantastic discussions and opportunities for new tech and collaborations. Want to re-live the magic? You can check out &lt;a title=&#34;rio&#34; href=&#34;https://guardianproject.info/events/freebird2012rio/&#34; target=&#34;_blank&#34;&gt;the pics from Rio &lt;/a&gt;and the &lt;a title=&#34;rio storify&#34; href=&#34;https://storify.com/mbelinsky/freebird-rio&#34; target=&#34;_blank&#34;&gt;Storify from the event&lt;/a&gt;, as well as the &lt;a title=&#34;nyc storify&#34; href=&#34;https://storify.com/mbelinsky/freebirdcamp&#34; target=&#34;_blank&#34;&gt;Storify from the NYC event&lt;/a&gt;. Also, be sure to check out Brendon O’Brien’s post on the event, &lt;a href=&#34;http://activized.wordpress.com/2012/06/20/making-privacy-issues-public/&#34;&gt;Making Privacy Issues Public&lt;/a&gt;. From the discussions, it seemed as if there’s still quite a bit of learning that the community has to do about how phones function and all the dangers and complications therein. At the same time, there was a lot of passion and creativity for how to combat invasive tools and better methods of disseminating this type of knowledge and conversation.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;div style=&#34;width: 299px&#34; class=&#34;wp-caption alignnone&#34;&gt;
    &lt;a href=&#34;https://guardianproject.info/events/freebird2012rio/index.php?cmd=image&amp;sfpg=KlAxMDMwNzM3LkpQRypiOTQ4NzFlN2Q0ZTdjYTA0ODIwZmZmMjI4MTE2YTNiOQ&#34;&gt;&lt;img src=&#34;https://guardianproject.info/events/freebird2012rio/index.php?cmd=image&amp;sfpg=KlAxMDMwNzM3LkpQRypiOTQ4NzFlN2Q0ZTdjYTA0ODIwZmZmMjI4MTE2YTNiOQ&#34; alt=&#34;&#34; width=&#34;289&#34; height=&#34;432&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p class=&amp;quot;wp-caption-text&amp;quot;&amp;gt;
  &amp;lt;a href=&amp;quot;https://guardianproject.info/events/freebird2012rio/index.php?cmd=image&amp;amp;sfpg=KlAxMDMwNzMzLkpQRyphMDliZThiNDdlMjk0ZjA3ZDliNDI5MzY2MjdkMzQ2OA&amp;quot;&amp;gt;&amp;lt;img class=&amp;quot;&amp;quot; src=&amp;quot;https://guardianproject.info/events/freebird2012rio/index.php?cmd=image&amp;amp;sfpg=KlAxMDMwNzMzLkpQRyphMDliZThiNDdlMjk0ZjA3ZDliNDI5MzY2MjdkMzQ2OA&amp;quot; alt=&amp;quot;&amp;quot; width=&amp;quot;432&amp;quot; height=&amp;quot;289&amp;quot; /&amp;gt;&amp;lt;/a&amp;gt; The collaborative “mosh pit” brainstorm helped guide the discussions for the day
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    None of this would have been possible without our partners: Freebird was funded by &lt;a href=&#34;http://openitp.org/&#34;&gt;OpenITP&lt;/a&gt;, and facilitated by &lt;a title=&#34;aspiration tech&#34; href=&#34;http://aspirationtech.org/&#34; target=&#34;_blank&#34;&gt;Aspiration Tech&lt;/a&gt;, noted open-source advocates and facilitators. Special guests  included developers from &lt;a title=&#34;http://zetetic.net/&#34; href=&#34;http://zetetic.net/&#34; target=&#34;_blank&#34;&gt;Zetetic&lt;/a&gt; (SQLCipher), &lt;a title=&#34;tor anonymity&#34; href=&#34;https://www.torproject.org/&#34; target=&#34;_blank&#34;&gt;the Tor Project&lt;/a&gt;, the &lt;a href=&#34;http://oti.newamerica.net/commotion_wireless_0/&#34; target=&#34;_blank&#34;&gt;Commotion&lt;/a&gt; project, and a number of prominent human rights and activists organizations. Thanks to all these great organizations and everyone else who attended.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;div style=&#34;width: 442px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
    &lt;a href=&#34;https://guardianproject.info/events/freebird2012rio/index.php?cmd=image&amp;sfpg=KlAxMDMwNzY2LkpQRyo4ZGZkZjk5MDZkNTk0YzM1OWJjODMwMzYyOGMyMmZkMA&#34;&gt;&lt;img class=&#34;&#34; src=&#34;https://guardianproject.info/events/freebird2012rio/index.php?cmd=image&amp;sfpg=KlAxMDMwNzY2LkpQRyo4ZGZkZjk5MDZkNTk0YzM1OWJjODMwMzYyOGMyMmZkMA&#34; alt=&#34;&#34; width=&#34;432&#34; height=&#34;289&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;p class=&amp;quot;wp-caption-text&amp;quot;&amp;gt;
  Harlo of Guardian walks through the InformaCam sensor capture code and metadata formats
&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Some of our favorite twitter coverage from the event:
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;
    &lt;p&gt;
      Encantada de conocer a desarrolladores de Thor, profesores universitarios, directivos del Free Bird project &lt;a href=&#34;https://twitter.com/search/%2523freebird2012&#34;&gt;#freebird2012&lt;/a&gt; — Elaine Díaz(@elainediaz2003) &lt;a href=&#34;https://twitter.com/elainediaz2003/status/207830610247548928&#34;&gt;May 30, 2012&lt;/a&gt; &lt;em&gt;&lt;/em&gt; &lt;em&gt;“Nice to meet Tor developers, academics, project managers ‪ Free Bird # freebird2012”&lt;/em&gt;
    &lt;/p&gt;
  &lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;
    &lt;p&gt;
      What’s the pyramid of mobile security?&lt;a href=&#34;https://twitter.com/search/%2523FreebirdCamp&#34;&gt;#FreebirdCamp&lt;/a&gt;@ ITP &lt;a title=&#34;http://instagr.am/p/LQyJuisGyl/&#34; href=&#34;http://t.co/iYWX49z0&#34;&gt;instagr.am/p/LQyJuisGyl/&lt;/a&gt; — noel hidalgo, frsa (@noneck) &lt;a href=&#34;https://twitter.com/noneck/status/207914569245523970&#34;&gt;May 30, 2012&lt;/a&gt;
    &lt;/p&gt;
  &lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet tw-align-center&#34;&gt;
    &lt;p&gt;
      The Guardian Project’s Freebird event was absolutely awesome! &lt;a title=&#34;https://guardianproject.info/freebird/&#34; href=&#34;https://t.co/qq5SbVsy&#34;&gt;guardianproject.info/freebird/&lt;/a&gt; — Jacob Appelbaum (@ioerror) &lt;a href=&#34;https://twitter.com/ioerror/status/207926015241093120&#34;&gt;May 30, 2012&lt;/a&gt;
    &lt;/p&gt;
  &lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;&lt;p&gt;
    Together, our growing community will help develop the tools and ideas for a tomorrow that is free as a bird.
  &lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;p style=&#34;text-align: center;&#34;&gt;
    &lt;a href=&#34;https://guardianproject.info/wp-content/uploads/2012/04/freebirdposter1.jpg&#34;&gt;&lt;img class=&#34;aligncenter&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/04/freebirdposter1.jpg&#34; alt=&#34;&#34; width=&#34;475&#34; height=&#34;734&#34; /&gt;&lt;/a&gt;
  &lt;/p&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IOCipher lives! encrypted virtual file system for Android</title>
      <link>https://guardianproject.github.io/info/2012/05/17/iocipher-lives-encrypted-virtual-file-system-for-android/</link>
      <pubDate>Thu, 17 May 2012 16:44:35 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2012/05/17/iocipher-lives-encrypted-virtual-file-system-for-android/</guid>
      <description>&lt;p&gt;Nathan and I just got the first complete test of IOCipher working in the IOCipherServer/SpotSync app. We created a filesystem sqlite.db file, then mounted it and got all the files via HTTP. In the test suite, I have lots of operations all running fine and encrypting! The core idea here is a java.io API replacement that transparently writes to an encrypted store. So for the most part, just change your import statements from:&lt;/p&gt;

&lt;pre&gt;java.io.*   ---&gt;   info.guardianproject.iocipher.*&lt;/pre&gt;

&lt;p&gt;Then in your code, make a &lt;code&gt;VirtualFileSystem&lt;/code&gt; instance and mount it, and unmount it. That’s about it. Right now, you can have only a single filesystem per app, but you can unmount one and mount another. We hope to add support for multiple filesystems in the not-too-distant future.&lt;/p&gt;

&lt;p&gt;Its ready for people to try, some kind of early alpha. Here’s the framework itself:&lt;br /&gt;
&lt;a href=&#34;https://github.com/guardianproject/IOCipher&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/guardianproject/IOCipher&#34;&gt;https://github.com/guardianproject/IOCipher&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;THe easiest way to get started right now is probably the test suite:&lt;br /&gt;
&lt;a href=&#34;https://github.com/guardianproject/IOCipherTests&#34; title=&#34;IOCipherTests&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/guardianproject/IOCipherTests&#34;&gt;https://github.com/guardianproject/IOCipherTests&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Our first app using it is here:&lt;br /&gt;
&lt;a href=&#34;https://github.com/guardianproject/IOCipherServer&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://github.com/guardianproject/IOCipherServer&#34;&gt;https://github.com/guardianproject/IOCipherServer&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Comments, feedback, criticism, welcome and wanted!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Singing and Dancing for Encryption</title>
      <link>https://guardianproject.github.io/info/2012/04/19/singing-and-dancing-for-encryption/</link>
      <pubDate>Thu, 19 Apr 2012 09:30:48 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2012/04/19/singing-and-dancing-for-encryption/</guid>
      <description>&lt;p style=&#34;text-align: center&#34;&gt;
  &lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;&lt;a href=&#34;https://secure.flickr.com/photos/ksd-photography/4899157618/&#34;&gt;&lt;img class=&#34;aligncenter&#34; src=&#34;https://farm5.staticflickr.com/4099/4899157618_b35f53be23_z.jpg&#34; alt=&#34;【KSD Photography】 Capturing Life&#34; width=&#34;640&#34; height=&#34;343&#34; /&gt;&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p style=&#34;text-align: left&#34;&gt;
  &lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;If you see me dancing or signing with my phone in my hand, I may not just be having a great time, but also creating an encryption key. Part of the issue with security is that it can often be difficult to implement or an added step in what users want to be an easy and seamless process. What if we can make secure and private communications fun and easy?&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;This past weekend, a bunch of members of the Guardian Project team found ourselves at the &lt;a title=&#34;wall-street-journal-data-transparency-weekend-day&#34; href=&#34;http://blogs.wsj.com/digits/2012/04/16/the-winners-of-wsjs-data-transparency-weekend/&#34; target=&#34;_blank&#34;&gt;Wall Street Journal Data Transparency Hackathon&lt;/a&gt;. The Journal put this together in order to “invite developers to help build free Web tools that promote data transparency and control.” The tracks were divided into:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;&lt;strong&gt;Scanning:&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt; Enhancing technology that scans the Web to reveal tracking&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;&lt;strong&gt;Education:&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt; Helping people see how much information they share&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;&lt;strong&gt;Control:&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt; Improving software that helps people control sensitive information&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;Tracks were led by &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a title=&#34;ashkan soltani&#34; href=&#34;http://ashkansoltani.org/&#34; target=&#34;_blank&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;Ashkan Soltani&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;, an independent researcher and technical adviser to the Journal; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a title=&#34;brian kennish&#34; href=&#34;http://byoogle.com/&#34; target=&#34;_blank&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;Brian Kennish&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;, a Web developer and founder of Disconnect; and &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a title=&#34;Jacob Appelbaum&#34; href=&#34;https://twitter.com/#!/ioerror&#34; target=&#34;_blank&#34;&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;Jacob Appelbaum&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;, a security researcher at the Tor Project. Our teams went down the path of control, with the goal of making tools that are secure by default.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;We danced our way into winning in the control category by helping the victorious &lt;a title=&#34;cryptocat&#34; href=&#34;https://crypto.cat/about/&#34; target=&#34;_blank&#34;&gt;Cryptocat&lt;/a&gt; team that has a tool for encrypted chat service right from the browser. This fantastic project blew through a number of innovations, porting into a Firefox web app, doing desktop notifications, and improved cryptographic primitives from within the browser. We helped by creating an Android app for the tool that converts dance moves into a random number generator for creating the encryption key. Just start the program, enter the name of the chat, enter your nickname, then DANCE. Starting a secure chat from a phone is now as easy as that. You can try it in your browser via their site &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&#34;https://crypto.cat/&#34;&gt;&lt;span style=&#34;color: #0025e5&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;&lt;span style=&#34;text-decoration: underline&#34;&gt;https://crypto.cat/&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt; or &lt;a title=&#34;cryptocat android app&#34; href=&#34;https://guardianproject.info/apps/cryptocat/&#34; target=&#34;_blank&#34;&gt;download our new Android app&lt;/a&gt; (either with or without Tor compatibility)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;. And congrats to &lt;a title=&#34;nadim kobeissi&#34; href=&#34;http://nadim.cc/&#34; target=&#34;_blank&#34;&gt;Nadim Kobeissi&lt;/a&gt; for this well deserved win and the team Tobias Pulls, Jacob Appelbaum, &lt;a title=&#34;david huerta&#34; href=&#34;http://davidhuerta.me/&#34; target=&#34;_blank&#34;&gt;David Huerta&lt;/a&gt;, &lt;a title=&#34;joseph bonneau&#34; href=&#34;http://www.jbonneau.com/&#34; target=&#34;_blank&#34;&gt;Joseph Bonneau&lt;/a&gt;  and &lt;a title=&#34;nathan freittas&#34; href=&#34;http://openideals.com/&#34; target=&#34;_blank&#34;&gt;Nathan Freitas&lt;/a&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div style=&#34;width: 510px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;https://secure.flickr.com/photos/aspirationtech/7077092229/sizes/m/in/photostream/&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5071/7077092229_5e3f9ed867.jpg&#34; alt=&#34;&#34; width=&#34;500&#34; height=&#34;333&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    The Guardian Team &amp; Friends Hacking Away
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;We sang our way into winning in a new category that the judges came up with, “soup cans and string” for &lt;a title=&#34;Open Secure Telephony Network (OSTN) ostel&#34; href=&#34;https://ostel.me&#34; target=&#34;_blank&#34;&gt;Ostel&lt;/a&gt;, our encrypted VOIP solution. Launching an alpha version of our tool in front of some of the worlds leading experts in the security field was a risky move, but thankfully we managed to work out a number of bugs and generally received great feedback and support from the community. Over the weekend, we made progress in our alpha demo, identified additional clients that can receive calls on Mac, PC, Linux, iPhone, &amp;amp; Blackberry and created a new user signup system that allows users to register and immediately be sent an email with a link to their credentials via SSL. To extend the project even further, we have started compiling information on VOIP laws in countries from every continent so that the tool can explicitly be supported on as many platforms, in as many countries and in as many languages as possible. In addition to singing praise, singing (and other voice signatures) might be used in the future for entropy as the random number generator for the encryption key exchange. &lt;a title=&#34;privategsm&#34; href=&#34;http://www.privatewave.com/products-services/private-gsm/product.html&#34; target=&#34;_blank&#34;&gt;PrivateGSM&lt;/a&gt; is already doing this and it would be great to incorporate this feature into Ostel &amp;amp; &lt;a title=&#34;CSipSimple&#34; href=&#34;https://code.google.com/p/csipsimple/&#34; target=&#34;_blank&#34;&gt;CSipSimple&lt;/a&gt; later on. Thanks to Lee Azzarello, Luke Stark, Sean McIntyre and Zach Schwartz for being great members of the Ostel team. &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;div style=&#34;width: 510px&#34; class=&#34;wp-caption aligncenter&#34;&gt;
  &lt;a href=&#34;https://secure.flickr.com/photos/aspirationtech/6935372190/sizes/m/in/photostream/&#34;&gt;&lt;img src=&#34;https://farm6.staticflickr.com/5327/6935372190_a576a30d16.jpg&#34; alt=&#34;&#34; width=&#34;500&#34; height=&#34;333&#34; /&gt;&lt;/a&gt;
  
  &lt;p class=&#34;wp-caption-text&#34;&gt;
    Lee accepts the &#34;Soupcan &amp; Strings Award&#34; for Ostel
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Dancing for encryption in Cryptocat, singing for encryption in Ostel. Let us know if you have other ideas for fun ways to generate keys. We’re always looking for inspiring ideas from the community.&lt;/p&gt;

&lt;p&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;We’re even well on our way to seeing the world through encryption tinted glasses. Progress was made on making innovations in &lt;a title=&#34;informacam&#34; href=&#34;https://guardianproject.info/2012/01/20/introducing-informacam/&#34; target=&#34;_blank&#34;&gt;our Informacam project&lt;/a&gt;. The goal is to be able to snap a picture, but protect the privacy of the people in the frame by blurring their faces and the metadata connected to the event. Whie this can be crucial in a sensitive scenario, it can also be important that a judge or trusted organization can “unblur” the image and so we’re working on a way to encrypt and send those pixels. Bugs were removed, code was written, and soon enough, hopefully we’ll be able to incorporate it into the &lt;a title=&#34;google augmented reality goggles&#34; href=&#34;https://arstechnica.com//gadgets/news/2012/04/google-unveils-project-glass-augmented-reality-glasses.ars&#34; target=&#34;_blank&#34;&gt;new Google Augmented reality goggles&lt;/a&gt;.  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;table style=&#34;margin: 0px auto&#34;&gt;
  &lt;tr&gt;
    &lt;td width=&#34;201&#34;&gt;
      &lt;img class=&#34;alignnone size-full wp-image-1461&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/01/Screen-shot-2012-01-20-at-1.21.07-PM.png&#34; alt=&#34;InformaCam (2)&#34; width=&#34;201&#34; height=&#34;332&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2012/01/Screen-shot-2012-01-20-at-1.21.07-PM.png 201w, https://guardianproject.info/wp-content/uploads/2012/01/Screen-shot-2012-01-20-at-1.21.07-PM-181x300.png 181w&#34; sizes=&#34;(max-width: 201px) 100vw, 201px&#34; /&gt;
    &lt;/td&gt;
    
    &lt;td width=&#34;197&#34;&gt;
      &lt;img class=&#34;alignnone size-full wp-image-1462&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/01/Screen-shot-2012-01-20-at-1.21.21-PM.png&#34; alt=&#34;InformaCam (3)&#34; width=&#34;197&#34; height=&#34;330&#34; srcset=&#34;https://guardianproject.info/wp-content/uploads/2012/01/Screen-shot-2012-01-20-at-1.21.21-PM.png 197w, https://guardianproject.info/wp-content/uploads/2012/01/Screen-shot-2012-01-20-at-1.21.21-PM-179x300.png 179w&#34; sizes=&#34;(max-width: 197px) 100vw, 197px&#34; /&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
  
  &lt;tr&gt;
    &lt;td&gt;
      &lt;em&gt;Using the InformaCam “Identify” filter.&lt;/em&gt;
    &lt;/td&gt;
    
    &lt;td&gt;
      &lt;em&gt;Select a Trusted Destination for your encrypted media.&lt;/em&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;span&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;Being head down, singing and dancing encryption with our security glasses on while coding, it was easy to miss the other amazing projects in the room. I highly recommend checking out the other winners as well. They’re doing fantastic and necessary work:&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;“Scanning” Track Winner:  &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&#34;http://www.hackerleague.org/hackathons/wsj-data-transparency-code-a-thon/hacks/tosback2&#34;&gt;&lt;span style=&#34;color: #0025e5&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;&lt;span style=&#34;text-decoration: underline&#34;&gt;TOSBack2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt; – a living archive of all privacy policies&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;“Education” Track Winner:   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&#34;http://www.hackerleague.org/hackathons/wsj-data-transparency-code-a-thon/hacks/privacybucket&#34;&gt;&lt;span style=&#34;color: #0025e5&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;&lt;span style=&#34;text-decoration: underline&#34;&gt;PrivacyBucket&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt; – a Chrome extension that measures the extent to which individual third-party trackers can discover demographic information about the use&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;Judges’ Choice Winner:   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&#34;http://www.hackerleague.org/hackathons/wsj-data-transparency-code-a-thon/hacks/site-scoper&#34;&gt;&lt;span style=&#34;color: #0025e5&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;&lt;span style=&#34;text-decoration: underline&#34;&gt;Site Scoper&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;“Ready for Primetime” Winner:   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&#34;http://www.hackerleague.org/hackathons/wsj-data-transparency-code-a-thon/hacks/mobilescope&#34;&gt;&lt;span style=&#34;color: #0025e5&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;&lt;span style=&#34;text-decoration: underline&#34;&gt;MobileScope&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;“Zuckerberg/Systrom Memorial Award for Opportunistic Optimism” Winner:   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&#34;http://www.hackerleague.org/hackathons/wsj-data-transparency-code-a-thon/hacks/pestagram-its-pinterest-for-instagram&#34;&gt;&lt;span style=&#34;color: #0025e5&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;&lt;span style=&#34;text-decoration: underline&#34;&gt;Pestagram&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;“Best Listener” Winner:   &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;a href=&#34;http://www.hackerleague.org/hackathons/wsj-data-transparency-code-a-thon/hacks/the-price-of-free&#34;&gt;&lt;span style=&#34;color: #0025e5&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;&lt;span style=&#34;text-decoration: underline&#34;&gt;The Price of Free&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/a&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt; &lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;span style=&#34;color: #000000&#34;&gt;&lt;span style=&#34;font-family: ArialMT,sans-serif&#34;&gt;&lt;span style=&#34;font-size: small&#34;&gt;Thanks to &lt;a title=&#34;julia angwin&#34; href=&#34;http://www.juliaangwin.com/&#34; target=&#34;_blank&#34;&gt;Julia Angwin&lt;/a&gt; and the WSJ team for making this great event and the fantastic &lt;a title=&#34;what they know&#34; href=&#34;http://blogs.wsj.com/wtk/&#34; target=&#34;_blank&#34;&gt;What They Know blog&lt;/a&gt; possible, to &lt;a title=&#34;gunner aspiration&#34; href=&#34;http://aspirationtech.org/blog/gunner&#34; target=&#34;_blank&#34;&gt;Gunner&lt;/a&gt; for being such an inspiring facilitator, to judges Alessandro Acquisti, Sid Stamm, Dan Kaminsky, &lt;a title=&#34;andrew mclaughlin&#34; href=&#34;http://andrewmclaughlin.info/&#34; target=&#34;_blank&#34;&gt;Andrew McLaughlin&lt;/a&gt; and to everyone else who made this possible.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Call My Email</title>
      <link>https://guardianproject.github.io/info/2012/03/22/call-my-email/</link>
      <pubDate>Thu, 22 Mar 2012 16:31:45 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2012/03/22/call-my-email/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://commons.wikimedia.org/wiki/File:PFC_Gladys_Bellon,_Basile,_Louisiana,_one_of_the_27_WAC_switchboard_operators_flown_from_Paris_for_the_Potsdam..._-_NARA_-_199010.jpg&#34;&gt;&lt;img class=&#34;aligncenter&#34; src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/b/bc/PFC_Gladys_Bellon%2C_Basile%2C_Louisiana%2C_one_of_the_27_WAC_switchboard_operators_flown_from_Paris_for_the_Potsdam..._-_NARA_-_199010.jpg/764px-PFC_Gladys_Bellon%2C_Basile%2C_Louisiana%2C_one_of_the_27_WAC_switchboard_operators_flown_from_Paris_for_the_Potsdam..._-_NARA_-_199010.jpg&#34; alt=&#34;PFC Gladys Bellon, Basile, Louisiana, one of the 27 WAC switchboard operators flown from Paris for the Potsdam Conference and Sgt. Robert Scott of Pittsburgh, Pennsylvania, test lines in the frame room of the Victory switchboard at U. S. headquarters at Babelsburg, Germany.&#34; width=&#34;600/&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What if you could call me directly through my email? No exchanging of phone numbers or searching for handles on Skype. Just plain and simple email. Now what if we can make that phone call as secure as it is easy. That’s the goal of what we’re doing here at &lt;a title=&#34;Open Secure Telephony Network (OSTN) &#34; href=&#34;https://guardianproject.info/wiki/OSTN&#34; target=&#34;_blank&#34;&gt;Open Secure Telephony Network (OSTN)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The internet is already structured to be able to do this. That’s why I can have all of my emails point to one email box if I want to. Simply by changing the MX records. So why not be able to do that with phone numbers, routing them through my same email by changing the SIP records?&lt;/p&gt;

&lt;p&gt;Guardian Project is in the process of figuring out how to make your life better by doing just that. We’re currently in the early stages of research on how to make a stack for secure telephony standards so that anybody can participate, whether a novice user who wants easy access or a power user who wants to run their own stack.&lt;/p&gt;

&lt;p&gt;Email already handles configurable standards well for text. As a user, I can choose my service (Gmail, Hotmail, &lt;a title=&#34;rise up&#34; href=&#34;https://riseup.net/&#34; target=&#34;_blank&#34;&gt;RiseUp&lt;/a&gt;, self-hosting, etc) and the client (Outlook, &lt;a title=&#34;thunderbird&#34; href=&#34;https://www.mozilla.org/thunderbird/&#34; target=&#34;_blank&#34;&gt;Thunderbird&lt;/a&gt;, Mail, etc) on whatever platform works best for me (Windows, MacOS, Android, etc) and have my custom email (&amp;#x6d;a&amp;#x72;k&amp;#x40;&amp;#x66;u&amp;#x6e;k&amp;#x79;&amp;#x6d;o&amp;#x6e;k&amp;#x65;&amp;#x79;.&amp;#x6e;e&amp;#x74;, &amp;#x6a;&amp;#x65;&amp;#x64;&amp;#x69;&amp;#x38;&amp;#x33;&amp;#x40;&amp;#x72;&amp;#x65;&amp;#x62;&amp;#x65;&amp;#x6c;&amp;#x61;&amp;#x6c;liance.org, etc) point to whichever of these systems I trust the most and works best for me.&lt;/p&gt;

&lt;p&gt;We’re now bringing that ease and customization to voice communication. As a user, I’ll be able to choose my service. We’re currently alpha testing a service we built, &lt;a title=&#34;Ostel.me&#34; href=&#34;http://Ostel.me&#34; target=&#34;_blank&#34;&gt;Ostel.me&lt;/a&gt;, but there are others like &lt;a title=&#34;tanstagi&#34; href=&#34;https://tanstagi.net/&#34; target=&#34;_blank&#34;&gt;Tanstagi&lt;/a&gt;, &lt;a title=&#34;intimi.ca&#34; href=&#34;https://intimi.ca&#34; target=&#34;_blank&#34;&gt;Intimi.ca&lt;/a&gt;. Our open protocol will make it easy for companies to host their own internal server for communication. Whatever platform works best for you (Windows, MacOS, Android, etc) has a tool that lets you make phone calls with the service. We’re working directly with open source tools like &lt;a title=&#34;CSipSimple&#34; href=&#34;https://guardianproject.info/wiki/CSipSimple&#34; target=&#34;_blank&#34;&gt;CSipSimple&lt;/a&gt; on Android and Telephone on MacOS to improve them for best and most secure call quality. We’re also making it easy for people using other tools like &lt;a title=&#34;Groundwire&#34; href=&#34;https://guardianproject.info/wiki/Groundwire&#34; target=&#34;_blank&#34;&gt;Groundwire&lt;/a&gt; on the iPhone to make calls using these tools.&lt;/p&gt;

&lt;p&gt;Our goal is to make a service that’s easier to use and more secure than &lt;a title=&#34;skype&#34; href=&#34;http://www.skype.com/&#34; target=&#34;_blank&#34;&gt;Skype&lt;/a&gt; while cheaper and more reliable than a standard phone. This is just the start, but we’re excited by the progress we’ve already made. If you’d like to help, we’re always looking for smart and passionate people who can be testers, designers, translators, and supporters. Before you can call our email for updates, you can send us a message on it telling us how you’d like to participate, sign up to be an alpha tester on &lt;a title=&#34;ostel website&#34; href=&#34;https://ostel.me/&#34; target=&#34;_blank&#34;&gt;Ostel.me&lt;/a&gt;, or follow us &lt;a title=&#34;guardian twitter&#34; href=&#34;https://twitter.com/#!/guardianproject&#34; target=&#34;_blank&#34;&gt;on Twitter&lt;/a&gt;. Thanks for tuning in!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Our new F-Droid App Repository (out of date!)</title>
      <link>https://guardianproject.github.io/info/2012/03/15/our-new-f-droid-app-repository-out-of-date/</link>
      <pubDate>Thu, 15 Mar 2012 01:27:43 -0400</pubDate>
      
      <guid>https://guardianproject.github.io/info/2012/03/15/our-new-f-droid-app-repository-out-of-date/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: this blog post has been changed to reference our new FDroid repository at &lt;a href=&#34;https://guardianproject.info/fdroid&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://guardianproject.info/fdroid&#34;&gt;https://guardianproject.info/fdroid&lt;/a&gt;&lt;/a&gt;. If you are still using the old one originally described here which has the URL &lt;a href=&#34;https://guardianproject.info/repo&#34;&gt;https://guardianproject.info/repo&lt;/a&gt;, you should switch to the new repo as soon as possible!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For all of you out there looking for a safe way to find and download apps outside of the Play Store (aka Android Market) or random, sketchy third-party app stores and file sharing sites, then your wait is over:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &lt;a href=&#34;http://f-droid.org&#34;&gt;FDroid Repository&lt;/a&gt; is an easily-installable catalogue of FOSS applications for the Android platform. The server contains the details of multiple versions of each application, and the Android client makes it easy to browse, install them onto your device, and keep track of updates.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, F-Droid is like an app store for open-source. More importantly, there is not just one “store”. Anyone can deploy their own repositories of apps, or Repos, much like the way the Debian repo model works.&lt;/p&gt;

&lt;p&gt;We’ve now begun creating our own hosted F-Droid compliant repo where we can easily provide the latest greatest versions of all our apps. As we update the apps, F-Droid should notify you and allow you to update quickly and without hassle.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Quick Steps for using F-Droid with Guardian Project Repo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1) Install the F-Droid Client app. You can get it here: &lt;a href=&#34;https://f-droid.org/FDroid.apk&#34;&gt;https://f-droid.org/FDroid.apk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2) Run the app and go to Menu &amp;gt; Manage Repos&lt;/p&gt;

&lt;p&gt;3) Turn on the “Guardian Project Official Releases” repo&lt;/p&gt;

&lt;p&gt;3) &lt;del datetime=&#34;2015-02-24T16:10:07+00:00&#34;&gt;Enter: &lt;a href=&#34;https://guardianproject.info/repo/&#34;&gt;https://guardianproject.info/repo/&lt;/a&gt;&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;4) Optionally, disable the default repo if you just want GP apps&lt;/p&gt;

&lt;p&gt;5) Return to the main screen, and Menu &amp;gt; Update&lt;/p&gt;

&lt;p&gt;&lt;del datetime=&#34;2015-02-24T16:10:07+00:00&#34;&gt;6) Verify the repo fingerprint by clicking on the repo to see the repo details view. The fingerprint you see there should match this: &lt;code&gt;59050C8155DCA377F23D5A15B77D3713400CDBD8B42FBFBE0E3F38096E68CECE&lt;/code&gt;. &lt;/del&gt;&lt;/p&gt;

&lt;p&gt;From here you will see the “Available” tab for apps you don’t have the “Installed” tab for apps you have the latest version of, and the “Updates” tab for apps you have, but that are not up to date.&lt;/p&gt;

&lt;p&gt;You can open each app by browsing and selecting them, and then via Menu options, choose to install them, or access their websites, source code links, or issue tracking pages.&lt;/p&gt;

&lt;div id=&#39;gallery-6&#39; class=&#39;gallery galleryid-1632 gallery-columns-3 gallery-size-thumbnail&#39;&gt;
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2012/03/cats.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/03/cats-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2012/03/device-2012-03-15-110254.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/03/device-2012-03-15-110254-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2012/03/device-2012-03-15-110305.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/03/device-2012-03-15-110305-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;br style=&#34;clear: both&#34; /&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2012/03/device-2012-03-15-110320.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/03/device-2012-03-15-110320-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2012/03/device-2012-03-15-110341.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/03/device-2012-03-15-110341-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2012/03/device-2012-03-15-110351.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/03/device-2012-03-15-110351-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;br style=&#34;clear: both&#34; /&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2012/03/device-2012-03-15-110404.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/03/device-2012-03-15-110404-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;dl class=&#39;gallery-item&#39;&gt;
    &lt;dt class=&#39;gallery-icon portrait&#39;&gt;
      &lt;a href=&#39;https://guardianproject.info/wp-content/uploads/2012/03/device-2012-03-15-110434.png&#39;&gt;&lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://guardianproject.info/wp-content/uploads/2012/03/device-2012-03-15-110434-150x150.png&#34; class=&#34;attachment-thumbnail size-thumbnail&#34; alt=&#34;&#34; /&gt;&lt;/a&gt;
    &lt;/dt&gt;
  &lt;/dl&gt;
  
  &lt;br style=&#39;clear: both&#39; /&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
